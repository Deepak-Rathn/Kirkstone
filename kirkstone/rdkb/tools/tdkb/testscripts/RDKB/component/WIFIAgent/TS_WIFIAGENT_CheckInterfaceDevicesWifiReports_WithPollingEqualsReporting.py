##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2023 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version="1.0" encoding="UTF-8"?><xml>
  <id/>
  <version>5</version>
  <name>TS_WIFIAGENT_CheckInterfaceDevicesWifiReports_WithPollingEqualsReporting</name>
  <primitive_test_id/>
  <primitive_test_name>WIFIAgent_Set_Get</primitive_test_name>
  <primitive_test_version>1</primitive_test_version>
  <status>FREE</status>
  <synopsis>To check if the Interface Devices Wifi Harvester reports are properly generated when the reporting and polling intervals are configured.</synopsis>
  <groups_id/>
  <execution_time>10</execution_time>
  <long_duration>false</long_duration>
  <advanced_script>false</advanced_script>
  <remarks/>
  <skip>false</skip>
  <box_types>
    <box_type>Broadband</box_type>
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_WIFIAGENT_231</test_case_id>
    <test_objective>To check if the Interface Devices Wifi Harvester reports are properly generated when the reporting and polling intervals are configured.</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Broadband</test_setup>
    <pre_requisite>1.Ccsp Components  should be in a running state of DUT
2.TDK Agent should be in running state or invoke it through StartTdk.sh script
3. Connect a wifi client (can be to 2.4G or 5G radio)</pre_requisite>
    <api_or_interface_used>None</api_or_interface_used>
    <input_parameters>paramName: Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod
paramValue: 30/60
paramType: unsigned int
paramName: Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod
paramValue: 30/60
paramType: unsigned int
paramName: Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled
paramValue: true/false
paramType: boolean</input_parameters>
    <automation_approch>1. Load wifiagent and sysutil modules
2. Check if the Harvester process is running by fetching its PID.
3. Check if PARODUSlog.txt.0 is present under /rdklogs/logs.
4. Get the initial Harvester configuration parameters for Interface Devices WiFi Report and save them: Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod, Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod, Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled
5. To check the initial number of reports sent, check the number of log lines "event:raw.kestrel.reports.InterfaceDevicesWifi" in PARODUSlog.txt.0
6. Before setting new intervals, disable the report generation by setting Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to false and validate with get.
7. Set Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod and Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod to equal values (either both as 30 or 60 - chosen dynamically which is different from the initial value). Validate the SET with GET.
8. Enable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled by setting it to true. Validate SET with GET.
9. Now sleep for twice the polling (or reporting) interval set.
10. Get the final number of reports generated by checking the number of log lines "event:raw.kestrel.reports.InterfaceDevicesWifi" in PARODUSlog.txt.0.
11. Compute the difference between the final and initial number of log lines and the difference should be &gt;= 1.
12. Before reverting the intervals to initial values, disable the report generation by setting Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to false and validate with GET.
13. Revert the Reporting and Polling intervals to initial values. Validate the GET with SET.
14. Revert the report generation enable status to initial value if required.
15. Unload the modules.
</automation_approch>
    <expected_output>Interface Devices Wifi Harvester reports should be properly generated when the reporting and polling intervals are configured.</expected_output>
    <priority>High</priority>
    <test_stub_interface>wifiagent</test_stub_interface>
    <test_script>TS_WIFIAGENT_CheckInterfaceDevicesWifiReports_WithPollingEqualsReporting</test_script>
    <skipped>No</skipped>
    <release_version>M116</release_version>
    <remarks/>
  </test_cases>
  <script_tags/>
</xml>

'''
def getValues(obj, paramList):
    Values = [];
    status = 0;
    expectedresult = "SUCCESS";
    for param in paramList:
        tdkTestObj = obj.createTestStep("WIFIAgent_Get");
        tdkTestObj.addParameter("paramName",param)
        tdkTestObj.executeTestCase(expectedresult);
        actualresult = tdkTestObj.getResult();
        details = tdkTestObj.getResultDetails().strip().replace("\\n", "");

        if expectedresult in actualresult and details != "":
            val = details.split("VALUE:")[1].split(" ")[0].strip();
            Values.append(val);
            print("\n%s : %s" %(param, val));

            if val != "":
                #Set the result status of execution
                tdkTestObj.setResultStatus("SUCCESS");
                continue;
            else:
                #Set the result status of execution
                tdkTestObj.setResultStatus("FAILURE");
                status = 1;
                break;
        else :
            status = 1;
            #Set the result status of execution
            tdkTestObj.setResultStatus("FAILURE");
            print("%s : %s" %(param, details));
            break;

    return tdkTestObj, status, Values;

def setParameter(obj, param, setValue, type):
    expectedresult = "SUCCESS";
    status = 0;
    tdkTestObj = obj.createTestStep('WIFIAgent_Set_Get');
    tdkTestObj.addParameter("paramName",param);
    tdkTestObj.addParameter("paramValue",setValue);
    tdkTestObj.addParameter("paramType",type);
    #Execute the test case in DUT
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    details = tdkTestObj.getResultDetails();
    return actualresult, details;

# use tdklib library,which provides a wrapper for tdk testcase script
import tdklib;
from  time import sleep;
from tdkutility import *;

#Test component to be tested
obj = tdklib.TDKScriptingLibrary("wifiagent","RDKB");
sysObj = tdklib.TDKScriptingLibrary("sysutil","RDKB");

#IP and Port of box, No need to change,
#This will be replaced with corresponding DUT Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_WIFIAGENT_CheckInterfaceDevicesWifiReports_WithPollingEqualsReporting');
sysObj.configureTestCase(ip,port,'TS_WIFIAGENT_CheckInterfaceDevicesWifiReports_WithPollingEqualsReporting');

#Get the result of connection with test component and DUT
loadmodulestatus=obj.getLoadModuleResult();
sysutilloadmodulestatus=sysObj.getLoadModuleResult();
print("[LIB LOAD STATUS]  :  %s" %loadmodulestatus) ;
print("[LIB LOAD STATUS]  :  %s" %sysutilloadmodulestatus) ;

if "SUCCESS" in loadmodulestatus.upper() and "SUCCESS" in sysutilloadmodulestatus.upper():
    #Set the result status of execution
    obj.setLoadModuleStatus("SUCCESS");
    sysObj.setLoadModuleStatus("SUCCESS");
    expectedresult="SUCCESS";

    #Check if Harvester process is running in DUT or not
    step = 1;
    tdkTestObj = sysObj.createTestStep('ExecuteCmd');
    cmd = " pidof harvester";
    tdkTestObj.addParameter("command",cmd);
    expectedresult="SUCCESS";
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    details = tdkTestObj.getResultDetails().strip().replace("\\n", "");

    print("\nTEST STEP %d: Check if Harvester process is running in the device" %step);
    print("EXPECTED RESULT %d: Harvester process should be running in the device" %step);

    if expectedresult in actualresult and details.isdigit():
        tdkTestObj.setResultStatus("SUCCESS");
        print("ACTUAL RESULT %d: PID of Harvester : %s" %(step, details));
        #Get the result of execution
        print("[TEST EXECUTION RESULT] : SUCCESS");

        #Check whether the PARODUSlog.txt.0 file is present or not
        step = step + 1;
        tdkTestObj = sysObj.createTestStep('ExecuteCmd');
        cmd = "[ -f /rdklogs/logs/PARODUSlog.txt.0 ] && echo \"File exist\" || echo \"File does not exist\"";
        tdkTestObj.addParameter("command",cmd);
        expectedresult="SUCCESS";
        tdkTestObj.executeTestCase(expectedresult);
        actualresult = tdkTestObj.getResult();
        details = tdkTestObj.getResultDetails().strip().replace("\\n", "");

        print("\nTEST STEP %d: Check for PARODUSlog.txt.0 log file presence under /rdklogs/logs" %step);
        print("EXPECTED RESULT %d: PARODUSlog.txt.0 log file should be present under /rdklogs/logs" %step);

        if details == "File exist":
            tdkTestObj.setResultStatus("SUCCESS");
            print("ACTUAL RESULT %d: PARODUSlog.txt.0 log file is present" %step);
            #Get the result of execution
            print("[TEST EXECUTION RESULT] : SUCCESS");

            #Get the initial values of Polling Interval, Reporting Interval and Report Enable
            step = step + 1;
            paramList = ["Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod", "Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod", "Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled"];
            print("\nTEST STEP %d : Get the initial Harvester Configuration for the InterfaceDevicesWifi Report" %step);
            print("EXPECTED RESULT %d : The initial values should be retrieved successfully" %step);

            tdkTestObj, status, initial_values = getValues(obj, paramList);

            if status == 0:
                #Set the result status of execution
                tdkTestObj.setResultStatus("SUCCESS");
                print("ACTUAL RESULT %d : The values retrieved are respectively : %s, %s, %s" %(step, initial_values[0], initial_values[1], initial_values[2])) ;
                #Get the result of execution
                print("[TEST EXECUTION RESULT] : SUCCESS");

                print("\nGet the number of log lines \"event:raw.kestrel.reports.InterfaceDevicesWifi\" in /rdklogs/logs/PARODUSlog.txt.0");
                step = step + 1;
                tdkTestObj1 = sysObj.createTestStep('ExecuteCmd');
                log = "event:raw.kestrel.reports.InterfaceDevicesWifi";
                file = "/rdklogs/logs/PARODUSlog.txt.0"
                no_of_lines_initial = getLogFileTotalLinesCount(tdkTestObj1, file, log, step);
                print("The initial number of log lines \"event:raw.kestrel.reports.InterfaceDevicesWifi\" in PARODUSlog.txt.0 is : %d" %no_of_lines_initial);

                #Disable Report Enable before setting new values to Polling and Reporting Intervals
                proceed_flag = 0;
                report_disabled = 0;
                if initial_values[2] != "false":
                    step = step + 1;
                    print("\nTEST STEP %d: Disable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled before setting new Polling and Reporting Intervals" %(step));
                    print("EXPECTED RESULT %d: Should disable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled before setting new Polling and Reporting Intervals" %(step));

                    actualresult, details = setParameter(obj, paramList[2], "false", "boolean");

                    if expectedresult in actualresult and details != "":
                        proceed_flag = 1;
                        report_disabled = 1;
                        tdkTestObj.setResultStatus("SUCCESS");
                        print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports disabled; Details : %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : SUCCESS");
                    else:
                        tdkTestObj.setResultStatus("FAILURE");
                        print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports; Details : %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : FAILURE");
                else:
                    proceed_flag = 1;
                    print("Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled is already disabled");

                #Set to new Polling and Reporting Intervals
                if proceed_flag == 1:
                    #Checking Polling Interval and determining new value to be set
                    if initial_values[0] != "30":
                        new_reporting = 30;
                        new_polling = 30;
                    else:
                        new_reporting = 60;
                        new_polling = 60;

                    step = step + 1;
                    print("\nTEST STEP %d: Set Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod to %d" %(step, new_polling));
                    print("EXPECTED RESULT %d : Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod should be set to %d successfully" %(step, new_polling));

                    actualresult, details = setParameter(obj, paramList[0], str(new_polling), "unsignedint");

                    if expectedresult in actualresult:
                        tdkTestObj.setResultStatus("SUCCESS");
                        print("ACTUAL RESULT %d: Polling Period: %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : SUCCESS");

                        #Set to new reporting interval if required
                        proceed_flag = 0;
                        if int(initial_values[1]) != new_reporting:
                            step = step + 1;
                            print("\nTEST STEP %d: Set Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod to %d" %(step, new_reporting));
                            print("EXPECTED RESULT %d : Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod should be set to %d successfully" %(step, new_reporting));

                            actualresult, details = setParameter(obj, paramList[1], str(new_reporting), "unsignedint");

                            if expectedresult in actualresult:
                                proceed_flag = 1;
                                tdkTestObj.setResultStatus("SUCCESS");
                                print("ACTUAL RESULT %d: Reporting Period: %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : SUCCESS");
                            else:
                                tdkTestObj.setResultStatus("FAILURE");
                                print("ACTUAL RESULT %d: Reporting Period: %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : FAILURE");
                        else:
                            proceed_flag = 1;
                            print("Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod already has the value %d" %new_reporting);

                        #Start the Harvester Report generation
                        if proceed_flag == 1:
                            step = step + 1;
                            print("\nTEST STEP %d: Enable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to start report generation" %(step));
                            print("EXPECTED RESULT %d: Should enable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to start report generation" %(step));

                            actualresult, details = setParameter(obj, paramList[2], "true", "boolean");

                            if expectedresult in actualresult and details != "":
                                tdkTestObj.setResultStatus("SUCCESS");
                                print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports enabled; Details : %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : SUCCESS");

                                #Sleep for twice the reporting period duration
                                sleep_time = 2 * new_reporting;
                                print("Sleeping for twice the reporting period duration : %ds"%sleep_time);
                                sleep(sleep_time);

                                print("\nGet the final number of log lines \"event:raw.kestrel.reports.InterfaceDevicesWifi\" in /rdklogs/logs/PARODUSlog.txt.0");
                                step = step + 1;
                                no_of_lines_final = getLogFileTotalLinesCount(tdkTestObj1, file, log, step);
                                print("The final number of log lines \"event:raw.kestrel.reports.InterfaceDevicesWifi\" in PARODUSlog.txt.0 is : %d" %no_of_lines_final);

                                #Check if the difference between the final and initial number of reports should be >= 1
                                step = step + 1;
                                difference = no_of_lines_final - no_of_lines_initial;
                                print("\nInterfaceDevicesWifi reports should be generated according to the reporting and polling interval configuration");
                                print("TEST STEP %d: Number of InterfaceDevicesWifi reports generated should be >= 1" %step);
                                print("EXPECTED RESULT %d: The number of InterfaceDevicesWifi reports generated should be >= 1" %step);

                                if difference >= 1:
                                    tdkTestObj.setResultStatus("SUCCESS");
                                    print("ACTUAL RESULT %d: Number of InterfaceDevicesWifi reports generated : %d" %(step, difference));
                                    #Get the result of execution
                                    print("[TEST EXECUTION RESULT] : SUCCESS");
                                else:
                                    tdkTestObj.setResultStatus("FAILURE");
                                    print("ACTUAL RESULT %d: Number of InterfaceDevicesWifi reports generated : %d" %(step, difference));
                                    #Get the result of execution
                                    print("[TEST EXECUTION RESULT] : FAILURE");
                            else:
                                tdkTestObj.setResultStatus("FAILURE");
                                print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports; Details : %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : FAILURE");

                            #Revert operation
                            #Before reverting intervals set, disable the report generation
                            report_disabled = 0;
                            step = step + 1;
                            print("\nTEST STEP %d: Disable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled before reverting Intervals set" %(step));
                            print("EXPECTED RESULT %d: Should disable Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled before reverting Intervals set" %(step));

                            actualresult, details = setParameter(obj, paramList[2], "false", "boolean");

                            if expectedresult in actualresult and details != "":
                                report_disabled = 1;
                                tdkTestObj.setResultStatus("SUCCESS");
                                print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports disabled; Details : %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : SUCCESS");

                                #Revert reporting period to initial value if required
                                if int(initial_values[0]) != new_polling:
                                    step = step + 1;
                                    print("\nTEST STEP %d: Revert Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod to %s" %(step, initial_values[1]));
                                    print("EXPECTED RESULT %d : Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.ReportingPeriod should be reverted to %s successfully" %(step, initial_values[1]));

                                    actualresult, details = setParameter(obj, paramList[1], initial_values[1], "unsignedint");

                                    if expectedresult in actualresult:
                                        tdkTestObj.setResultStatus("SUCCESS");
                                        print("ACTUAL RESULT %d: Reporting Period: %s" %(step,details));
                                        #Get the result of execution
                                        print("[TEST EXECUTION RESULT] : SUCCESS");
                                    else:
                                        tdkTestObj.setResultStatus("FAILURE");
                                        print("ACTUAL RESULT %d: Reporting Period: %s" %(step,details));
                                        #Get the result of execution
                                        print("[TEST EXECUTION RESULT] : FAILURE");
                                else:
                                    print("Reverting Reporting Period not required");
                            else:
                                tdkTestObj.setResultStatus("FAILURE");
                                print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports; Details : %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : FAILURE");
                        else:
                            tdkTestObj.setResultStatus("FAILURE");
                            print("Unable to set the Reporting Period to new value, cannot proceed further...");

                        #Revert polling period after ensuring that report is disabled
                        if report_disabled == 1:
                            step = step + 1;
                            print("\nTEST STEP %d: Revert Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod to %s" %(step, initial_values[0]));
                            print("EXPECTED RESULT %d : Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.PollingPeriod should be reverted to %s successfully" %(step, initial_values[0]));

                            actualresult, details = setParameter(obj, paramList[0], initial_values[0], "unsignedint");

                            if expectedresult in actualresult:
                                tdkTestObj.setResultStatus("SUCCESS");
                                print("ACTUAL RESULT %d: Polling Period: %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : SUCCESS");
                            else:
                                tdkTestObj.setResultStatus("FAILURE");
                                print("ACTUAL RESULT %d: Polling Period: %s" %(step,details));
                                #Get the result of execution
                                print("[TEST EXECUTION RESULT] : FAILURE");
                        else:
                            tdkTestObj.setResultStatus("FAILURE");
                            print("Cannot revert polling period as reports are not disabled");
                    else:
                        tdkTestObj.setResultStatus("FAILURE");
                        print("ACTUAL RESULT %d: Polling Period: %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : FAILURE");
                else:
                    tdkTestObj.setResultStatus("FAILURE");
                    print("Unable to disable InterfaceDevicesWifi Reports, cannot proceed further...");

                #Revert the reports enable if required
                if initial_values[2] == "true":
                    step = step + 1;
                    print("\nTEST STEP %d: Revert Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to true" %(step));
                    print("EXPECTED RESULT %d: Should revert Device.X_RDKCENTRAL-COM_Report.InterfaceDevicesWifi.Enabled to true" %(step));

                    actualresult, details = setParameter(obj, paramList[2], "true", "boolean");

                    if expectedresult in actualresult and details != "":
                        tdkTestObj.setResultStatus("SUCCESS");
                        print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports reverted; Details : %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : SUCCESS");
                    else:
                        tdkTestObj.setResultStatus("FAILURE");
                        print("ACTUAL RESULT %d: InterfaceDevicesWifi Reports; Details : %s" %(step,details));
                        #Get the result of execution
                        print("[TEST EXECUTION RESULT] : FAILURE");
                else:
                    print("Report Enable state need not be reverted");
            else:
                #Set the result status of execution
                tdkTestObj.setResultStatus("FAILURE");
                print("ACTUAL RESULT %d : The initial report configuration values are not retrieved successfully" %step);
                #Get the result of execution
                print("[TEST EXECUTION RESULT] : FAILURE");
        else:
            tdkTestObj.setResultStatus("FAILURE");
            print("ACTUAL RESULT %d: PARODUSlog.txt.0 log file is NOT present" %step);
            #Get the result of execution
            print("[TEST EXECUTION RESULT] : FAILURE");
    else:
        tdkTestObj.setResultStatus("FAILURE");
        print("ACTUAL RESULT %d: Harvester not running in device" %(step));
        #Get the result of execution
        print("[TEST EXECUTION RESULT] : FAILURE");

    obj.unloadModule("wifiagent")
    sysObj.unloadModule("sysutil");
else:
    print("Failed to load module");
    obj.setLoadModuleStatus("FAILURE");
    sysObj.setLoadModuleStatus("FAILURE");
    print("Module loading failed");
