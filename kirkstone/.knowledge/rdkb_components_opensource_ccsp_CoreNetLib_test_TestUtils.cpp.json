{"is_source_file": true, "format": "C++", "description": "This file contains utility functions for testing components in the CoreNetLib of the Kirkstone project, including string manipulation, file system checks, network configuration commands execution, neighbor table management, and system interaction wrappers.", "external_files": ["TestUtils.hpp", "safec_lib_common.h"], "external_methods": ["access", "popen", "pclose", "sprintf_s", "ERR_CHK"], "published": ["msleep", "splitString", "findStringWithOccurrences", "fileExists", "listDirectoryFiles", "getNetMaskFromCIDRAddress", "getCIDRFromNetMask", "executeSystemCommand", "getVlanName", "createVlanSystemCommand", "deleteVlanSystemCommand", "createBridgeSystemCommand", "deleteBridgeSystemCommand", "createInterfaceSystemCommand", "deleteInterfaceSystemCommand", "getLinkStateSystemCommand", "linkStatusUpOrDownSystemCommand", "setInterfaceUpSystemCommand", "setInterfaceDownSystemCommand", "interfaceExistsSystemCommand", "interfaceGetMacSystemCommand", "getBridgeSTPStateSystemCommand", "setBridgeSTPStateSystemCommand", "interfaceSetMacSystemCommand", "interfaceGetIpSystemCommand", "interfaceGetNetmaskSystemCommand", "interfaceSetNetmaskSystemCommand", "interfaceGetMTUSystemCommand", "interfaceAddToBridgeSystemCommand", "interfaceRemoveFromBridgeSystemCommand", "addIpAddrSystemCommand", "deleteIpAddrSystemCommand", "addIpRouteSystemCommand", "addIpRouteSystemCommand", "removeIpRouteSystemCommand", "addIpRuleSystemCommand", "removeIpRuleSystemCommand", "addIpTunnelSystemCommand", "addIpTunnelSystemCommand", "deleteIpTunnelSystemCommand", "getNeighboursSystemCommand", "cleanupNeighboursList", "addNeighbourSystemCommand", "deleteNeighbourSystemCommand"], "classes": [{"name": "TestNeighbourInfo", "description": "Struct holding information about a neighbor in the network neighbor table, including local address, MAC address, and state."}], "methods": [{"name": "void msleep(long msec)", "description": "Sleeps for the specified number of milliseconds.", "scope": "", "scopeKind": ""}, {"name": "std::vector<std::string> splitString(const std::string & input,const char delim)", "description": "Splits a string into tokens based on a delimiter character.", "scope": "", "scopeKind": ""}, {"name": "bool findStringWithOccurrences(const std::string & haystack,const std::string & needle,int numOccurrences)", "description": "Checks if a substring occurs exactly a specified number of times within a larger string.", "scope": "", "scopeKind": ""}, {"name": "bool fileExists(const std::string & filePath)", "description": "Checks if a file exists at the given path.", "scope": "", "scopeKind": ""}, {"name": "std::vector<std::string> listDirectoryFiles(const std::string & path)", "description": "Lists files in a specified directory.", "scope": "", "scopeKind": ""}, {"name": "std::string getNetMaskFromCIDRAddress(const std::string & CIDRAddress)", "description": "Calculates the netmask string from a CIDR notation address.", "scope": "", "scopeKind": ""}, {"name": "int getCIDRFromNetMask(const std::string & netMask)", "description": "Calculates CIDR prefix length from a netmask string.", "scope": "", "scopeKind": ""}, {"name": "std::string executeSystemCommand(char * cmd,int * status)", "description": "Executes a system command and returns its output, handling different overloads.", "scope": "", "scopeKind": ""}, {"name": "std::string getVlanName(const std::string & interfaceName,const int vlanId)", "description": "Constructs a VLAN interface name from interface and VLAN ID.", "scope": "", "scopeKind": ""}, {"name": "bool createVlanSystemCommand(const std::string & interfaceName,const int vlanId)", "description": "Creates a VLAN device using system command.", "scope": "", "scopeKind": ""}, {"name": "bool deleteVlanSystemCommand(const std::string & vlanName)", "description": "Deletes a VLAN device using system command.", "scope": "", "scopeKind": ""}, {"name": "bool createBridgeSystemCommand(const std::string & bridgeName)", "description": "Creates a network bridge using system command.", "scope": "", "scopeKind": ""}, {"name": "bool deleteBridgeSystemCommand(const std::string & bridgeName)", "description": "Deletes a network bridge using system command.", "scope": "", "scopeKind": ""}, {"name": "bool createInterfaceSystemCommand(const std::string & interfaceName,const std::string & interfaceType)", "description": "Creates a network interface, optionally with an IP address.", "scope": "", "scopeKind": ""}, {"name": "bool deleteInterfaceSystemCommand(const std::string & interfaceName)", "description": "Deletes a network interface.", "scope": "", "scopeKind": ""}, {"name": "std::string getLinkStateSystemCommand(const std::string & interfaceName)", "description": "Retrieves the operational state of a network interface.", "scope": "", "scopeKind": ""}, {"name": "int linkStatusUpOrDownSystemCommand(const std::string & interfaceName)", "description": "Checks if a network interface is up or down.", "scope": "", "scopeKind": ""}, {"name": "bool setInterfaceUpSystemCommand(const std::string & interfaceName)", "description": "Brings a network interface up.", "scope": "", "scopeKind": ""}, {"name": "bool setInterfaceDownSystemCommand(const std::string & interfaceName)", "description": "Brings a network interface down.", "scope": "", "scopeKind": ""}, {"name": "bool interfaceExistsSystemCommand(const std::string & interfaceName)", "description": "Checks if a network interface exists.", "scope": "", "scopeKind": ""}, {"name": "std::string interfaceGetMacSystemCommand(const std::string & interfaceName)", "description": "Gets the MAC address of an interface.", "scope": "", "scopeKind": ""}, {"name": "int getBridgeSTPStateSystemCommand(const std::string & bridgeName)", "description": "Gets the Spanning Tree Protocol state of a bridge.", "scope": "", "scopeKind": ""}, {"name": "bool setBridgeSTPStateSystemCommand(const std::string & bridgeName,bool onOrOff)", "description": "Sets the STP state of a bridge.", "scope": "", "scopeKind": ""}, {"name": "bool interfaceSetMacSystemCommand(const std::string & interfaceName,const std::string & macAddress)", "description": "Sets the MAC address of an interface.", "scope": "", "scopeKind": ""}, {"name": "std::string interfaceGetIpSystemCommand(const std::string & interfaceName)", "description": "Gets the IP address assigned to an interface.", "scope": "", "scopeKind": ""}, {"name": "std::string interfaceGetNetmaskSystemCommand(const std::string & interfaceName)", "description": "Retrieves the netmask of an interface.", "scope": "", "scopeKind": ""}, {"name": "bool interfaceSetNetmaskSystemCommand(const std::string & interfaceName,const std::string & interfaceType,const std::string & netmask)", "description": "Sets the netmask of an interface.", "scope": "", "scopeKind": ""}, {"name": "int interfaceGetMTUSystemCommand(const std::string & interfaceName)", "description": "Retrieves the MTU size of an interface.", "scope": "", "scopeKind": ""}, {"name": "bool interfaceAddToBridgeSystemCommand(const std::string & interfaceName,const std::string & bridgeName)", "description": "Adds an interface to a bridge.", "scope": "", "scopeKind": ""}, {"name": "bool interfaceRemoveFromBridgeSystemCommand(const std::string & interfaceName,const std::string & bridgeName)", "description": "Removes an interface from a bridge.", "scope": "", "scopeKind": ""}, {"name": "bool addIpAddrSystemCommand(const std::string & ipAddr,int cidr,const std::string & deviceName)", "description": "Adds an IP address to a device.", "scope": "", "scopeKind": ""}, {"name": "bool deleteIpAddrSystemCommand(const std::string & ipAddr,int cidr,const std::string & deviceName)", "description": "Removes an IP address from a device.", "scope": "", "scopeKind": ""}, {"name": "bool addIpRouteSystemCommand(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName)", "description": "Adds a route to the routing table.", "scope": "", "scopeKind": ""}, {"name": "bool removeIpRouteSystemCommand(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName)", "description": "Removes a route from the routing table.", "scope": "", "scopeKind": ""}, {"name": "bool addIpRuleSystemCommand(const std::string & fromPrefix,const std::string & toPrefix,const std::string & tableName)", "description": "Adds a policy routing rule.", "scope": "", "scopeKind": ""}, {"name": "bool removeIpRuleSystemCommand(const std::string & fromPrefix,const std::string & toPrefix,const std::string & tableName)", "description": "Removes a policy routing rule.", "scope": "", "scopeKind": ""}, {"name": "bool addIpTunnelSystemCommand(const std::string & tunnelName,const std::string & tunnelMode,const std::string & deviceName,const std::string & localV6Addr,const std::string & remoteV6Addr,const int encapLimit)", "description": "Creates an IP tunnel.", "scope": "", "scopeKind": ""}, {"name": "bool deleteIpTunnelSystemCommand(const std::string & tunnelName)", "description": "Deletes an IP tunnel.", "scope": "", "scopeKind": ""}, {"name": "bool getNeighboursSystemCommand(std::vector<TestNeighbourInfo * > & neighbours)", "description": "Retrieves neighbour table entries.", "scope": "", "scopeKind": ""}, {"name": "void cleanupNeighboursList(std::vector<TestNeighbourInfo * > & neighbours)", "description": "Frees memory allocated for neighbour list.", "scope": "", "scopeKind": ""}, {"name": "bool addNeighbourSystemCommand(const std::string & address,const std::string & deviceName)", "description": "Adds a neighbour entry.", "scope": "", "scopeKind": ""}, {"name": "bool deleteNeighbourSystemCommand(const std::string & address,const std::string & deviceName)", "description": "Deletes a neighbour entry.", "scope": "", "scopeKind": ""}, {"name": "bool addIpRouteSystemCommand(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName,const int metric)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool addIpTunnelSystemCommand(const std::string & tunnelName,const std::string & tunnelMode,const std::string & localV6Addr,const std::string & remoteV6Addr,const int encapLimit)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool addNeighbourSystemCommand(const std::string & address,const std::string & llAddr,const std::string & deviceName)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool createInterfaceSystemCommand(const std::string & interfaceName,const std::string & interfaceType,const std::string & ipAddress)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool deleteNeighbourSystemCommand(const std::string & address,const std::string & llAddr,const std::string & deviceName)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "std::string executeSystemCommand(const std::string & cmd,const std::string & logFile,int * status)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "std::string executeSystemCommand(const std::string & cmd,int * status)", "scope": "", "scopeKind": "", "description": "unavailable"}], "search-terms": ["TestUtils", "network", "system command", "VLAN", "bridge", "interface", "IP address", "policy routing", "tunnel", "neighbor", "iptables", "netmask", "CIDR", "net mask", "MTU", "STP", "VLAN name", "system interaction", "Linux networking"], "state": 2, "file_id": 5840, "knowledge_revision": 26106, "git_revision": "", "ctags": [{"_type": "tag", "name": "addIpAddrSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpAddrSystemCommand(const std::string& ipAddr,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & ipAddr,int cidr,const std::string & deviceName)"}, {"_type": "tag", "name": "addIpRouteSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpRouteSystemCommand(const std::string& dstPrefix,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName)"}, {"_type": "tag", "name": "addIpRouteSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpRouteSystemCommand(const std::string& dstPrefix,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName,const int metric)"}, {"_type": "tag", "name": "addIpRuleSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpRuleSystemCommand(const std::string& fromPrefix,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & fromPrefix,const std::string & toPrefix,const std::string & tableName)"}, {"_type": "tag", "name": "addIpTunnelSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpTunnelSystemCommand(const std::string& tunnelName,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & tunnelName,const std::string & tunnelMode,const std::string & deviceName,const std::string & localV6Addr,const std::string & remoteV6Addr,const int encapLimit)"}, {"_type": "tag", "name": "addIpTunnelSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addIpTunnelSystemCommand(const std::string& tunnelName,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & tunnelName,const std::string & tunnelMode,const std::string & localV6Addr,const std::string & remoteV6Addr,const int encapLimit)"}, {"_type": "tag", "name": "addNeighbourSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addNeighbourSystemCommand(const std::string& address,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & address,const std::string & deviceName)"}, {"_type": "tag", "name": "addNeighbourSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool addNeighbourSystemCommand(const std::string& address,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & address,const std::string & llAddr,const std::string & deviceName)"}, {"_type": "tag", "name": "cleanupNeighboursList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^void cleanupNeighboursList(std::vector<TestNeighbourInfo *>& neighbours)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(std::vector<TestNeighbourInfo * > & neighbours)"}, {"_type": "tag", "name": "createBridgeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool createBridgeSystemCommand(const std::string& bridgeName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & bridgeName)"}, {"_type": "tag", "name": "createInterfaceSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool createInterfaceSystemCommand(const std::string& interfaceName, const std::string& interface/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & interfaceType)"}, {"_type": "tag", "name": "createInterfaceSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool createInterfaceSystemCommand(const std::string& interfaceName, const std::string& interface/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & interfaceType,const std::string & ipAddress)"}, {"_type": "tag", "name": "createVlanSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool createVlanSystemCommand(const std::string& interfaceName, const int vlanId)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const int vlanId)"}, {"_type": "tag", "name": "deleteBridgeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteBridgeSystemCommand(const std::string& bridgeName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & bridgeName)"}, {"_type": "tag", "name": "deleteInterfaceSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteInterfaceSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "deleteIpAddrSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteIpAddrSystemCommand(const std::string& ipAddr,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & ipAddr,int cidr,const std::string & deviceName)"}, {"_type": "tag", "name": "deleteIpTunnelSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteIpTunnelSystemCommand(const std::string& tunnelName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & tunnelName)"}, {"_type": "tag", "name": "deleteNeighbourSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteNeighbourSystemCommand(const std::string& address,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & address,const std::string & deviceName)"}, {"_type": "tag", "name": "deleteNeighbourSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteNeighbourSystemCommand(const std::string& address,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & address,const std::string & llAddr,const std::string & deviceName)"}, {"_type": "tag", "name": "deleteVlanSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool deleteVlanSystemCommand(const std::string& vlanName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & vlanName)"}, {"_type": "tag", "name": "executeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string executeSystemCommand(char *cmd, int *status)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(char * cmd,int * status)"}, {"_type": "tag", "name": "executeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string executeSystemCommand(const std::string& cmd, const std::string& logFile, int *status/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & cmd,const std::string & logFile,int * status)"}, {"_type": "tag", "name": "executeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string executeSystemCommand(const std::string& cmd, int *status)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & cmd,int * status)"}, {"_type": "tag", "name": "fileExists", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool fileExists(const std::string& filePath)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & filePath)"}, {"_type": "tag", "name": "findStringWithOccurrences", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool findStringWithOccurrences(const std::string& haystack, const std::string& needle, int numOc/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & haystack,const std::string & needle,int numOccurrences)"}, {"_type": "tag", "name": "getBridgeSTPStateSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^int getBridgeSTPStateSystemCommand(const std::string& bridgeName)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(const std::string & bridgeName)"}, {"_type": "tag", "name": "getCIDRFromNetMask", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^int getCIDRFromNetMask(const std::string& netMask)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(const std::string & netMask)"}, {"_type": "tag", "name": "getLinkStateSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string getLinkStateSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "getNeighboursSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool getNeighboursSystemCommand(std::vector<TestNeighbourInfo *>& neighbours)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(std::vector<TestNeighbourInfo * > & neighbours)"}, {"_type": "tag", "name": "getNetMaskFromCIDRAddress", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string getNetMaskFromCIDRAddress(const std::string& CIDRAddress)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & CIDRAddress)"}, {"_type": "tag", "name": "getVlanName", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string getVlanName(const std::string& interfaceName, const int vlanId)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & interfaceName,const int vlanId)"}, {"_type": "tag", "name": "interfaceAddToBridgeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool interfaceAddToBridgeSystemCommand(const std::string& interfaceName, const std::string& brid/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & bridgeName)"}, {"_type": "tag", "name": "interfaceExistsSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool interfaceExistsSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "interfaceGetIpSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string interfaceGetIpSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "interfaceGetMTUSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^int interfaceGetMTUSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "interfaceGetMacSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string interfaceGetMacSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "interfaceGetNetmaskSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::string interfaceGetNetmaskSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "interfaceRemoveFromBridgeSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool interfaceRemoveFromBridgeSystemCommand(const std::string& interfaceName, const std::string&/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & bridgeName)"}, {"_type": "tag", "name": "interfaceSetMacSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool interfaceSetMacSystemCommand(const std::string& interfaceName, const std::string& macAddres/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & macAddress)"}, {"_type": "tag", "name": "interfaceSetNetmaskSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool interfaceSetNetmaskSystemCommand(const std::string& interfaceName, const std::string& inter/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName,const std::string & interfaceType,const std::string & netmask)"}, {"_type": "tag", "name": "linkStatusUpOrDownSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^int linkStatusUpOrDownSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "listDirectoryFiles", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::vector<std::string> listDirectoryFiles(const std::string& path)$/", "language": "C++", "typeref": "typename:std::vector<std::string>", "kind": "function", "signature": "(const std::string & path)"}, {"_type": "tag", "name": "msleep", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^void msleep(long msec)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(long msec)"}, {"_type": "tag", "name": "removeIpRouteSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool removeIpRouteSystemCommand(const std::string& dstPrefix,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & dstPrefix,const std::string & nextHopAddr,const std::string & deviceName)"}, {"_type": "tag", "name": "removeIpRuleSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool removeIpRuleSystemCommand(const std::string& fromPrefix,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & fromPrefix,const std::string & toPrefix,const std::string & tableName)"}, {"_type": "tag", "name": "setBridgeSTPStateSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool setBridgeSTPStateSystemCommand(const std::string& bridgeName, bool onOrOff)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & bridgeName,bool onOrOff)"}, {"_type": "tag", "name": "setInterfaceDownSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool setInterfaceDownSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "setInterfaceUpSystemCommand", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^bool setInterfaceUpSystemCommand(const std::string& interfaceName)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & interfaceName)"}, {"_type": "tag", "name": "splitString", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "pattern": "/^std::vector<std::string> splitString(const std::string& input, const char delim)$/", "language": "C++", "typeref": "typename:std::vector<std::string>", "kind": "function", "signature": "(const std::string & input,const char delim)"}], "hash": "6ee6956255df04f8e3a84f22f6ffb7f8", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/CoreNetLib/test/TestUtils.cpp", "revision_history": [{"26106": ""}]}