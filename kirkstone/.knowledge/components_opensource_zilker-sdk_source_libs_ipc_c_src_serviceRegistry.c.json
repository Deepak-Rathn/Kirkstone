{"is_source_file": true, "format": "C", "description": "Source code implementing a service registry for IPC services, including functions for registering services, retrieving service information by ports, and managing the registry's internal linked list with thread safety. It handles service handles and their addresses, and is closely tied to IPC mechanisms specific to this project.", "external_files": ["<string.h>", "<stdlib.h>", "<pthread.h>", "<icTypes/icLinkedList.h>", "serviceRegistry.h"], "external_methods": ["linkedListCreate", "linkedListFind", "linkedListAppend"], "published": ["createServiceHandle", "destroyServiceHandle", "registerService", "getServiceForIpcPort", "getServiceForEventPort", "getServiceAddressForIpcPort", "getServiceAddressForEventPort"], "classes": [], "methods": [{"name": "serviceHandle * createServiceHandle()", "description": "Creates and initializes a new serviceHandle structure, setting its address to LOCAL_LOOPBACK.", "scope": "", "scopeKind": ""}, {"name": "void destroyServiceHandle(serviceHandle * handle)", "description": "Frees memory allocated for a serviceHandle, if it exists.", "scope": "", "scopeKind": ""}, {"name": "void registerService(serviceHandle * handle)", "description": "Registers a new service handle into the registry, initializing the registry if needed, protected by a mutex.", "scope": "", "scopeKind": ""}, {"name": "serviceHandle * getServiceForIpcPort(uint16_t ipcPort)", "description": "Retrieves the serviceHandle associated with a given IPC port, returning NULL if none found.", "scope": "", "scopeKind": ""}, {"name": "serviceHandle * getServiceForEventPort(uint16_t eventPort)", "description": "Retrieves the serviceHandle associated with a given event port, returning NULL if none found.", "scope": "", "scopeKind": ""}, {"name": "const char * getServiceAddressForIpcPort(uint16_t ipcPort)", "description": "Returns the address of the service registered for a specific IPC port, or LOCAL_LOOPBACK if none found.", "scope": "", "scopeKind": ""}, {"name": "const char * getServiceAddressForEventPort(uint16_t eventPort)", "description": "Returns the address of the service registered for a specific event port, or LOCAL_LOOPBACK if none found.", "scope": "", "scopeKind": ""}, {"name": "void initRegistry()", "description": "Initializes the registry linked list if it hasn't been created yet.", "scope": "", "scopeKind": ""}, {"name": "bool searchByIpcPort(void * searchVal,void * item)", "description": "Predicate function to find a serviceHandle in the list by IPC port.", "scope": "", "scopeKind": ""}, {"name": "bool searchByEventPort(void * searchVal,void * item)", "description": "Predicate function to find a serviceHandle in the list by event port.", "scope": "", "scopeKind": ""}], "calls": ["linkedListCreate", "linkedListFind", "linkedListAppend", "strcpy", "memset", "malloc", "free"], "search-terms": ["service registry", "IPC service", "serviceHandle", "port lookup", "thread safety", "linked list"], "state": 2, "file_id": 731, "knowledge_revision": 13894, "git_revision": "", "ctags": [{"_type": "tag", "name": "REG_MTX", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^static pthread_mutex_t REG_MTX = PTHREAD_MUTEX_INITIALIZER;$/", "file": true, "language": "C", "typeref": "typename:pthread_mutex_t", "kind": "variable"}, {"_type": "tag", "name": "createServiceHandle", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^serviceHandle *createServiceHandle()$/", "language": "C", "typeref": "typename:serviceHandle *", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "destroyServiceHandle", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^void destroyServiceHandle(serviceHandle *handle)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(serviceHandle * handle)"}, {"_type": "tag", "name": "getServiceAddressForEventPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^const char *getServiceAddressForEventPort(uint16_t eventPort)$/", "language": "C", "typeref": "typename:const char *", "kind": "function", "signature": "(uint16_t eventPort)"}, {"_type": "tag", "name": "getServiceAddressForIpcPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^const char *getServiceAddressForIpcPort(uint16_t ipcPort)$/", "language": "C", "typeref": "typename:const char *", "kind": "function", "signature": "(uint16_t ipcPort)"}, {"_type": "tag", "name": "getServiceForEventPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^serviceHandle *getServiceForEventPort(uint16_t eventPort)$/", "language": "C", "typeref": "typename:serviceHandle *", "kind": "function", "signature": "(uint16_t eventPort)"}, {"_type": "tag", "name": "getServiceForIpcPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^serviceHandle *getServiceForIpcPort(uint16_t ipcPort)$/", "language": "C", "typeref": "typename:serviceHandle *", "kind": "function", "signature": "(uint16_t ipcPort)"}, {"_type": "tag", "name": "initRegistry", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^static void initRegistry()$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "registerService", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^void registerService(serviceHandle *handle)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(serviceHandle * handle)"}, {"_type": "tag", "name": "registry", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^static icLinkedList *registry = NULL;       \\/\\/ TODO: move to use Hash if applicable$/", "file": true, "language": "C", "typeref": "typename:icLinkedList *", "kind": "variable"}, {"_type": "tag", "name": "searchByEventPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^bool searchByEventPort(void *searchVal, void *item)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(void * searchVal,void * item)"}, {"_type": "tag", "name": "searchByIpcPort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "pattern": "/^bool searchByIpcPort(void *searchVal, void *item)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(void * searchVal,void * item)"}], "hash": "b67028718738855787f9f8e7919c4175", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/ipc/c/src/serviceRegistry.c", "fields": [{"name": "pthread_mutex_t REG_MTX", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "icLinkedList * registry", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"13894": ""}]}