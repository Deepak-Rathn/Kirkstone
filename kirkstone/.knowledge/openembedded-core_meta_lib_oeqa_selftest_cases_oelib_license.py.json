{"is_source_file": true, "format": "Python", "description": "This source file contains unit test cases for the oe.license module, testing license parsing and combination logic, including license visitor pattern, license list parsing, and complex license expressions.", "external_files": ["unittest.case", "oe.license"], "external_methods": ["oe.license.LicenseVisitor", "oe.license.InvalidLicense", "oe.license.flattened_licenses", "oe.license.is_included"], "published": [], "classes": [{"name": "SeenVisitor", "description": "A class extending oe.license.LicenseVisitor to collect license strings from license nodes in the AST."}, {"name": "TestSingleLicense", "description": "Test case class for validating individual license parsing and invalid license detection."}, {"name": "TestSimpleCombinations", "description": "Test case class verifying license list extraction from combined license expressions and preference-based selection."}, {"name": "TestComplexCombinations", "description": "Inherits from TestSimpleCombinations, adding more complex license expression tests."}, {"name": "TestIsIncluded", "description": "Test case class for checking whether specific licenses or license groups are included based on license expressions."}], "methods": [{"name": "visit_Str(self, node)", "description": "Method of SeenVisitor that appends the string value of a string node to the seen list.", "scope": "SeenVisitor", "scopeKind": "class"}, {"name": "parse(licensestr)", "description": "Static method to parse a license string into a list of license identifiers using the visitor pattern.", "scope": "TestSingleLicense", "scopeKind": "class"}, {"name": "test_single_licenses(self)", "description": "Test method verifying that individual licenses are parsed correctly.", "scope": "TestSingleLicense", "scopeKind": "class"}, {"name": "test_invalid_licenses(self)", "description": "Test method verifying that invalid licenses raise the appropriate exception.", "scope": "TestSingleLicense", "scopeKind": "class"}, {"name": "test_tests(self)", "description": "Test method for various license expressions and their expected parsed license lists.", "scope": "TestSimpleCombinations", "scopeKind": "class"}, {"name": "test_tests", "description": "Test method for complex license expressions with nested parentheses and logical operators."}, {"name": "test_tests", "description": "Inherits tests from previous, with additional complex license expression tests."}, {"name": "test_tests", "description": "Verifies license inclusion logic with various combinations of license names and wildcards."}, {"name": "__init__(self)", "scope": "SeenVisitor", "scopeKind": "class", "description": "unavailable"}, {"name": "choose(a, b)", "scope": "TestSimpleCombinations.test_tests", "scopeKind": "member", "description": "unavailable"}], "calls": ["oe.license.LicenseVisitor.__init__", "oe.license.LicenseVisitor.visit_string", "self.assertListEqual", "self.assertRaises", "self.assertEqual", "oe.license.flattened_licenses", "oe.license.is_included"], "search-terms": ["unit test", "license parsing", "license visitor", "license expressions", "complex license expressions", "license inclusion logic", "license validation", "TestCase"], "state": 2, "file_id": 1916, "knowledge_revision": 15059, "git_revision": "", "ctags": [{"_type": "tag", "name": "SeenVisitor", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^class SeenVisitor(oe.license.LicenseVisitor):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestComplexCombinations", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^class TestComplexCombinations(TestSimpleCombinations):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestIsIncluded", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^class TestIsIncluded(TestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestSimpleCombinations", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^class TestSimpleCombinations(TestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestSingleLicense", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^class TestSingleLicense(TestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "SeenVisitor", "scopeKind": "class"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^        def choose(a, b):$/", "file": true, "language": "Python", "kind": "function", "signature": "(a, b)", "scope": "TestSimpleCombinations.test_tests", "scopeKind": "member"}, {"_type": "tag", "name": "invalid_licenses", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    invalid_licenses = [\"GPL\\/BSD\"]$/", "language": "Python", "kind": "variable", "scope": "TestSingleLicense", "scopeKind": "class"}, {"_type": "tag", "name": "licenses", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    licenses = [$/", "language": "Python", "kind": "variable", "scope": "TestSingleLicense", "scopeKind": "class"}, {"_type": "tag", "name": "parse", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def parse(licensestr):$/", "language": "Python", "kind": "member", "signature": "(licensestr)", "scope": "TestSingleLicense", "scopeKind": "class"}, {"_type": "tag", "name": "preferred", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    preferred = [\"ALPHA\", \"FOO\", \"BAR\"]$/", "language": "Python", "kind": "variable", "scope": "TestSimpleCombinations", "scopeKind": "class"}, {"_type": "tag", "name": "preferred", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    preferred = [\"BAR\", \"OMEGA\", \"BETA\", \"GPL-2.0-only\"]$/", "language": "Python", "kind": "variable", "scope": "TestComplexCombinations", "scopeKind": "class"}, {"_type": "tag", "name": "test_invalid_licenses", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def test_invalid_licenses(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestSingleLicense", "scopeKind": "class"}, {"_type": "tag", "name": "test_single_licenses", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def test_single_licenses(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestSingleLicense", "scopeKind": "class"}, {"_type": "tag", "name": "test_tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def test_tests(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestIsIncluded", "scopeKind": "class"}, {"_type": "tag", "name": "test_tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def test_tests(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestSimpleCombinations", "scopeKind": "class"}, {"_type": "tag", "name": "tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    tests = {$/", "language": "Python", "kind": "variable", "scope": "TestComplexCombinations", "scopeKind": "class"}, {"_type": "tag", "name": "tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    tests = {$/", "language": "Python", "kind": "variable", "scope": "TestIsIncluded", "scopeKind": "class"}, {"_type": "tag", "name": "tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    tests = {$/", "language": "Python", "kind": "variable", "scope": "TestSimpleCombinations", "scopeKind": "class"}, {"_type": "tag", "name": "visit_Str", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "pattern": "/^    def visit_Str(self, node):$/", "language": "Python", "kind": "member", "signature": "(self, node)", "scope": "SeenVisitor", "scopeKind": "class"}], "hash": "7a877f67f39d4eb9afc6110c778eb488", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/meta/lib/oeqa/selftest/cases/oelib/license.py", "fields": [{"name": "invalid_licenses = [\"GPL\\/BSD\"]", "scope": "TestSingleLicense", "scopeKind": "class", "description": "unavailable"}, {"name": "licenses = [", "scope": "TestSingleLicense", "scopeKind": "class", "description": "unavailable"}, {"name": "preferred = [\"ALPHA\", \"FOO\", \"BAR\"]", "scope": "TestSimpleCombinations", "scopeKind": "class", "description": "unavailable"}, {"name": "preferred = [\"BAR\", \"OMEGA\", \"BETA\", \"GPL-2.0-only\"]", "scope": "TestComplexCombinations", "scopeKind": "class", "description": "unavailable"}, {"name": "tests = {", "scope": "TestComplexCombinations", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"15059": ""}]}