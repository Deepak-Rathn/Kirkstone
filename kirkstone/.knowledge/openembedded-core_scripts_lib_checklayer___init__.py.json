{"is_source_file": true, "format": "Python", "description": "This Python script provides utility functions and classes for checking, parsing, and managing layers in the Yocto Project build system, including detection of layer types, configuration extraction, dependency resolution, and signature management.", "external_files": ["bb.tinfoil", "bb.parse", "bb.data", "bb.utils"], "external_methods": ["bb.parse.init()", "bb.parse.handle()", "bb.data.init()", "bb.utils.explode_dep_versions2()", "bb.fatal()", "bb.tinfoil.Tinfoil()"], "published": ["LayerType"], "classes": [{"name": "LayerType", "description": "Enumeration representing different types of Yocto layers: BSP, Distrow, Software, and error states for missing or invalid configuration."}], "methods": [{"name": "_get_configurations(path)", "description": "Returns a list of configuration filenames (without extension) in a given directory.", "scope": "", "scopeKind": ""}, {"name": "_get_layer_collections(layer_path, lconf=None, data=None)", "description": "Parses layer.conf and related data to extract layer collections, including priority, pattern, dependencies, and compatibility.", "scope": "", "scopeKind": ""}, {"name": "_detect_layer(layer_path)", "description": "Analyzes a directory to identify if it contains a Yocto layer and determines its type (BSP, distro, software, or error).", "scope": "", "scopeKind": ""}, {"name": "detect_layers(layer_directories, no_auto)", "description": "Detects multiple layers within specified directories, optionally skipping auto-detection.", "scope": "", "scopeKind": ""}, {"name": "sanity_check_layers(layers, logger)", "description": "Checks for duplicate collection names with different patterns across detected layers to ensure consistency.", "scope": "", "scopeKind": ""}, {"name": "get_layer_dependencies(layer, layers, logger)", "description": "Recursively determines dependencies of a given layer based on its collections and other layers available.", "scope": "", "scopeKind": ""}, {"name": "add_layer_dependencies(bblayersconf, layer, layers, logger)", "description": "Adds dependencies of a specified layer to a bblayers configuration file.", "scope": "", "scopeKind": ""}, {"name": "add_layers(bblayersconf, layers, logger)", "description": "Appends specified layers to the bblayers configuration, avoiding duplicates.", "scope": "", "scopeKind": ""}, {"name": "check_bblayers(bblayersconf, layer_path, logger)", "description": "Checks if a layer is already included in a bblayers configuration file.", "scope": "", "scopeKind": ""}, {"name": "check_command(error_msg, cmd, cwd=None)", "description": "Executes a shell command, captures output, and throws an error on non-zero return codes.", "scope": "", "scopeKind": ""}, {"name": "get_signatures(builddir, failsafe=False, machine=None, extravars=None)", "description": "Computes and returns signatures for build recipes, useful for detecting changes.", "scope": "", "scopeKind": ""}, {"name": "get_depgraph(targets=['world'], failsafe=False)", "description": "Retrieves the dependency graph for specified build targets.", "scope": "", "scopeKind": ""}, {"name": "compare_signatures(old_sigs, curr_sigs)", "description": "Compares previous and current recipe signatures to identify changes and dependencies.", "scope": "", "scopeKind": ""}, {"name": "_find_layer(depend, layers)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "graph2sig(task)", "scope": "compare_signatures", "scopeKind": "function", "description": "unavailable"}, {"name": "recurse_dependencies(depends, layer, layers, logger, ret = [])", "scope": "get_layer_dependencies", "scopeKind": "function", "description": "unavailable"}, {"name": "sig2graph(task)", "scope": "compare_signatures", "scopeKind": "function", "description": "unavailable"}], "calls": ["os.listdir", "os.path.join", "os.path.isfile", "os.path.isdir", "os.path.basename", "re.findall", "subprocess.Popen", "subprocess.communicate", "bb.parse.handle", "bb.parse.init", "bb.data.init", "bb.utils.explode_dep_versions2", "bb.fatal", "bb.tinfoil.Tinfoil", "bb.event.NoProvider", "bb.event.DepTreeGenerated", "bb.command.CommandFailed", "bb.command.CommandCompleted"], "search-terms": ["LayerType", "detect_layers", "get_layer_dependencies", "add_layer_dependencies", "layer.conf", "BBFILE_COLLECTIONS", "bb.tinfoil", "bb.parse", "bb.data"], "state": 2, "file_id": 1425, "knowledge_revision": 14581, "git_revision": "", "ctags": [{"_type": "tag", "name": "BSP", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    BSP = 0$/", "language": "Python", "kind": "variable", "scope": "LayerType", "scopeKind": "class"}, {"_type": "tag", "name": "DISTRO", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    DISTRO = 1$/", "language": "Python", "kind": "variable", "scope": "LayerType", "scopeKind": "class"}, {"_type": "tag", "name": "ERROR_BSP_DISTRO", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    ERROR_BSP_DISTRO = 99$/", "language": "Python", "kind": "variable", "scope": "LayerType", "scopeKind": "class"}, {"_type": "tag", "name": "ERROR_NO_LAYER_CONF", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    ERROR_NO_LAYER_CONF = 98$/", "language": "Python", "kind": "variable", "scope": "LayerType", "scopeKind": "class"}, {"_type": "tag", "name": "LayerType", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^class LayerType(Enum):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SOFTWARE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    SOFTWARE = 2$/", "language": "Python", "kind": "variable", "scope": "LayerType", "scopeKind": "class"}, {"_type": "tag", "name": "_detect_layer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def _detect_layer(layer_path):$/", "language": "Python", "kind": "function", "signature": "(layer_path)"}, {"_type": "tag", "name": "_find_layer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def _find_layer(depend, layers):$/", "language": "Python", "kind": "function", "signature": "(depend, layers)"}, {"_type": "tag", "name": "_get_configurations", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def _get_configurations(path):$/", "language": "Python", "kind": "function", "signature": "(path)"}, {"_type": "tag", "name": "_get_layer_collections", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def _get_layer_collections(layer_path, lconf=None, data=None):$/", "language": "Python", "kind": "function", "signature": "(layer_path, lconf=None, data=None)"}, {"_type": "tag", "name": "add_layer_dependencies", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def add_layer_dependencies(bblayersconf, layer, layers, logger):$/", "language": "Python", "kind": "function", "signature": "(bblayersconf, layer, layers, logger)"}, {"_type": "tag", "name": "add_layers", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def add_layers(bblayersconf, layers, logger):$/", "language": "Python", "kind": "function", "signature": "(bblayersconf, layers, logger)"}, {"_type": "tag", "name": "check_bblayers", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def check_bblayers(bblayersconf, layer_path, logger):$/", "language": "Python", "kind": "function", "signature": "(bblayersconf, layer_path, logger)"}, {"_type": "tag", "name": "check_command", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def check_command(error_msg, cmd, cwd=None):$/", "language": "Python", "kind": "function", "signature": "(error_msg, cmd, cwd=None)"}, {"_type": "tag", "name": "compare_signatures", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def compare_signatures(old_sigs, curr_sigs):$/", "language": "Python", "kind": "function", "signature": "(old_sigs, curr_sigs)"}, {"_type": "tag", "name": "detect_layers", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def detect_layers(layer_directories, no_auto):$/", "language": "Python", "kind": "function", "signature": "(layer_directories, no_auto)"}, {"_type": "tag", "name": "get_depgraph", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def get_depgraph(targets=['world'], failsafe=False):$/", "language": "Python", "kind": "function", "signature": "(targets=['world'], failsafe=False)"}, {"_type": "tag", "name": "get_layer_dependencies", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def get_layer_dependencies(layer, layers, logger):$/", "language": "Python", "kind": "function", "signature": "(layer, layers, logger)"}, {"_type": "tag", "name": "get_signatures", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def get_signatures(builddir, failsafe=False, machine=None, extravars=None):$/", "language": "Python", "kind": "function", "signature": "(builddir, failsafe=False, machine=None, extravars=None)"}, {"_type": "tag", "name": "graph2sig", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    def graph2sig(task):$/", "file": true, "language": "Python", "kind": "function", "signature": "(task)", "scope": "compare_signatures", "scopeKind": "function"}, {"_type": "tag", "name": "recurse_dependencies", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    def recurse_dependencies(depends, layer, layers, logger, ret = []):$/", "file": true, "language": "Python", "kind": "function", "signature": "(depends, layer, layers, logger, ret = [])", "scope": "get_layer_dependencies", "scopeKind": "function"}, {"_type": "tag", "name": "sanity_check_layers", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^def sanity_check_layers(layers, logger):$/", "language": "Python", "kind": "function", "signature": "(layers, logger)"}, {"_type": "tag", "name": "sig2graph", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/checklayer/__init__.py", "pattern": "/^    def sig2graph(task):$/", "file": true, "language": "Python", "kind": "function", "signature": "(task)", "scope": "compare_signatures", "scopeKind": "function"}], "hash": "a876e10e72d510462a56ae739095b11f", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/scripts/lib/checklayer/__init__.py", "fields": [{"name": "BSP = 0", "scope": "LayerType", "scopeKind": "class", "description": "unavailable"}, {"name": "DISTRO = 1", "scope": "LayerType", "scopeKind": "class", "description": "unavailable"}, {"name": "ERROR_BSP_DISTRO = 99", "scope": "LayerType", "scopeKind": "class", "description": "unavailable"}, {"name": "ERROR_NO_LAYER_CONF = 98", "scope": "LayerType", "scopeKind": "class", "description": "unavailable"}, {"name": "SOFTWARE = 2", "scope": "LayerType", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"14581": ""}]}