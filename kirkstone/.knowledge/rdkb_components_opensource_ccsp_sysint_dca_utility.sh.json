{"is_source_file": true, "format": "shell script / sh", "description": "This file is a shell script for a utility related to telemetry data collection, configuration, and management within a firmware or embedded system. It performs tasks such as configuration parsing, cron scheduling, remote command execution, cleanup, and telemetry data processing.", "external_files": ["/etc/include.properties", "/etc/device.properties", "/etc/telemetry2_0.properties", "/lib/rdk/utils.sh", "/etc/mount-utils/getConfigFile.sh", "/etc/log_timestamp.sh", "/lib/rdk/getpartnerid.sh", "/lib/rdk/getaccountid.sh", "/etc/waninfo.sh"], "external_methods": ["getWanInterfaceName", "getWanMacInterfaceName", "GetConfigFile", "pidof", "ps", "kill", "rm", "mkdir", "touch", "grep", "sed", "awk", "sort", "cut", "date", "rpcclient", "scplp", "ssh", "sleep", "exit"], "published": ["getEstbMac", "getErouterIpv4", "getErouterIpv6", "getControllerId", "getRFStatus", "processJsonResponse", "scheduleCron", "dropbearRecovery", "clearTelemetryConfig", "generateTelemetryConfig"], "classes": [], "methods": [{"name": "getEstbMac", "description": "Retrieves the device's MAC address, either via a direct hardware call or through an interface-specific command depending on the box type."}, {"name": "getErouterIpv4", "description": "Fetches the IPv4 address of the erouter interface using device management CLI."}, {"name": "getErouterIpv6", "description": "Fetches the IPv6 address of the erouter interface using device management CLI."}, {"name": "getControllerId", "description": "Gathers system info via SNMP, including card VCT ID, Controller ID, and other identifiers, returning a JSON string."}, {"name": "getRFStatus", "description": "Collects RF status metrics like power and SNR via SNMP, returning a JSON string."}, {"name": "processJsonResponse", "description": "Processes the given JSON response file, reformats and extracts relevant data to configuration files."}, {"name": "scheduleCron", "description": "Schedules or updates the system cron jobs based on configuration, including handling diagnostic overrides."}, {"name": "dropbearRecovery", "description": "Checks if SSH server dropbear is running, and if not, creates it with provided configs."}, {"name": "clearTelemetryConfig", "description": "Removes telemetry configuration and marker files, resets telemetry data directories."}, {"name": "generateTelemetryConfig", "description": "Generates telemetry profile configuration based on input JSON files, creating mapping and sorted config files."}], "calls": ["getWanInterfaceName", "getWanMacInterfaceName", "dmcli eRT retv", "syscfg get", "pidof", "ps", "kill", "rm", "mkdir", "touch", "grep", "sed", "awk", "sort", "cut", "date", "rpcclient", "scp", "ssh", "sleep", "exit"], "search-terms": ["dca_utility.sh", "telemetry", "DCA_BINARY", "generateTelemetryConfig", "scheduleCron", "dropbearRecovery", "getPartnerId", "getAccountId", "getWanInterfaceName", "getWanMacInterfaceName", "processJsonResponse", "TELEMETRY_PATH", "DCMRESPONSE", "dcaSplunkUpload"], "state": 2, "file_id": 7153, "knowledge_revision": 20239, "git_revision": "", "hash": "ee30727a2812f899ace2e31277151cb8", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/sysint/dca_utility.sh", "revision_history": [{"20239": ""}]}