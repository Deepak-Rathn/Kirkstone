{"is_source_file": true, "format": "C++ header", "description": "This file defines a templated AVL Tree data structure along with an in-order iterator. It includes class declarations for AVLTree and AVLTreeInOrderIterator, along with associated methods and operators for managing an AVL Tree, including insertion, deletion, search, and traversal functionalities.", "external_files": ["avlNode.h"], "external_methods": [], "published": ["AVLTree<T1, T2>", "AVLTreeInOrderIterator<T1, T2>"], "classes": [{"name": "AVLTreeInOrderIterator", "description": "An iterator class for in-order traversal of the AVLTree, allowing comparison, increment/decrement, and dereferencing to access node keys."}, {"name": "AVLTree", "description": "A templated class implementing an AVL Tree data structure with functionalities for insertion, deletion, search, cloning, and traversal."}], "methods": [{"name": "operator==", "description": "Equality comparison operator between two iterators based on their node pointers."}, {"name": "operator!=", "description": "Inequality comparison operator between two iterators based on their node pointers."}, {"name": "operator++ (prefix)", "description": "Advances the iterator to the next node in in-order traversal."}, {"name": "operator-- (prefix)", "description": "Moves the iterator to the previous node in in-order traversal."}, {"name": "operator++ (postfix)", "description": "Post-increment that returns the current iterator and then advances."}, {"name": "operator-- (postfix)", "description": "Post-decrement that returns the current iterator and then moves back."}, {"name": "operator*", "description": "Dereferences the iterator to access the key of the current node."}, {"name": "AVLNode<T1,T2> * getNode()", "description": "Returns the internal AVLNode pointer associated with the iterator.", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"name": "AVLTree constructor", "description": "Initializes an AVL Tree, optionally in strict mode."}, {"name": "AVLTree copy constructor", "description": "Creates a new AVL Tree as a copy of an existing one."}, {"name": "AVLTree destructor", "description": "Destroys the AVL Tree and releases resources."}, {"name": "operator=", "description": "Assignment operator to copy contents from another AVL Tree."}, {"name": "Insert", "description": "Inserts a new node into the AVL Tree; overloaded to accept different parameters."}, {"name": "Delete", "description": "Removes a node from the AVL Tree, either by key or deleting the maximum element."}, {"name": "Destroy", "description": "Clears the entire AVL Tree."}, {"name": "Sort", "description": "Sorts the tree and outputs data into an array in ascending or descending order."}, {"name": "Find", "description": "Searches for a node with the specified key."}, {"name": "Min", "description": "Returns the minimum key in the AVL Tree along with its data."}, {"name": "Max", "description": "Returns the maximum key in the AVL Tree along with its data."}, {"name": "AVLTreeInOrderIterator<T1,T2> begin()", "description": "Returns an iterator pointing to the beginning (leftmost node).", "scope": "AVLTree", "scopeKind": "class"}, {"name": "AVLTreeInOrderIterator<T1,T2> end()", "description": "Returns an iterator representing the end (null).", "scope": "AVLTree", "scopeKind": "class"}, {"name": "AVLTreeInOrderIterator<T1,T2> rbegin()", "description": "Returns an iterator for reverse beginning (null).", "scope": "AVLTree", "scopeKind": "class"}, {"name": "AVLTreeInOrderIterator<T1,T2> rend()", "description": "Returns an iterator for reverse end (rightmost node).", "scope": "AVLTree", "scopeKind": "class"}, {"name": "AVLTreeInOrderIterator(AVLNode<T1,T2> * p)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "int getSize() const", "scope": "AVLTree", "scopeKind": "class", "description": "unavailable"}, {"name": "bool isStrict() const", "scope": "AVLTree", "scopeKind": "class", "description": "unavailable"}, {"name": "bool operator !=(AVLTreeInOrderIterator<T1,T2> & iter) const", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "T1 operator *()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLTreeInOrderIterator & operator ++()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "const AVLTreeInOrderIterator operator ++(int)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLTreeInOrderIterator & operator --()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "const AVLTreeInOrderIterator operator --(int)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "bool operator ==(AVLTreeInOrderIterator<T1,T2> & iter) const", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}], "calls": ["mNode->Find()", "mNode->GetKey()"], "search-terms": ["AVLTree template", "AVLNode", "InOrderIterator", "avlTree.h", "Tree balancing"], "state": 2, "file_id": 12578, "knowledge_revision": 25478, "git_revision": "", "ctags": [{"_type": "tag", "name": "AVLTREE_H", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^#define AVLTREE_H$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "AVLTree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^class AVLTree$/", "language": "C++", "kind": "class"}, {"_type": "tag", "name": "AVLTreeInOrderIterator", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator(AVLNode<T1, T2> *p) : mNode(p) { }$/", "language": "C++", "kind": "function", "signature": "(AVLNode<T1,T2> * p)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "AVLTreeInOrderIterator", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^class AVLTreeInOrderIterator $/", "language": "C++", "kind": "class"}, {"_type": "tag", "name": "begin", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator<T1, T2> begin()  { return AVLTreeInOrderIterator<T1, T2>( root == 0 ? 0 /", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator<T1,T2>", "kind": "function", "signature": "()", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "end", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator<T1, T2> end()    { return AVLTreeInOrderIterator<T1, T2>(0);  }$/", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator<T1,T2>", "kind": "function", "signature": "()", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "getNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLNode<T1, T2>* getNode() { return mNode; }$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "function", "signature": "()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "getSize", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tint  \tgetSize() const { return size; }$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "() const", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "isStrict", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tbool\tisStrict() const { return strict; }$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "() const", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "mNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLNode<T1, T2>*\tmNode;$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "member", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator !=", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tbool operator != (AVLTreeInOrderIterator<T1, T2> &iter) const { return mNode != iter.mNode; }$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(AVLTreeInOrderIterator<T1,T2> & iter) const", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator *", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tT1 operator* () { assert(mNode); return mNode->GetKey(); }$/", "language": "C++", "typeref": "typename:T1", "kind": "function", "signature": "()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator ++", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator& operator++ () { if (mNode) mNode = mNode->Find(LEFT,  mNode); return *t/", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator &", "kind": "function", "signature": "()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator ++", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tconst AVLTreeInOrderIterator operator++ (int) { AVLTreeInOrderIterator<T1, T2> iter = *this; *t/", "language": "C++", "typeref": "typename:const AVLTreeInOrderIterator", "kind": "function", "signature": "(int)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator --", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator& operator-- () { if (mNode) mNode = mNode->Find(RIGHT, mNode); return *t/", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator &", "kind": "function", "signature": "()", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator --", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tconst AVLTreeInOrderIterator operator-- (int) { AVLTreeInOrderIterator<T1, T2> iter = *this; *t/", "language": "C++", "typeref": "typename:const AVLTreeInOrderIterator", "kind": "function", "signature": "(int)", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "operator ==", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tbool operator == (AVLTreeInOrderIterator<T1, T2> &iter) const { return mNode == iter.mNode; }$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(AVLTreeInOrderIterator<T1,T2> & iter) const", "scope": "AVLTreeInOrderIterator", "scopeKind": "class"}, {"_type": "tag", "name": "rbegin", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator<T1, T2> rbegin() { return AVLTreeInOrderIterator<T1, T2>(0);  }$/", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator<T1,T2>", "kind": "function", "signature": "()", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "rend", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLTreeInOrderIterator<T1, T2> rend()   { return AVLTreeInOrderIterator<T1, T2>( root == 0 ? 0 /", "language": "C++", "typeref": "typename:AVLTreeInOrderIterator<T1,T2>", "kind": "function", "signature": "()", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "root", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tAVLNode<T1, T2>*\troot;$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "member", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "size", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tint\t\t\tsize;$/", "language": "C++", "typeref": "typename:int", "kind": "member", "scope": "AVLTree", "scopeKind": "class"}, {"_type": "tag", "name": "strict", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "pattern": "/^\tconst bool\t\tstrict;$/", "language": "C++", "typeref": "typename:const bool", "kind": "member", "scope": "AVLTree", "scopeKind": "class"}], "hash": "d6a0f1f8d6580d071a81faa0982816a7", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/sys_mon_tools/sys_resource/include/avlTree.h", "fields": [{"name": "AVLNode<T1,T2> * mNode", "scope": "AVLTreeInOrderIterator", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLNode<T1,T2> * root", "scope": "AVLTree", "scopeKind": "class", "description": "unavailable"}, {"name": "int size", "scope": "AVLTree", "scopeKind": "class", "description": "unavailable"}, {"name": "const bool strict", "scope": "AVLTree", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"25478": ""}]}