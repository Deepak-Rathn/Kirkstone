{"is_source_file": true, "format": "C", "description": "This file is a C source file containing unit tests for mutex operations and process signal handling, specifically testing mutex error checking, reentrant locking, and handling of incorrect mutex use cases using the cmocka testing framework.", "external_files": ["<stddef.h>", "<setjmp.h>", "<stdarg.h>", "<cmocka.h>", "<icLog/logging.h>", "<icConcurrent/timedWait.h>", "<signal.h>", "<icConcurrent/threadUtils.h>", "<unistd.h>", "<wait.h>"], "external_methods": ["cmocka.h functions: initIcLogger, fail_msg, cmocka_unit_test_teardown, cmocka_run_group_tests, closeIcLogger", "mutexLock", "mutexUnlock", "mutexInitWithType"], "published": ["main"], "classes": [], "methods": [{"name": "int teardown(void ** state)", "description": "Destroys the mutex to clean up resources after tests.", "scope": "", "scopeKind": ""}, {"name": "void forkExpectSignal(void (* test)(void ** state),void ** state,int signal)", "description": "Forks a process to run a test function and expects a specific signal to be received by the child process.", "scope": "", "scopeKind": ""}, {"name": "void doMutexDeadlock(void ** state)", "description": "Attempts to lock the same mutex twice in the same thread, expecting an error.", "scope": "", "scopeKind": ""}, {"name": "void doMutexOverUnlock(void ** state)", "description": "Attempts to unlock a mutex not owned by the caller, expecting an error.", "scope": "", "scopeKind": ""}, {"name": "void test_mutexErrorCheck(void ** state)", "description": "Tests mutex error checking by inducing deadlock and over-unlock scenarios.", "scope": "", "scopeKind": ""}, {"name": "void test_mutexReentrant(void ** state)", "description": "Tests proper reentrant locking with an ERRORCHECK mutex.", "scope": "", "scopeKind": ""}, {"name": "void doMutexLock(void ** state)", "description": "Locks the mutex, used in synchronization or test scenarios.", "scope": "", "scopeKind": ""}, {"name": "void doMutexUnlock(void ** state)", "description": "Unlocks the mutex, used in synchronization or test scenarios.", "scope": "", "scopeKind": ""}, {"name": "void doBadScopeUnlock(void ** state)", "description": "Attempts to unlock a mutex outside of its scope, expecting an error.", "scope": "", "scopeKind": ""}, {"name": "void test_mutexUninitialized(void ** state)", "description": "Tests behavior of mutex functions when mutex is uninitialized, expecting signals.", "scope": "", "scopeKind": ""}, {"name": "void test_mutexLockScope(void ** state)", "description": "Tests scope-based locking and unlocking of mutexes, expecting errors on misuse.", "scope": "", "scopeKind": ""}, {"name": "int main(int argc,const char ** argv)", "description": "Entry point for the test suite, initializing logger, running tests, and cleaning up.", "scope": "", "scopeKind": ""}], "calls": ["initIcLogger", "fail_msg", "cmocka_unit_test_teardown", "cmocka_run_group_tests", "closeIcLogger", "mutexInitWithType", "mutexLock", "mutexUnlock"], "search-terms": ["mutexErrorCheck", "mutexReentrant", "threadUtilsTest", "PTHREAD_MUTEX_ERRORCHECK", "PTHREAD_MUTEX_RECURSIVE", "forkExpectSignal", "cmocka"], "state": 2, "file_id": 880, "knowledge_revision": 14040, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOG_TAG", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^#define LOG_TAG /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "doBadScopeUnlock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void doBadScopeUnlock(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "doMutexDeadlock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void doMutexDeadlock(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "doMutexLock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void doMutexLock(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "doMutexOverUnlock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void doMutexOverUnlock(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "doMutexUnlock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void doMutexUnlock(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "forkExpectSignal", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void forkExpectSignal(void (*test)(void **state), void **state, int signal)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void (* test)(void ** state),void ** state,int signal)"}, {"_type": "tag", "name": "main", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^int main(int argc, const char **argv)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(int argc,const char ** argv)"}, {"_type": "tag", "name": "teardown", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static int teardown(void **state)$/", "file": true, "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "testMtx", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static pthread_mutex_t testMtx;$/", "file": true, "language": "C", "typeref": "typename:pthread_mutex_t", "kind": "variable"}, {"_type": "tag", "name": "test_mutexErrorCheck", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void test_mutexErrorCheck(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "test_mutexLockScope", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void test_mutexLockScope(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "test_mutexReentrant", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void test_mutexReentrant(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}, {"_type": "tag", "name": "test_mutexUninitialized", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "pattern": "/^static void test_mutexUninitialized(void **state)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void ** state)"}], "hash": "cd411bf650a14bd4ff4648418894f95d", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/concurrent/c/test/src/threadUtilsTest.c", "fields": [{"name": "pthread_mutex_t testMtx", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"14040": ""}]}