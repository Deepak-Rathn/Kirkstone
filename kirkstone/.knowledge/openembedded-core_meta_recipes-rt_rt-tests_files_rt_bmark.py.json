{"is_source_file": true, "format": "Python", "description": "This file is a Python script designed to benchmark interrupt latency under various system load conditions. It measures latency statistics such as minimum, average, and maximum latency using cyclictest and stress-ng, with functions to start and stop stress processes, run cyclictest, and analyze the results. It also defines a class for orchestrating the tests and executing multiple scenarios including stress and no-stress conditions.", "external_files": ["cyclictest", "stress-ng", "/proc/sys/kernel/hung_task_timeout_secs"], "external_methods": ["subprocess.check_output", "subprocess.Popen", "os.killpg", "os.access", "os.getpgid", "signal.SIGTERM", "time.time", "time.localtime"], "published": ["tc_name", "log", "log_ts", "log_test_header", "start_stress", "end_stress", "us2hms_str", "set_hung_tmo", "gen_minmax_list", "run_cyclictest_once", "run_cyclictest_suite"], "classes": [{"name": "cyclictest_runner", "description": "A class to run cyclic latency tests under various load conditions, handling stress processes, executing the cyclictest suite, and logging results."}], "methods": [{"name": "tc_name(sub_name)", "description": "Constructs a test case name based on a sub-name.", "scope": "", "scopeKind": ""}, {"name": "log(*msg)", "description": "Logs a message with '#' prefix, similar to print.", "scope": "", "scopeKind": ""}, {"name": "log_ts(*msg)", "description": "Logs a timestamped message.", "scope": "", "scopeKind": ""}, {"name": "log_test_header(seq_no, nr_of_tests, name)", "description": "Logs the header for a test case, including sequence number and total tests.", "scope": "", "scopeKind": ""}, {"name": "start_stress(*args)", "description": "Starts stress-ng with specified stress types and options, returning the process handle.", "scope": "", "scopeKind": ""}, {"name": "end_stress(p)", "description": "Terminates the stress-ng process if it was started.", "scope": "", "scopeKind": ""}, {"name": "us2hms_str(us)", "description": "Converts microseconds to a human-readable hours:minutes:seconds string.", "scope": "", "scopeKind": ""}, {"name": "set_hung_tmo(new_tmo)", "description": "Adjusts the hung task detection timeout value in the kernel; disables it if unsupported.", "scope": "", "scopeKind": ""}, {"name": "gen_minmax_list(max_list)", "description": "Generates a list of minimums from successive pairs in a max list to analyze worst-case latency.", "scope": "", "scopeKind": ""}, {"name": "run_cyclictest_once()", "description": "Runs a single cyclictest and gathers min, max, and average latency statistics.", "scope": "", "scopeKind": ""}, {"name": "run_cyclictest_suite()", "description": "Runs multiple cyclictest iterations, tracks min and max values, and analyzes results.", "scope": "", "scopeKind": ""}, {"name": "__init__(self, msg)", "scope": "TestFail", "scopeKind": "class", "description": "unavailable"}, {"name": "__str__(self)", "scope": "TestFail", "scopeKind": "class", "description": "unavailable"}, {"name": "cond_add_stress(stress_type, options)", "scope": "start_stress", "scopeKind": "function", "description": "unavailable"}, {"name": "run_test(self, seq_no, nr_of_tests, name, stressparams)", "scope": "cyclictest_runner", "scopeKind": "class", "description": "unavailable"}], "calls": ["subprocess.check_output", "subprocess.Popen", "os.killpg", "os.access", "os.getpgid", "signal.SIGTERM", "time.time", "time.localtime", "re.compile", "traceback.format_exc"], "search-terms": ["cyclictest", "stress-ng", "latency", "interrupt latency", "system load", "benchmark", "real-time system", "stress", "latency measurement", "max min avg latency"], "state": 2, "file_id": 1725, "knowledge_revision": 14879, "git_revision": "", "ctags": [{"_type": "tag", "name": "N", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^N          = 5$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "TestFail", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^class TestFail(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^        def __init__(self, msg):$/", "language": "Python", "kind": "member", "signature": "(self, msg)", "scope": "TestFail", "scopeKind": "class"}, {"_type": "tag", "name": "__str__", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^        def __str__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestFail", "scopeKind": "class"}, {"_type": "tag", "name": "cmd", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^cmd = (\"cyclictest\",$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "cond_add_stress", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^        def cond_add_stress(stress_type, options):$/", "file": true, "language": "Python", "kind": "function", "signature": "(stress_type, options)", "scope": "start_stress", "scopeKind": "function"}, {"_type": "tag", "name": "cyclictest_runner", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^class cyclictest_runner:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "end_stress", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def end_stress(p):$/", "language": "Python", "kind": "function", "signature": "(p)"}, {"_type": "tag", "name": "est_exec_time_once", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^est_exec_time_once  = interval_core_0 * loop_count$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "est_exec_time_suite", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^est_exec_time_suite = suite_size * est_exec_time_once$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "gen_minmax_list", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def gen_minmax_list(max_list):$/", "language": "Python", "kind": "function", "signature": "(max_list)"}, {"_type": "tag", "name": "has_hung_task_detection", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^has_hung_task_detection = True$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "interval_core_0", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^interval_core_0 = 100     # Timer interval on core 0 [us]$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "interval_delta", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^interval_delta  = 20      # Interval increment for each core [us]$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def log(*msg):$/", "language": "Python", "kind": "function", "signature": "(*msg)"}, {"_type": "tag", "name": "log_test_header", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def log_test_header(seq_no, nr_of_tests, name):$/", "language": "Python", "kind": "function", "signature": "(seq_no, nr_of_tests, name)"}, {"_type": "tag", "name": "log_ts", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def log_ts(*msg):$/", "language": "Python", "kind": "function", "signature": "(*msg)"}, {"_type": "tag", "name": "loop_count", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^loop_count      = 30000   # Number of loops (on core 0).$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "nr_of_tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^nr_of_tests = len(tests)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "rex", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^rex = re.compile(b\"C:\\\\s*(\\\\d+).*Min:\\\\s*(\\\\d+).*Avg:\\\\s*(\\\\d+).*Max:\\\\s*(\\\\d+)\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_cyclictest_once", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def run_cyclictest_once():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "run_cyclictest_suite", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def run_cyclictest_suite():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "run_test", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^        def run_test(self, seq_no, nr_of_tests, name, stressparams):$/", "language": "Python", "kind": "member", "signature": "(self, seq_no, nr_of_tests, name, stressparams)", "scope": "cyclictest_runner", "scopeKind": "class"}, {"_type": "tag", "name": "runner", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^runner = cyclictest_runner()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "set_hung_tmo", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def set_hung_tmo(new_tmo):$/", "language": "Python", "kind": "function", "signature": "(new_tmo)"}, {"_type": "tag", "name": "start_stress", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def start_stress(*args):$/", "language": "Python", "kind": "function", "signature": "(*args)"}, {"_type": "tag", "name": "suite_size", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^suite_size = 2**N$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "tc_name", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def tc_name(sub_name):$/", "language": "Python", "kind": "function", "signature": "(sub_name)"}, {"_type": "tag", "name": "tests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^tests = ((\"no_stress\", []),$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "us2hms_str", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "pattern": "/^def us2hms_str(us):$/", "language": "Python", "kind": "function", "signature": "(us)"}], "hash": "de6fcde6a72fef27670e641427278133", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/meta/recipes-rt/rt-tests/files/rt_bmark.py", "fields": [{"name": "N          = 5", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "cmd = (\"cyclictest\",", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "est_exec_time_once  = interval_core_0 * loop_count", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "est_exec_time_suite = suite_size * est_exec_time_once", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "has_hung_task_detection = True", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "interval_core_0 = 100     # Timer interval on core 0 [us]", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "interval_delta  = 20      # Interval increment for each core [us]", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "loop_count      = 30000   # Number of loops (on core 0).", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "nr_of_tests = len(tests)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "rex = re.compile(b\"C:\\\\s*(\\\\d+).*Min:\\\\s*(\\\\d+).*Avg:\\\\s*(\\\\d+).*Max:\\\\s*(\\\\d+)\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "runner = cyclictest_runner()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "suite_size = 2**N", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "tests = ((\"no_stress\", []),", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"14879": ""}]}