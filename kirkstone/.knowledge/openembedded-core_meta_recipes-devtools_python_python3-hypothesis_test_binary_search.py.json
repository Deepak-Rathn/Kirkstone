{"is_source_file": true, "format": "Python", "description": "This file contains unit test functions for the 'binary_search' algorithm, demonstrating invariant testing techniques using the Hypothesis property-based testing library. It includes the implementation of 'binary_search', auxiliary functions for testing invariants, and multiple test cases that verify properties like sortedness and minimal insertion points.", "external_files": ["hypothesis"], "external_methods": ["hypothesis.given", "strategies as st"], "published": ["binary_search", "is_sorted"], "classes": [], "methods": [{"name": "binary_search(ls, v)", "description": "Performs a binary search on a sorted list to find the insertion index for a given value, maintaining the list's sorted order.", "scope": "", "scopeKind": ""}, {"name": "is_sorted(ls)", "description": "Checks if a list is sorted in non-decreasing order.", "scope": "", "scopeKind": ""}, {"name": "test_insert_is_sorted(ls, v)", "description": "Test that inserting a value at the position returned by binary_search results in a sorted list.", "scope": "", "scopeKind": ""}, {"name": "test_is_minimal(ls, v)", "description": "Test that binary_search returns the minimal index at which the value can be inserted to keep the list sorted.", "scope": "", "scopeKind": ""}, {"name": "test_inserts_into_same_place_twice(ls, v)", "description": "Test that inserting a value into the same position twice results in consistent insertion points.", "scope": "", "scopeKind": ""}], "calls": ["hypothesis.given", "st.lists", "st.integers", "assert", "is_sorted", "binary_search"], "search-terms": ["binary_search", "Hypothesis testing", "invariant testing", "sorted list", "insertion point", "property-based testing", "test assertions"], "state": 2, "file_id": 2067, "knowledge_revision": 15214, "git_revision": "", "ctags": [{"_type": "tag", "name": "SortedLists", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^SortedLists = st.lists(Values).map(sorted)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "Values", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^Values = st.integers()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "binary_search", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^def binary_search(ls, v):$/", "language": "Python", "kind": "function", "signature": "(ls, v)"}, {"_type": "tag", "name": "is_sorted", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^def is_sorted(ls):$/", "language": "Python", "kind": "function", "signature": "(ls)"}, {"_type": "tag", "name": "st", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^from hypothesis import given, strategies as st$/", "language": "Python", "kind": "unknown", "nameref": "unknown:strategies"}, {"_type": "tag", "name": "test_insert_is_sorted", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^def test_insert_is_sorted(ls, v):$/", "language": "Python", "kind": "function", "signature": "(ls, v)"}, {"_type": "tag", "name": "test_inserts_into_same_place_twice", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^def test_inserts_into_same_place_twice(ls, v):$/", "language": "Python", "kind": "function", "signature": "(ls, v)"}, {"_type": "tag", "name": "test_is_minimal", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "pattern": "/^def test_is_minimal(ls, v):$/", "language": "Python", "kind": "function", "signature": "(ls, v)"}], "hash": "d9b89586259c6a14f55131d0d13cfddd", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/meta/recipes-devtools/python/python3-hypothesis/test_binary_search.py", "fields": [{"name": "SortedLists = st.lists(Values).map(sorted)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Values = st.integers()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15214": ""}]}