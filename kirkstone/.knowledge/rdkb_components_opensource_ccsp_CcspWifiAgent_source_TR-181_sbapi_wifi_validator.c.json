{"is_source_file": true, "format": "C", "description": "This file appears to be a C source code file for a module related to WiFi validation, interworking, and security configuration, specifically handling validation of JSON-based configuration inputs for WiFi Passpoint and other security features.", "external_files": ["cosa_apis.h", "cosa_dbus_api.h", "cosa_wifi_apis.h", "cosa_wifi_internal.h", "wifi_webconfig.h", "wifi_hal.h", "cjson/cJSON.h"], "external_methods": ["CosaDmlWiFi_IsValidMacAddr", "getRadioIndexFromAp", "getRadioOperationParam", "CosaDmlWiFi_ReadPasspointConfig", "getVAPIndexFromName", "isVapHotspot", "isVapHotspotSecure", "isVapPrivate", "isVapXhs", "WIFI_HAL_VERSION_3"], "published": ["validate_param_string", "validate_param_integer", "validate_param_bool", "validate_param_array", "validate_param_object", "validate_ipv4_address", "validate_anqp", "validate_passpoint", "validate_interworking", "validate_radius_settings", "validate_enterprise_security", "validate_personal_security", "validate_ssid_name", "validate_xfinity_secure_vap", "validate_xfinity_open_vap", "validate_private_vap", "validate_radius_settings", "validate_vap", "validate_wifi_config", "wifi_validate_config", "validate_wifi_radio_config", "wifi_validate_radio_config"], "classes": [], "methods": [{"name": "validate_param_string", "description": "Validates that a JSON object contains a string value for a specific key."}, {"name": "validate_param_integer", "description": "Checks that a JSON key exists and its value is a number."}, {"name": "validate_param_bool", "description": "Checks that a JSON key exists and its value is a boolean."}, {"name": "validate_param_array", "description": "Ensures that a JSON key contains an array value."}, {"name": "validate_param_object", "description": "Checks that a JSON key contains an object."}, {"name": "int validate_ipv4_address(char * ip)", "description": "Validates if a given string is a valid IPv4 address.", "scope": "", "scopeKind": ""}, {"name": "int validate_anqp(const cJSON * anqp,wifi_interworking_t * vap_info,pErr execRetVal)", "description": "Validates and parses the ANQP (Access Network Query Protocol) element from JSON into the internal data structures.", "scope": "", "scopeKind": ""}, {"name": "int validate_passpoint(const cJSON * passpoint,wifi_interworking_t * vap_info,pErr execRetVal)", "description": "Validates the Passpoint configuration JSON, including enabling flags, security settings, and related ANQP elements.", "scope": "", "scopeKind": ""}, {"name": "int validate_interworking(const cJSON * interworking,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates and applies interworking parameters from JSON to the internal WiFi structure.", "scope": "", "scopeKind": ""}, {"name": "int validate_radius_settings(const cJSON * radius,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates RADIUS server configurations from JSON input.", "scope": "", "scopeKind": ""}, {"name": "int validate_enterprise_security(const cJSON * security,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates enterprise security parameters from JSON.", "scope": "", "scopeKind": ""}, {"name": "int validate_personal_security(const cJSON * security,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates personal security parameters (e.g., WPA Personal) from JSON.", "scope": "", "scopeKind": ""}, {"name": "int validate_ssid_name(char * ssid_name,pErr execRetVal)", "description": "Validates SSID name strings for proper characters and length.", "scope": "", "scopeKind": ""}, {"name": "int validate_xfinity_secure_vap(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates security and interworking settings for a secured VAP (Virtual Access Point).", "scope": "", "scopeKind": ""}, {"name": "int validate_xfinity_open_vap(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates configuration for an open (unauthenticated) VAP.", "scope": "", "scopeKind": ""}, {"name": "int validate_private_vap(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates configuration for a private (secured) VAP, including security modes and MFP settings.", "scope": "", "scopeKind": ""}, {"name": "int validate_vap(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates various parameters in a VAP JSON object, including its name, enabled status, SSID, security settings, and specific types of VAPs like private or Xfinity models.", "scope": "", "scopeKind": ""}, {"name": "int validate_xhome_vap(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)", "description": "Validates specific XHome (Xfinity) VAP configuration parameters, including security mode, MFPConfig, and interworking settings, ensuring they comply with required standards.", "scope": "", "scopeKind": ""}, {"name": "validate_private_vap", "description": "Validates private VAP configurations, including security mode, MFP settings, and interworking. Checks for conditions like Passpoint disabling on private VAPs."}, {"name": "validate_xfinity_secure_vap", "description": "Validates secure Xfinity VAP settings, with focus on security mode, MFP configuration, and interworking features."}, {"name": "validate_xfinity_open_vap", "description": "Validates open (no security) Xfinity VAP configuration parameters."}, {"name": "validate_anqp", "description": "Validates and parses the ANQP element from JSON into internal data structures."}, {"name": "validate_passpoint", "description": "Validates the Passpoint configuration JSON, including enable flags, security settings, and related ANQP elements."}, {"name": "validate_interworking", "description": "Validates and applies interworking parameters from JSON to WiFi structure."}, {"name": "validate_radius_settings", "description": "Validates RADIUS server configuration from JSON input."}, {"name": "validate_personal_security", "description": "Validates personal security parameters (WPA Personal) from JSON."}, {"name": "validate_ssid_name", "description": "Validates SSID names for proper characters and length."}, {"name": "int validate_gas_config(const cJSON * gas,wifi_GASConfiguration_t * gas_info,pErr execRetVal)", "description": "Validates GAS (Generic Advertisement Service) configuration parameters from JSON.", "scope": "", "scopeKind": ""}, {"name": "int validate_wifi_config(const cJSON * wifi,wifi_config_t * wifi_info,pErr execRetVal)", "description": "Validates overall WiFi configuration including GAS settings.", "scope": "", "scopeKind": ""}, {"name": "int wifi_validate_config(const char * buff,wifi_config_t * wifi_config,wifi_vap_info_map_t * vap_map,pErr execRetVal)", "description": "Validates entire WIFI configuration buffer, parsing global config and VAP configs from JSON.", "scope": "", "scopeKind": ""}, {"name": "int validate_wifi_radio_config(const cJSON * radio,wifi_radio_operationParam_t * radio_info,pErr execRetVal)", "description": "Validates WiFi radio configuration JSON for each radio, including name, bandwidth, and enable status.", "scope": "", "scopeKind": ""}, {"name": "int wifi_validate_radio_config(const char * buff,wifi_radio_operationParam_t * radio_map,pErr execRetVal)", "description": "Main entry point to validate the entire radio configuration JSON for multiple radios.", "scope": "", "scopeKind": ""}], "calls": ["CosaDmlWiFi_IsValidMacAddr", "getRadioIndexFromAp", "getRadioOperationParam", "getVAPIndexFromName", "isVapHotspot", "isVapHotspotSecure", "isVapPrivate", "isVapXhs"], "search-terms": ["wifi_validator.c", "Passpoint", "Interworking", "ANQP", "RadiusSettings", "validate_passpoint", "validate_interworking", "validate_radius_settings", "validate_enterprise_security", "validate_personal_security", "wifi_radio", "wifiVapConfig", "wifi_config"], "state": 2, "file_id": 9189, "knowledge_revision": 22208, "git_revision": "", "ctags": [{"_type": "tag", "name": "g_interworking_RFC", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^UINT g_interworking_RFC;$/", "language": "C", "typeref": "typename:UINT", "kind": "variable"}, {"_type": "tag", "name": "g_passpoint_RFC", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^UINT g_passpoint_RFC;$/", "language": "C", "typeref": "typename:UINT", "kind": "variable"}, {"_type": "tag", "name": "validate_anqp", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_anqp(const cJSON *anqp, wifi_interworking_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * anqp,wifi_interworking_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_enterprise_security", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_enterprise_security(const cJSON *security, wifi_vap_info_t *vap_info, pErr execRetV/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * security,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_gas_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_gas_config(const cJSON *gas, wifi_GASConfiguration_t *gas_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * gas,wifi_GASConfiguration_t * gas_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_interworking", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_interworking(const cJSON *interworking, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * interworking,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_ipv4_address", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_ipv4_address(char *ip) {$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(char * ip)"}, {"_type": "tag", "name": "validate_param_array", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^#define validate_param_array(/", "file": true, "language": "C", "kind": "macro", "signature": "(json,key,value)"}, {"_type": "tag", "name": "validate_param_bool", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^#define validate_param_bool(/", "file": true, "language": "C", "kind": "macro", "signature": "(json,key,value)"}, {"_type": "tag", "name": "validate_param_integer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^#define validate_param_integer(/", "file": true, "language": "C", "kind": "macro", "signature": "(json,key,value)"}, {"_type": "tag", "name": "validate_param_object", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^#define validate_param_object(/", "file": true, "language": "C", "kind": "macro", "signature": "(json,key,value)"}, {"_type": "tag", "name": "validate_param_string", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^#define validate_param_string(/", "file": true, "language": "C", "kind": "macro", "signature": "(json,key,value)"}, {"_type": "tag", "name": "validate_passpoint", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_passpoint(const cJSON *passpoint, wifi_interworking_t *vap_info, pErr execRetVal) $/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * passpoint,wifi_interworking_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_personal_security", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_personal_security(const cJSON *security, wifi_vap_info_t *vap_info, pErr execRetVal/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * security,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_private_vap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_private_vap(const cJSON *vap, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_radius_settings", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_radius_settings(const cJSON *radius, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * radius,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_ssid_name", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_ssid_name(char *ssid_name, pErr execRetVal) $/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(char * ssid_name,pErr execRetVal)"}, {"_type": "tag", "name": "validate_vap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_vap(const cJSON *vap, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_wifi_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_wifi_config(const cJSON *wifi, wifi_config_t *wifi_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * wifi,wifi_config_t * wifi_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_wifi_radio_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_wifi_radio_config(const cJSON *radio, wifi_radio_operationParam_t *radio_info, pErr/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * radio,wifi_radio_operationParam_t * radio_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_xfinity_open_vap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_xfinity_open_vap(const cJSON *vap, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_xfinity_secure_vap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_xfinity_secure_vap(const cJSON *vap, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "validate_xhome_vap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int validate_xhome_vap(const cJSON *vap, wifi_vap_info_t *vap_info, pErr execRetVal)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const cJSON * vap,wifi_vap_info_t * vap_info,pErr execRetVal)"}, {"_type": "tag", "name": "wifi_validate_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int wifi_validate_config(const char *buff, wifi_config_t *wifi_config, wifi_vap_info_map_t *vap_/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const char * buff,wifi_config_t * wifi_config,wifi_vap_info_map_t * vap_map,pErr execRetVal)"}, {"_type": "tag", "name": "wifi_validate_radio_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^int wifi_validate_radio_config(const char *buff, wifi_radio_operationParam_t *radio_map, pErr ex/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const char * buff,wifi_radio_operationParam_t * radio_map,pErr execRetVal)"}, {"_type": "tag", "name": "wpa3_rfc", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "pattern": "/^BOOL wpa3_rfc = FALSE;$/", "language": "C", "typeref": "typename:BOOL", "kind": "variable"}], "hash": "1f79fbb1192fc8042a238d5d0d114b17", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/CcspWifiAgent/source/TR-181/sbapi/wifi_validator.c", "fields": [{"name": "UINT g_interworking_RFC", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "UINT g_passpoint_RFC", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "BOOL wpa3_rfc", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"22208": ""}]}