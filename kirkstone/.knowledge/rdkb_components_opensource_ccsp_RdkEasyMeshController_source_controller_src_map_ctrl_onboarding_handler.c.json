{"is_source_file": true, "format": "C", "description": "This file appears to be a C source code file implementing the controller logic for onboarding and topology discovery in a network management system, specifically related to RDK (Reference Design Kit) EasyMesh. It contains multiple internal helper functions, timer callbacks, and public API functions for initializing, configuring, and managing onboarding and topology discovery routines.", "external_files": ["map_ctrl_onboarding_handler.h", "map_ctrl_post_onboarding_handler.h", "map_ctrl_topology_tree.h", "map_ctrl_metrics_handler.h", "map_ctrl_cmdu_tx.h", "map_topology_tree.h", "map_timer_handler.h", "map_retry_handler.h", "map_ctrl_utils.h", "map_ctrl_defines.h", "map_info.h", "map_dm_eth_device_list.h", "arraylist.h", "1905_platform.h"], "external_methods": ["i1905_get_interface_info", "i1905_free_interface_info", "map_send_topology_discovery", "get_controller_cfg", "map_timer_register_callback", "map_timer_change_callback", "map_timer_unregister_callback_prefix", "map_is_timer_registered", "map_timer_unregister_callback", "map_dm_get_ale", "map_dm_create_ale", "map_update_ale_receiving_iface", "map_send_topology_query", "map_start_onboarding_status_check_timer", "map_dm_create_radio", "map_dm_get_radio_timer_id", "map_handle_policy_config_sent", "map_build_and_send_policy_config", "is_radio_initial_scan_results_received", "map_handle_initial_channel_scan_request_sent", "map_build_and_send_initial_channel_scan_req", "log_ctrl_e", "WFA_CERT", "map_reset_all_agent_nodes_onboarding_status", "map_dm_foreach_agent_ale", "map_send_ap_capability_query", "map_send_autoconfig_renew", "map_is_topology_update_required", "map_register_topology_query_retry", "map_dm_eth_device_list_schedule_update", "map_is_channel_selection_enabled", "get_controller_cfg", "map_get_dead_agent_detection_interval", "map_handle_new_agent_onboarding", "map_dm_get_ale", "map_dm_create_ale", "map_update_ale_receiving_iface", "map_send_topology_query", "map_start_onboarding_status_check_timer", "map_dm_create_radio", "map_dm_get_radio_timer_id", "map_handle_policy_config_sent", "map_build_and_send_policy_config", "is_radio_initial_scan_results_received", "map_handle_initial_channel_scan_request_sent", "map_build_and_send_initial_channel_scan_req", "log_ctrl_e", "WFA_CERT", "map_reset_all_agent_nodes_onboarding_status", "map_dm_foreach_agent_ale", "map_send_ap_capability_query", "map_send_autoconfig_renew", "map_is_topology_update_required", "map_register_topology_query_retry", "map_dm_eth_device_list_schedule_update"], "published": ["map_handle_new_agent_onboarding", "map_handle_new_radio_onboarding", "map_is_agent_onboarded", "map_is_all_radio_M1_received", "map_is_all_radio_configured", "map_restart_topology_discovery", "map_stop_topology_discovery", "map_onboarding_handler_init", "map_onboarding_handler_fini", "map_is_channel_selection_enabled", "map_get_dead_agent_detection_interval", "map_get_topology_query_retry_interval_sec"], "classes": [], "methods": [{"name": "int send_topology_discovery(const char * ifname)", "description": "Sends a topology discovery message on the specified interface by retrieving its interface info and invoking the appropriate send function.", "scope": "", "scopeKind": ""}, {"name": "uint8_t map_topology_discovery_timer_cb(char * timer_id,void * arg)", "description": "Timer callback for topology discovery which adapts the timer interval dynamically based on configuration.", "scope": "", "scopeKind": ""}, {"name": "uint8_t map_lldp_discovery_timer_cb(UNUSED char * timer_id,UNUSED void * arg)", "description": "Timer callback for LLDP bridge discovery which performs LLDP bridge discovery on all interfaces.", "scope": "", "scopeKind": ""}, {"name": "uint8_t map_periodic_topology_query_timer_cb(UNUSED char * timer_id,UNUSED void * arg)", "description": "Periodic timer callback to initiate topology queries for all ALEs requiring updates and schedule Ethernet client location derivation.", "scope": "", "scopeKind": ""}, {"name": "uint8_t map_periodic_ap_capability_query_timer_cb(UNUSED char * timer_id,UNUSED void * arg)", "description": "Periodic timer callback to send AP capability query to all ALEs.", "scope": "", "scopeKind": ""}, {"name": "uint8_t map_config_renew_timer_cb(UNUSED char * timer_id,UNUSED void * arg)", "description": "Timer callback to send configuration renew messages and reset onboarding status of agents.", "scope": "", "scopeKind": ""}, {"name": "uint8_t get_configured_radio_nr(map_ale_info_t * ale)", "description": "Counts the number of configured radios within an ALE.", "scope": "", "scopeKind": ""}, {"name": "int map_onboarding_handler_init()", "description": "Initializes onboarding-related timers for topology discovery, LLDP, topology query, and configuration renewals.", "scope": "", "scopeKind": ""}, {"name": "void map_onboarding_handler_fini(void)", "description": "Unregisters onboarding timers during cleanup.", "scope": "", "scopeKind": ""}, {"name": "bool map_is_channel_selection_enabled()", "description": "Returns if channel selection is enabled, taking into account purpose-specific conditions like WFA certification.", "scope": "", "scopeKind": ""}, {"name": "uint16_t map_get_dead_agent_detection_interval()", "description": "Retrieves the dead agent detection interval with minimum/maximum bounds.", "scope": "", "scopeKind": ""}, {"name": "uint16_t map_get_topology_query_retry_interval_sec()", "description": "Calculates retry interval for topology queries based on dead agent detection interval.", "scope": "", "scopeKind": ""}, {"name": "map_ale_info_t * map_handle_new_agent_onboarding(uint8_t * al_mac,char * recv_iface,bool easymesh_plus)", "description": "Handles onboarding of a new agent, updates topology, sends initial queries, and starts status check timers.", "scope": "", "scopeKind": ""}, {"name": "map_radio_info_t * map_handle_new_radio_onboarding(map_ale_info_t * ale,uint8_t * radio_id,bool do_policy_config)", "description": "Handles onboarding a new radio for an existing ALE, including sending policy and scan requests with retries.", "scope": "", "scopeKind": ""}, {"name": "bool map_is_agent_onboarded(map_ale_info_t * ale)", "description": "Checks whether a given ALE has completed onboarding.", "scope": "", "scopeKind": ""}, {"name": "bool map_is_all_radio_M1_received(map_ale_info_t * ale)", "description": "Determines if all radios in an ALE have received M1 message.", "scope": "", "scopeKind": ""}, {"name": "bool map_is_all_radio_configured(map_ale_info_t * ale)", "description": "Checks if all radios in an ALE are configured.", "scope": "", "scopeKind": ""}, {"name": "void map_restart_topology_discovery(const char * ifname)", "description": "Restarts topology discovery immediately and sets up periodic timers.", "scope": "", "scopeKind": ""}, {"name": "void map_stop_topology_discovery(const char * ifname)", "description": "Stops ongoing topology discovery on a specified interface.", "scope": "", "scopeKind": ""}], "search-terms": ["map_handle_new_agent_onboarding", "map_handle_new_radio_onboarding", "topology_discovery", "LLDP", "auto configuration renew", "agent onboarding", "RADIO", "ALE", "map_timer", "policy configuration", "network topology"], "state": 2, "file_id": 8552, "knowledge_revision": 21587, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOG_TAG", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^#define LOG_TAG /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "START_TOPOLOGY_DISCOVERY_INTERVAL", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^#define START_TOPOLOGY_DISCOVERY_INTERVAL /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "TOPOLOGY_DISCOVERY_INTERVAL_SCALE_FACTOR", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^#define TOPOLOGY_DISCOVERY_INTERVAL_SCALE_FACTOR /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "get_configured_radio_nr", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t get_configured_radio_nr(map_ale_info_t* ale)$/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(map_ale_info_t * ale)"}, {"_type": "tag", "name": "map_config_renew_timer_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t map_config_renew_timer_cb(UNUSED char* timer_id, UNUSED void *arg)$/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(UNUSED char * timer_id,UNUSED void * arg)"}, {"_type": "tag", "name": "map_get_dead_agent_detection_interval", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^uint16_t map_get_dead_agent_detection_interval()$/", "language": "C", "typeref": "typename:uint16_t", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "map_get_topology_query_retry_interval_sec", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^uint16_t map_get_topology_query_retry_interval_sec()$/", "language": "C", "typeref": "typename:uint16_t", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "map_handle_new_agent_onboarding", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^map_ale_info_t* map_handle_new_agent_onboarding(uint8_t *al_mac, char *recv_iface, bool easymesh/", "language": "C", "typeref": "typename:map_ale_info_t *", "kind": "function", "signature": "(uint8_t * al_mac,char * recv_iface,bool easymesh_plus)"}, {"_type": "tag", "name": "map_handle_new_radio_onboarding", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^map_radio_info_t* map_handle_new_radio_onboarding(map_ale_info_t *ale, uint8_t *radio_id, bool d/", "language": "C", "typeref": "typename:map_radio_info_t *", "kind": "function", "signature": "(map_ale_info_t * ale,uint8_t * radio_id,bool do_policy_config)"}, {"_type": "tag", "name": "map_is_agent_onboarded", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^bool map_is_agent_onboarded(map_ale_info_t *ale)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(map_ale_info_t * ale)"}, {"_type": "tag", "name": "map_is_all_radio_M1_received", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^bool map_is_all_radio_M1_received(map_ale_info_t* ale)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(map_ale_info_t * ale)"}, {"_type": "tag", "name": "map_is_all_radio_configured", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^bool map_is_all_radio_configured(map_ale_info_t* ale)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(map_ale_info_t * ale)"}, {"_type": "tag", "name": "map_is_channel_selection_enabled", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^bool map_is_channel_selection_enabled()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "map_lldp_discovery_timer_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t map_lldp_discovery_timer_cb(UNUSED char* timer_id, UNUSED void *arg)$/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(UNUSED char * timer_id,UNUSED void * arg)"}, {"_type": "tag", "name": "map_onboarding_handler_fini", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^void map_onboarding_handler_fini(void)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(void)"}, {"_type": "tag", "name": "map_onboarding_handler_init", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^int map_onboarding_handler_init()$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "map_periodic_ap_capability_query_timer_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t map_periodic_ap_capability_query_timer_cb(UNUSED char* timer_id, UNUSED void *arg/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(UNUSED char * timer_id,UNUSED void * arg)"}, {"_type": "tag", "name": "map_periodic_topology_query_timer_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t map_periodic_topology_query_timer_cb(UNUSED char* timer_id, UNUSED void *arg)$/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(UNUSED char * timer_id,UNUSED void * arg)"}, {"_type": "tag", "name": "map_restart_topology_discovery", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^void map_restart_topology_discovery(const char *ifname)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(const char * ifname)"}, {"_type": "tag", "name": "map_stop_topology_discovery", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^void map_stop_topology_discovery(const char *ifname)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(const char * ifname)"}, {"_type": "tag", "name": "map_topology_discovery_timer_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static uint8_t map_topology_discovery_timer_cb(char* timer_id, void *arg)$/", "file": true, "language": "C", "typeref": "typename:uint8_t", "kind": "function", "signature": "(char * timer_id,void * arg)"}, {"_type": "tag", "name": "min", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^#define min(/", "file": true, "language": "C", "kind": "macro", "signature": "(a,b)"}, {"_type": "tag", "name": "send_topology_discovery", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "pattern": "/^static int send_topology_discovery(const char *ifname)$/", "file": true, "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const char * ifname)"}], "hash": "088ae52d039558c529f4da3fc84940f1", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/src/map_ctrl_onboarding_handler.c", "revision_history": [{"21587": ""}]}