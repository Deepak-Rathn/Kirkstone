{"is_source_file": true, "format": "C", "description": "This file implements a command-line interface (CLI) client for a DLNA media server using RBUS for inter-process communication. It includes functions for initializing the RPC connection, discovering media servers, retrieving media server details, browsing content on media servers, and cleanup.", "external_files": ["mediabrowser.h", "<rbus.h>", "<safec_lib.h>", "<stdlib.h>"], "external_methods": ["rbus_open", "rbusMethod_Invoke", "rbusObject_Init", "rbusObject_Release", "rbusObject_GetProperties", "rbusProperty_GetValue", "rbusProperty_GetNext", "rbusValue_ToString", "rbusValue_GetType", "rbusValue_GetInt32", "rbusValue_SetString", "rbusValue_SetInt32", "rbusValue_Init", "rbusValue_Release", "rbusObject_SetValue", "rbus_property_Count"], "published": ["InitializeRPC", "getDiscoveredMediaServers", "getDiscoveredMediaServerAt", "browseContentOnServer"], "classes": [], "methods": [{"name": "bool InitializeRPC()", "description": "Initializes the RBUS connection for the specified service consumer.", "scope": "", "scopeKind": ""}, {"name": "bool getMediaServer(rbusProperty_t outProps,char ** friendly_name,char ** udn)", "description": "Retrieves media server friendly name and UDN from RBUS properties.", "scope": "", "scopeKind": ""}, {"name": "bool getDiscoveredMediaServers(int * size)", "description": "Discovers available media servers and retrieves the count.", "scope": "", "scopeKind": ""}, {"name": "bool getDiscoveredMediaServerAt(int index,char ** friendlyName,char ** udn,int * err)", "description": "Retrieves details of a media server at a specified index.", "scope": "", "scopeKind": ""}, {"name": "bool browseContentOnServer(const char * server_udn,const char * path_id,int start_index,int max_entries,int * total_count,char ** content_list,int * err)", "description": "Browses content from a given media server UDN and path.", "scope": "", "scopeKind": ""}, {"name": "void cleanup()", "description": "Placeholder for cleanup operations (currently empty).", "scope": "", "scopeKind": ""}], "calls": ["rbus_open", "rbusMethod_Invoke", "rbusObject_Init", "rbusObject_Release", "rbusObject_GetProperties", "rbusProperty_GetValue", "rbusProperty_GetNext", "rbusValue_ToString", "rbusValue_GetType", "rbusValue_GetInt32", "rbusValue_SetString", "rbusValue_SetInt32", "rbusValue_Init", "rbusValue_Release", "rbusObject_SetValue", "rbus_property_Count"], "search-terms": ["dlna-rpc", "mbwsr_rpc_cli", "rbus.xupnp.dlna.client", "getDiscoveredMediaServers", "browseContentOnServer"], "state": 2, "file_id": 13010, "knowledge_revision": 25903, "git_revision": "", "ctags": [{"_type": "tag", "name": "BUFFER_SIZE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^#define BUFFER_SIZE /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "InitializeRPC", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^bool InitializeRPC()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "RBUS_XUPNP_SERVICE_CONSUMER", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^#define RBUS_XUPNP_SERVICE_CONSUMER /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "browseContentOnServer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^bool browseContentOnServer(const char * server_udn, const char * path_id, int start_index, $/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(const char * server_udn,const char * path_id,int start_index,int max_entries,int * total_count,char ** content_list,int * err)"}, {"_type": "tag", "name": "cleanup", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^void cleanup()$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "getDiscoveredMediaServerAt", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^bool getDiscoveredMediaServerAt(int index, char **friendlyName, char ** udn, int *err)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(int index,char ** friendlyName,char ** udn,int * err)"}, {"_type": "tag", "name": "getDiscoveredMediaServers", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^bool getDiscoveredMediaServers(int *size)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(int * size)"}, {"_type": "tag", "name": "getMediaServer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^static bool getMediaServer(rbusProperty_t outProps,  char ** friendly_name, char **udn)$/", "file": true, "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(rbusProperty_t outProps,char ** friendly_name,char ** udn)"}, {"_type": "tag", "name": "handle", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^rbusHandle_t handle;$/", "language": "C", "typeref": "typename:rbusHandle_t", "kind": "variable"}, {"_type": "tag", "name": "keyBuffer", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^char keyBuffer[BUFFER_SIZE] = {0};$/", "language": "C", "typeref": "typename:char[]", "kind": "variable"}, {"_type": "tag", "name": "rbus_response", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "pattern": "/^int rbus_response = RBUS_ERROR_SUCCESS;$/", "language": "C", "typeref": "typename:int", "kind": "variable"}], "hash": "4d949ee96874fae0d12768c99b1f5326", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/xupnp/src/dlna-rpc/mbwsr_rpc_cli.c", "fields": [{"name": "rbusHandle_t handle", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "char[] keyBuffer", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "int rbus_response", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"25903": ""}]}