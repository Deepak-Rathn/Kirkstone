{"is_source_file": true, "format": "C", "description": "This source file implements message queue handling for leak checking, including thread creation, message reception, and integration with the ASAN leak detection tool. It sets up message queues, processes messages, and triggers leak checks upon specific messages.", "external_files": ["<stdio.h>", "<stdlib.h>", "<string.h>", "<errno.h>", "<signal.h>", "<pthread.h>", "<unistd.h>", "<fcntl.h>", "<sys/stat.h>", "<sys/types.h>", "<mqueue.h>", "<sanitizer/lsan_interface.h>"], "external_methods": ["mq_open", "mq_close", "mq_unlink", "mq_receive", "pthread_create", "pthread_mutex_lock", "pthread_mutex_unlock", "pthread_attr_init", "pthread_attr_setstacksize", "getpid", "perror", "printf", "__lsan_do_recoverable_leak_check"], "published": ["exit_msgq", "create_msgq_leak_check"], "classes": [], "methods": [{"name": "void * thread_start(void * arg)", "description": "The thread function that creates the message queue, waits for messages, and triggers leak checks or logs based on the message content.", "scope": "", "scopeKind": ""}, {"name": "void exit_msgq()", "description": "Function called upon program termination to clean up and unlink the message queue.", "scope": "", "scopeKind": ""}, {"name": "void create_msgq_leak_check()", "description": "Function that initializes a thread to start message queue leak checking and monitoring.", "scope": "", "scopeKind": ""}], "calls": ["mq_open", "mq_close", "mq_unlink", "mq_receive", "pthread_create", "pthread_mutex_lock", "pthread_mutex_unlock", "perror", "printf", "__lsan_do_recoverable_leak_check"], "search-terms": ["message queue", "leak check", "lsan", "pthread", "mq_receive", "msgq"], "state": 2, "file_id": 106, "knowledge_revision": 13282, "git_revision": "", "ctags": [{"_type": "tag", "name": "MQ_MSG_SIZE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^#define MQ_MSG_SIZE /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "QUEUE_NAME_PREFIX", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^#define QUEUE_NAME_PREFIX /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "_GNU_SOURCE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^#define _GNU_SOURCE$/", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "create_msgq_leak_check", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^void create_msgq_leak_check() {$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "exit_msgq", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^void exit_msgq()$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^    char message[100];$/", "file": true, "language": "C", "typeref": "typename:char[100]", "kind": "member", "scope": "mq_msg", "scopeKind": "struct"}, {"_type": "tag", "name": "mq", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^mqd_t mq;$/", "language": "C", "typeref": "typename:mqd_t", "kind": "variable"}, {"_type": "tag", "name": "mq_msg", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^typedef struct mq_msg {$/", "file": true, "language": "C", "kind": "struct"}, {"_type": "tag", "name": "mq_msg", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^} mq_msg;$/", "file": true, "language": "C", "typeref": "struct:mq_msg", "kind": "typedef"}, {"_type": "tag", "name": "mq_mutex", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^pthread_mutex_t mq_mutex = PTHREAD_MUTEX_INITIALIZER;$/", "language": "C", "typeref": "typename:pthread_mutex_t", "kind": "variable"}, {"_type": "tag", "name": "seq", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^    int seq;$/", "file": true, "language": "C", "typeref": "typename:int", "kind": "member", "scope": "mq_msg", "scopeKind": "struct"}, {"_type": "tag", "name": "thread_start", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "pattern": "/^void * thread_start (void *arg) {$/", "language": "C", "typeref": "typename:void *", "kind": "function", "signature": "(void * arg)"}], "hash": "0456357927fe52123fba9062d380b3a8", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "meta-rdk/recipes-test/leakcheck-msg/files/msgq_receive.c", "fields": [{"name": "char[100] message", "scope": "mq_msg", "scopeKind": "struct", "description": "unavailable"}, {"name": "mqd_t mq", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "pthread_mutex_t mq_mutex", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "int seq", "scope": "mq_msg", "scopeKind": "struct", "description": "unavailable"}], "revision_history": [{"13282": ""}]}