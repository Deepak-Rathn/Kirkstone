{"is_source_file": true, "format": "C", "description": "This file appears to be part of a larger codebase implementing a topology tree for network elements. It includes functions for initializing, inserting, displaying, and managing nodes within a topology tree structure, specifically related to network devices identified by MAC addresses. The code primarily deals with managing tree nodes, traversing the topology, and printing tree information.", "external_files": ["map_topology_tree.h", "map_utils.h", "1905_platform.h"], "external_methods": ["list_get_size", "log_lib_e", "map_dm_create_ale", "get_ktree_node", "ktree_node", "ktree_set_color", "ktree_add_node", "ktree_remove_node", "ktree_is_leaf", "get_ale_from_tree", "each_child_in", "pop_object", "delete_array_list", "free_children_iter", "make_ale_orphaned", "map_dm_ale_set_upstream_info", "acu_mac_to_string"], "published": ["map_get_child_count", "init_topology_tree", "create_topology_tree_node", "get_root_ale_node", "topology_tree_insert", "get_parent_ale_node", "disassemble_tree", "is_parent_of", "remove_topology_tree_node", "map_get_topology_tree_height", "map_get_height_of"], "classes": [], "methods": [{"name": "int32_t map_get_child_count(map_ale_info_t * root_node)", "description": "Returns the number of child nodes for a given root node.", "scope": "", "scopeKind": ""}, {"name": "int8_t init_topology_tree(uint8_t * root_al_mac)", "description": "Initializes the topology tree with a given root MAC address.", "scope": "", "scopeKind": ""}, {"name": "int8_t create_topology_tree_node(map_ale_info_t * ale_node,tree_node_type_t type)", "description": "Creates a new tree node representing an ALE node of a specified type.", "scope": "", "scopeKind": ""}, {"name": "map_ale_info_t * get_root_ale_node()", "description": "Returns the static root ALE node of the topology.", "scope": "", "scopeKind": ""}, {"name": "int8_t topology_tree_insert(map_ale_info_t * parent,map_ale_info_t * child)", "description": "Inserts a child node into a parent node within the topology tree.", "scope": "", "scopeKind": ""}, {"name": "map_ale_info_t * get_parent_ale_node(map_ale_info_t * child_ale)", "description": "Retrieves the parent ALE node of a specified child node.", "scope": "", "scopeKind": ""}, {"name": "void disassemble_tree(map_ale_info_t * root_node)", "description": "Detaches a subtree starting from the provided root node, making all nodes orphaned.", "scope": "", "scopeKind": ""}, {"name": "int8_t is_parent_of(map_ale_info_t * parent,map_ale_info_t * child)", "description": "Checks if one node is the parent of another.", "scope": "", "scopeKind": ""}, {"name": "void remove_topology_tree_node(map_ale_info_t * ale_node)", "description": "Removes a node from the topology tree, disassembling it first.", "scope": "", "scopeKind": ""}, {"name": "int32_t map_get_topology_tree_height()", "description": "Returns the maximum height of the topology tree.", "scope": "", "scopeKind": ""}, {"name": "int32_t map_get_height_of(map_ale_info_t * ale_node)", "description": "Returns the height of a specific ALE node within the topology tree.", "scope": "", "scopeKind": ""}, {"name": "void display_topology_tree(k_tree_node * parent_node,map_printf_cb_t print_cb)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void dump_topology_tree(map_printf_cb_t print_cb)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void dump_topology_tree_by_level(uint32_t level,map_printf_cb_t print_cb)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "map_ale_info_t * fetch_and_free_child_iter(list_iterator_t * iter)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "char * get_node_type_str(tree_node_type_t type)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void make_all_child_nodes_orphan(k_tree_node * self_node)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void print_node_info(map_ale_info_t * child,uint32_t height,uint32_t color,map_printf_cb_t print_cb)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["list_get_size", "log_lib_e", "map_dm_create_ale", "get_ktree_node", "ktree_node", "ktree_set_color", "ktree_add_node", "ktree_remove_node", "ktree_is_leaf", "get_ale_from_tree", "each_child_in", "pop_object", "delete_array_list", "free_children_iter", "make_ale_orphaned", "map_dm_ale_set_upstream_info", "acu_mac_to_string", "ktree_height", "ktree_color", "get_zero_mac"], "search-terms": ["topology_tree", "ALE", "map_ale_info_t", "ktree_node", "map_topology_tree", "disassemble_tree", "create_topology_tree_node", "map_get_child_count", "map_get_topology_tree_height"], "state": 2, "file_id": 8605, "knowledge_revision": 21641, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOG_TAG", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^#define LOG_TAG /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "create_topology_tree_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int8_t create_topology_tree_node(map_ale_info_t* ale_node, tree_node_type_t type)$/", "language": "C", "typeref": "typename:int8_t", "kind": "function", "signature": "(map_ale_info_t * ale_node,tree_node_type_t type)"}, {"_type": "tag", "name": "disassemble_tree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void disassemble_tree(map_ale_info_t* root_node)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(map_ale_info_t * root_node)"}, {"_type": "tag", "name": "display_topology_tree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void display_topology_tree(k_tree_node* parent_node, map_printf_cb_t print_cb)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(k_tree_node * parent_node,map_printf_cb_t print_cb)"}, {"_type": "tag", "name": "dump_topology_tree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void dump_topology_tree(map_printf_cb_t print_cb)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(map_printf_cb_t print_cb)"}, {"_type": "tag", "name": "dump_topology_tree_by_level", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void dump_topology_tree_by_level(uint32_t level, map_printf_cb_t print_cb)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(uint32_t level,map_printf_cb_t print_cb)"}, {"_type": "tag", "name": "fetch_and_free_child_iter", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^map_ale_info_t* fetch_and_free_child_iter(list_iterator_t* iter)$/", "language": "C", "typeref": "typename:map_ale_info_t *", "kind": "function", "signature": "(list_iterator_t * iter)"}, {"_type": "tag", "name": "g_root_ale_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^static map_ale_info_t *g_root_ale_node;$/", "file": true, "language": "C", "typeref": "typename:map_ale_info_t *", "kind": "variable"}, {"_type": "tag", "name": "g_root_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^static k_tree_node* g_root_node;$/", "file": true, "language": "C", "typeref": "typename:k_tree_node *", "kind": "variable"}, {"_type": "tag", "name": "get_node_type_str", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^static char* get_node_type_str(tree_node_type_t type)$/", "file": true, "language": "C", "typeref": "typename:char *", "kind": "function", "signature": "(tree_node_type_t type)"}, {"_type": "tag", "name": "get_parent_ale_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^map_ale_info_t* get_parent_ale_node(map_ale_info_t* child_ale)$/", "language": "C", "typeref": "typename:map_ale_info_t *", "kind": "function", "signature": "(map_ale_info_t * child_ale)"}, {"_type": "tag", "name": "get_root_ale_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^map_ale_info_t* get_root_ale_node()$/", "language": "C", "typeref": "typename:map_ale_info_t *", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "init_topology_tree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int8_t init_topology_tree(uint8_t *root_al_mac)$/", "language": "C", "typeref": "typename:int8_t", "kind": "function", "signature": "(uint8_t * root_al_mac)"}, {"_type": "tag", "name": "is_parent_of", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int8_t is_parent_of(map_ale_info_t* parent, map_ale_info_t* child)$/", "language": "C", "typeref": "typename:int8_t", "kind": "function", "signature": "(map_ale_info_t * parent,map_ale_info_t * child)"}, {"_type": "tag", "name": "make_all_child_nodes_orphan", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void make_all_child_nodes_orphan(k_tree_node* self_node)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(k_tree_node * self_node)"}, {"_type": "tag", "name": "map_get_child_count", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int32_t map_get_child_count(map_ale_info_t* root_node)$/", "language": "C", "typeref": "typename:int32_t", "kind": "function", "signature": "(map_ale_info_t * root_node)"}, {"_type": "tag", "name": "map_get_height_of", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int32_t map_get_height_of(map_ale_info_t* ale_node)$/", "language": "C", "typeref": "typename:int32_t", "kind": "function", "signature": "(map_ale_info_t * ale_node)"}, {"_type": "tag", "name": "map_get_topology_tree_height", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int32_t map_get_topology_tree_height()$/", "language": "C", "typeref": "typename:int32_t", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "print_node_info", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void print_node_info(map_ale_info_t* child, uint32_t height, uint32_t color, map_printf_cb_t pri/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(map_ale_info_t * child,uint32_t height,uint32_t color,map_printf_cb_t print_cb)"}, {"_type": "tag", "name": "remove_topology_tree_node", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^void remove_topology_tree_node(map_ale_info_t* ale_node)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(map_ale_info_t * ale_node)"}, {"_type": "tag", "name": "topology_tree_insert", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "pattern": "/^int8_t topology_tree_insert(map_ale_info_t* parent, map_ale_info_t* child)$/", "language": "C", "typeref": "typename:int8_t", "kind": "function", "signature": "(map_ale_info_t * parent,map_ale_info_t * child)"}], "hash": "fa90ef2926e0d32a3da42ca2e371997a", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/RdkEasyMeshController/source/libplatform/src/map_topology_tree.c", "fields": [{"name": "map_ale_info_t * g_root_ale_node", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "k_tree_node * g_root_node", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21641": ""}]}