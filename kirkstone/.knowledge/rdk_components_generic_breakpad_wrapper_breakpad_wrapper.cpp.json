{"is_source_file": true, "format": "C++", "description": "This file is a C++ source file implementing a wrapper around the Google Breakpad crash reporting library. It contains functions to initialize the exception handler, add memory mappings, and define callback behavior for memory dumps. It sets up the Breakpad exception handler, handles configuration via environment variables and runtime checks, and registers the handler during static initialization.", "external_files": ["breakpad_wrapper.h", "client/linux/handler/exception_handler.h"], "external_methods": ["google_breakpad::ExceptionHandler::AddMappingInfo", "google_breakpad::ExceptionHandler::ExceptionHandler", "google_breakpad::MinidumpDescriptor", "descriptor.path()"], "published": [], "classes": [{"name": "google_breakpad::ExceptionHandler", "description": "Class handling crash dump generation and exception handling in Breakpad."}], "methods": [{"name": "void breakpad_AddMappingInfo(char * name,char * identifier,size_t identifier_size,uintptr_t start_address,size_t mapping_size,size_t file_offset)", "description": "Adds memory mapping information to the Breakpad exception handler, linking a memory range with its name and identifier.", "scope": "", "scopeKind": ""}, {"name": "void breakpad_ExceptionHandler()", "description": "Initializes the Breakpad exception handler with configuration based on environment variables and build flags.", "scope": "", "scopeKind": ""}, {"name": "void breakpad_autoconstruct(void)", "description": "Function marked with constructor attribute to automatically initialize the breakpad exception handler at startup.", "scope": "", "scopeKind": ""}, {"name": "bool breakpadDumpCallback(const google_breakpad::MinidumpDescriptor & descriptor,void * context,bool succeeded)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["printf", "fopen", "fclose", "memcpy", "std::min", "getenv", "new google_breakpad::ExceptionHandler", "excHandler->AddMappingInfo"], "search-terms": ["Breakpad", "breakpad_ExceptionHandler", "breakpad_autoconstruct", "crash dump", "exception handler"], "state": 2, "file_id": 12656, "knowledge_revision": 25555, "git_revision": "", "ctags": [{"_type": "tag", "name": "breakpadDumpCallback", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "pattern": "/^static bool breakpadDumpCallback(const google_breakpad::MinidumpDescriptor& descriptor,$/", "file": true, "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const google_breakpad::MinidumpDescriptor & descriptor,void * context,bool succeeded)"}, {"_type": "tag", "name": "breakpad_AddMappingInfo", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "pattern": "/^void breakpad_AddMappingInfo(char *name, char *identifier,$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(char * name,char * identifier,size_t identifier_size,uintptr_t start_address,size_t mapping_size,size_t file_offset)"}, {"_type": "tag", "name": "breakpad_ExceptionHandler", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "pattern": "/^void breakpad_ExceptionHandler()$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "breakpad_autoconstruct", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "pattern": "/^void __attribute__ ((constructor)) breakpad_autoconstruct(void)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(void)"}, {"_type": "tag", "name": "excHandler", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "pattern": "/^static google_breakpad::ExceptionHandler* excHandler = NULL;$/", "file": true, "language": "C++", "typeref": "typename:google_breakpad::ExceptionHandler *", "kind": "variable"}], "hash": "5a84eaa20817143a146f40a6f62c6289", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/breakpad_wrapper/breakpad_wrapper.cpp", "fields": [{"name": "google_breakpad::ExceptionHandler * excHandler", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"25555": ""}]}