{"is_source_file": true, "format": "C", "description": "Header file defining the interface for event consumer functions in a multicast event listening system. Includes function prototypes for starting/stopping listeners, registering thread pools, processing raw events, and collecting stats. Defines a callback type for event handling.", "external_files": ["<cjson/cJSON.h>", "<icIpc/ipcStockMessagesPojo.h>", "<icConcurrent/threadPool.h>"], "external_methods": ["cJSON *cJSON_CreateObject()", "cJSON_Delete(cJSON *)", "startEventListener(uint16_t, eventListenerAdapter)", "stopEventListener(uint16_t)", "shutdownEventListener()", "collectEventStatistics(runtimeStatsPojo *, bool)", "registerServiceSpecificEventHandlerThreadPool(uint16_t, icThreadPool *)", "unregisterServiceSpecificEventHandlerThreadPool(uint16_t)", "directlyProcessRawEvent(const char *)"], "published": ["startEventListener", "stopEventListener", "shutdownEventListener", "collectEventStatistics", "registerServiceSpecificEventHandlerThreadPool", "unregisterServiceSpecificEventHandlerThreadPool", "directlyProcessRawEvent"], "classes": [], "methods": [{"name": "startEventListener", "description": "Registers a handler to be notified of events from a specified service ID."}, {"name": "stopEventListener", "description": "Unregisters handlers for a specific service ID, cleaning up if none remain."}, {"name": "shutdownEventListener", "description": "Forcefully stops event listening and closes associated resources, typically during shutdown."}, {"name": "collectEventStatistics", "description": "Gathers runtime statistics about event listeners into a provided container."}, {"name": "registerServiceSpecificEventHandlerThreadPool", "description": "Assigns a thread pool to handle events for a specific service ID."}, {"name": "unregisterServiceSpecificEventHandlerThreadPool", "description": "Removes the thread pool assigned to a specific service ID."}, {"name": "directlyProcessRawEvent", "description": "Injects a raw event JSON string directly into the event processing system."}], "calls": ["cJSON *cJSON_CreateObject()", "cJSON_Delete(cJSON *)"], "search-terms": ["eventConsumer", "multicast events", "eventListenerAdapter", "serviceIdNum", "raw json event injection", "threadPool event handling"], "state": 2, "file_id": 749, "knowledge_revision": 13914, "git_revision": "", "ctags": [{"_type": "tag", "name": "EVENTCONSUMER_H", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/public/icIpc/eventConsumer.h", "pattern": "/^#define EVENTCONSUMER_H$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "EVENTCONSUMER_SUBSCRIBE_ALL", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/public/icIpc/eventConsumer.h", "pattern": "/^#define EVENTCONSUMER_SUBSCRIBE_ALL /", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "eventListenerAdapter", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/public/icIpc/eventConsumer.h", "pattern": "/^typedef void (*eventListenerAdapter)(int32_t eventCode, int32_t eventValue, cJSON *jsonPayload);$/", "language": "C++", "typeref": "typename:void (*)(int32_t eventCode,int32_t eventValue,cJSON * jsonPayload)", "kind": "typedef"}], "hash": "ffd2e23fbc1bbaf4576085c89b9e6c2d", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/ipc/c/public/icIpc/eventConsumer.h", "revision_history": [{"13914": ""}]}