{"is_source_file": true, "format": "C++", "description": "This file contains implementation code related to process information management, specifically reading process details from the /proc filesystem, managing process maps, and providing process matching utilities. The functions involve reading process status and command line data, and functions to find child processes by name or process ID.", "external_files": ["lxccpid/pidmap.h", "lxccpid/lxccpiddebug.h", "<cstring>", "<algorithm>", "<sys/stat.h>", "<dirent.h>", "<fstream>"], "external_methods": ["strspn", "strlen", "isspace", "to_string", "strtoul"], "published": ["pidmap::loadProcMap", "pidmap::findProcess", "pidmap::findChild"], "classes": [], "methods": [{"name": "bool is_number(const char * s_str)", "description": "Checks if a given C-string consists solely of digits, indicating it is a number.", "scope": "", "scopeKind": ""}, {"name": "std::string & trim(std::string & str)", "description": "Removes trailing whitespace characters from a std::string.", "scope": "", "scopeKind": ""}, {"name": "bool readFromFile(unsigned int pid,pidmap::proc_map_t & proc_map)", "description": "Reads process information from /proc/[pid]/stat and /proc/[pid]/cmdline, populating the process map with process details.", "scope": "", "scopeKind": ""}, {"name": "bool compare(pidmap::proc_t & proc,string child_name)", "description": "Compares a process's command line with a given name, supporting wildcard at the end.", "scope": "", "scopeKind": ""}, {"name": "__anonfcfbff030102(char ch)", "scope": "trim", "scopeKind": "function", "description": "unavailable"}, {"name": "bool findChild(proc_map_t & proc_map,pid_t pid,string child_name,pid_t & child_pid,int level)", "scope": "pidmap", "scopeKind": "namespace", "description": "unavailable"}, {"name": "bool findProcess(proc_map_t & proc_map,pid_t & pid,const string & name)", "scope": "pidmap", "scopeKind": "namespace", "description": "unavailable"}, {"name": "bool loadProcMap(proc_map_t & proc_map)", "scope": "pidmap", "scopeKind": "namespace", "description": "unavailable"}], "calls": ["ifstream::operator>>", "ifstream::good", "ifstream::eof", "opendir", "readdir", "closedir", "strtoul", "findChild", "loadProcMap", "findProcess"], "search-terms": ["pid", "process", "/proc", "loadProcMap", "findChild", "cmdline", "process map", "wildcard match"], "state": 2, "file_id": 12931, "knowledge_revision": 25837, "git_revision": "", "ctags": [{"_type": "tag", "name": "__anonfcfbff030102", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^                            [](char ch) { return !std::isspace<char>(ch, std::locale::classic())/", "file": true, "language": "C++", "kind": "function", "signature": "(char ch) ", "scope": "trim", "scopeKind": "function"}, {"_type": "tag", "name": "compare", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^bool compare(pidmap::proc_t& proc, string child_name) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(pidmap::proc_t & proc,string child_name)"}, {"_type": "tag", "name": "findChild", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^    bool findChild(proc_map_t &proc_map, pid_t pid, string child_name, pid_t &child_pid,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(proc_map_t & proc_map,pid_t pid,string child_name,pid_t & child_pid,int level)", "scope": "pidmap", "scopeKind": "namespace"}, {"_type": "tag", "name": "findProcess", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^    bool findProcess(proc_map_t &proc_map, pid_t &pid, const string &name) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(proc_map_t & proc_map,pid_t & pid,const string & name)", "scope": "pidmap", "scopeKind": "namespace"}, {"_type": "tag", "name": "is_number", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^static bool is_number(const char *s_str) {$/", "file": true, "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const char * s_str)"}, {"_type": "tag", "name": "loadProcMap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^    bool loadProcMap(proc_map_t &proc_map) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(proc_map_t & proc_map)", "scope": "pidmap", "scopeKind": "namespace"}, {"_type": "tag", "name": "pidmap", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^namespace pidmap {$/", "file": true, "language": "C++", "kind": "namespace"}, {"_type": "tag", "name": "readFromFile", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^static bool readFromFile(unsigned int pid, pidmap::proc_map_t &proc_map) {$/", "file": true, "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(unsigned int pid,pidmap::proc_map_t & proc_map)"}, {"_type": "tag", "name": "trim", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "pattern": "/^static std::string &trim(std::string &str) {$/", "file": true, "language": "C++", "typeref": "typename:std::string &", "kind": "function", "signature": "(std::string & str)"}], "hash": "863c6fdaee5dabe8ec21ec7c40e02fb6", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/lxccpid/lxccpid/pidmap.cpp", "revision_history": [{"25837": ""}]}