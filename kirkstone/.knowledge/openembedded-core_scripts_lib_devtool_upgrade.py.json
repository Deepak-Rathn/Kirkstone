{"is_source_file": true, "format": "Python", "description": "This Python script implements the 'upgrade' command as part of the devtool plugin system, specifically for handling recipe upgrades in a build environment such as Yocto. It provides functions for extracting source code, creating new recipes, handling source versioning, and managing source tree modifications. The script also registers subcommands for upgrade operations, monitoring latest versions, and checking upgrade status.", "external_files": ["scriptutils", "bb", "oe.recipeutils", "devtool"], "external_methods": ["bb.process.run", "bb.utils.mkdirhier", "oe.recipeutils.get_var_files", "oe.recipeutils.copy_recipe_files", "oe.recipeutils.get_recipe_patches", "oe.recipeutils.split_var_value", "oe.recipeutils.patch_recipe", "oe.recipeutils.get_recipe_upstream_version", "oe.recipeutils.get_recipe_upgrade_status", "setup_tinfoil", "parse_recipe", "standard.get_default_srctree", "standard._check_compatible_recipe", "standard._extract_source", "standard._add_md5", "standard._get_srctree"], "published": ["upgrade", "latest_version", "check_upgrade_status"], "classes": [], "methods": [{"name": "_run(cmd, cwd='')", "description": "Executes a shell command with optional working directory; logs execution at debug level.", "scope": "", "scopeKind": ""}, {"name": "_get_srctree(tmpdir)", "description": "Determines the source tree directory, adjusting if necessary based on subdirectories.", "scope": "", "scopeKind": ""}, {"name": "_copy_source_code(orig, dest)", "description": "Copies source files from original to destination directory, moving files appropriately.", "scope": "", "scopeKind": ""}, {"name": "_remove_patch_dirs(recipefolder)", "description": "Removes all patch directories within a recipe folder.", "scope": "", "scopeKind": ""}, {"name": "_recipe_contains(rd, var)", "description": "Checks if a recipe's FILE variable contains a specific variable in its files.", "scope": "", "scopeKind": ""}, {"name": "_rename_recipe_dirs(oldpv, newpv, path)", "description": "Renames directories and inc files in the recipe path that contain a specific version string.", "scope": "", "scopeKind": ""}, {"name": "_rename_recipe_file(oldrecipe, bpn, oldpv, newpv, path)", "description": "Renames a recipe file if its filename contains the old version string.", "scope": "", "scopeKind": ""}, {"name": "_rename_recipe_files(oldrecipe, bpn, oldpv, newpv, path)", "description": "Performs directory and filename renaming for recipes based on version.", "scope": "", "scopeKind": ""}, {"name": "_write_append(rc, srctree, same_dir, no_same_dir, rev, copied, workspace, d)", "description": "Creates and writes to a bbappend file for the recipe, adding source path and revision info.", "scope": "", "scopeKind": ""}, {"name": "_cleanup_on_error(rd, srctree)", "description": "Removes temporary and source directories in case of errors during upgrade.", "scope": "", "scopeKind": ""}, {"name": "_upgrade_error(e, rd, srctree, keep_failure=False, extramsg=None)", "description": "Handles errors during upgrade, cleaning up if not keeping failure files, and logs error details.", "scope": "", "scopeKind": ""}, {"name": "_get_uri(rd)", "description": "Extracts the source URI and revision from a recipe.", "scope": "", "scopeKind": ""}, {"name": "_extract_new_source(newpv, srctree, no_patch, srcrev, srcbranch, branch, keep_temp, tinfoil, rd)", "description": "Fetches or checks out source code for a new version, handling different source control types.", "scope": "", "scopeKind": ""}, {"name": "_add_license_diff_to_recipe(path, diff)", "description": "Adds license checksum difference comments to the recipe file.", "scope": "", "scopeKind": ""}, {"name": "_create_new_recipe(newpv, md5, sha256, srcrev, srcbranch, srcsubdir_old, srcsubdir_new, workspace, tinfoil, rd, license_diff, new_licenses, srctree, keep_failure)", "description": "Creates a new recipe in the workspace with updated source info and optional license diff.", "scope": "", "scopeKind": ""}, {"name": "_check_git_config()", "description": "Verifies that git user.name and user.email are set globally.", "scope": "", "scopeKind": ""}, {"name": "_extract_licenses(srcpath, recipe_licenses)", "description": "Reads license files and computes md5 hashes for license validation.", "scope": "", "scopeKind": ""}, {"name": "_generate_license_diff(old_licenses, new_licenses)", "description": "Generates a diff of license texts if license files have changed.", "scope": "", "scopeKind": ""}, {"name": "upgrade(args, config, basepath, workspace)", "description": "Main function for handling the 'upgrade' command; parses args, initiates source extraction, recipe creation, and license handling.", "scope": "", "scopeKind": ""}, {"name": "latest_version(args, config, basepath, workspace)", "description": "Handles querying the latest upstream version of a recipe.", "scope": "", "scopeKind": ""}, {"name": "check_upgrade_status(args, config, basepath, workspace)", "description": "Checks and reports the upgrade status of recipes, including whether updates are available.", "scope": "", "scopeKind": ""}, {"name": "register_commands(subparsers, context)", "description": "Registers subcommands for 'upgrade', 'latest-version', and 'check-upgrade-status' in the CLI parser.", "scope": "", "scopeKind": ""}, {"name": "__run(cmd)", "scope": "_extract_new_source", "scopeKind": "function", "description": "unavailable"}, {"name": "getconfig(name)", "scope": "_check_git_config", "scopeKind": "function", "description": "unavailable"}], "calls": ["logger.debug", "shutil.move", "shutil.rmtree", "os.path.join", "os.path.abspath", "os.path.relpath", "os.makedirs", "shutil.move", "shutil.rmtree", "shutil.rmtree", "shutil.move", "bb.utils.rename", "os.path.basename", "os.path.splitext", "os.path.isdir", "os.remove", "os.path.relpath", "oe.recipeutils.get_recipe_patches", "oe.recipeutils.get_var_files", "oe.recipeutils.split_var_value", "oe.recipeutils.patch_recipe", "oe.recipeutils.get_recipe_upstream_version", "oe.recipeutils.get_recipe_upgrade_status", "setup_tinfoil", "parse_recipe", "standard.get_default_srctree", "standard._check_compatible_recipe", "standard._extract_source", "standard._add_md5", "bb.process.run", "bb.utils.mkdirhier", "oe.recipeutils.copy_recipe_files", "oe.recipeutils.get_recipe_patches", "oe.recipeutils.split_var_value", "bb.fetch2.decodeurl", "bb.fetch2.encodeurl", "bb.fetch2.decodeurl", "bb.fetch2.encodeurl", "bb.process.ExecutionError", "bb.ui.knotty.BBProgress", "logger.info", "logger.warning", "logger.error"], "search-terms": ["devtool upgrade", "recipe utils", "source code upgrade", "fetch url", "patch application", "license checksum", "recipe creation", "version extraction", "git checkout", "source tree", "recipe utils", "PREFERRED_VERSION", "LIC_FILES_CHKSUM", "SRC_URI", "bbappend"], "state": 2, "file_id": 1469, "knowledge_revision": 14626, "git_revision": "", "ctags": [{"_type": "tag", "name": "__run", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^    def __run(cmd):$/", "file": true, "language": "Python", "kind": "function", "signature": "(cmd)", "scope": "_extract_new_source", "scopeKind": "function"}, {"_type": "tag", "name": "_add_license_diff_to_recipe", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _add_license_diff_to_recipe(path, diff):$/", "language": "Python", "kind": "function", "signature": "(path, diff)"}, {"_type": "tag", "name": "_check_git_config", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _check_git_config():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_cleanup_on_error", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _cleanup_on_error(rd, srctree):$/", "language": "Python", "kind": "function", "signature": "(rd, srctree)"}, {"_type": "tag", "name": "_copy_source_code", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _copy_source_code(orig, dest):$/", "language": "Python", "kind": "function", "signature": "(orig, dest)"}, {"_type": "tag", "name": "_create_new_recipe", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _create_new_recipe(newpv, md5, sha256, srcrev, srcbranch, srcsubdir_old, srcsubdir_new, work/", "language": "Python", "kind": "function", "signature": "(newpv, md5, sha256, srcrev, srcbranch, srcsubdir_old, srcsubdir_new, workspace, tinfoil, rd, license_diff, new_licenses, srctree, keep_failure)"}, {"_type": "tag", "name": "_extract_licenses", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _extract_licenses(srcpath, recipe_licenses):$/", "language": "Python", "kind": "function", "signature": "(srcpath, recipe_licenses)"}, {"_type": "tag", "name": "_extract_new_source", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _extract_new_source(newpv, srctree, no_patch, srcrev, srcbranch, branch, keep_temp, tinfoil,/", "language": "Python", "kind": "function", "signature": "(newpv, srctree, no_patch, srcrev, srcbranch, branch, keep_temp, tinfoil, rd)"}, {"_type": "tag", "name": "_generate_license_diff", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _generate_license_diff(old_licenses, new_licenses):$/", "language": "Python", "kind": "function", "signature": "(old_licenses, new_licenses)"}, {"_type": "tag", "name": "_get_srctree", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _get_srctree(tmpdir):$/", "language": "Python", "kind": "function", "signature": "(tmpdir)"}, {"_type": "tag", "name": "_get_uri", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _get_uri(rd):$/", "language": "Python", "kind": "function", "signature": "(rd)"}, {"_type": "tag", "name": "_recipe_contains", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _recipe_contains(rd, var):$/", "language": "Python", "kind": "function", "signature": "(rd, var)"}, {"_type": "tag", "name": "_remove_patch_dirs", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _remove_patch_dirs(recipefolder):$/", "language": "Python", "kind": "function", "signature": "(recipefolder)"}, {"_type": "tag", "name": "_rename_recipe_dirs", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _rename_recipe_dirs(oldpv, newpv, path):$/", "language": "Python", "kind": "function", "signature": "(oldpv, newpv, path)"}, {"_type": "tag", "name": "_rename_recipe_file", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _rename_recipe_file(oldrecipe, bpn, oldpv, newpv, path):$/", "language": "Python", "kind": "function", "signature": "(oldrecipe, bpn, oldpv, newpv, path)"}, {"_type": "tag", "name": "_rename_recipe_files", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _rename_recipe_files(oldrecipe, bpn, oldpv, newpv, path):$/", "language": "Python", "kind": "function", "signature": "(oldrecipe, bpn, oldpv, newpv, path)"}, {"_type": "tag", "name": "_run", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _run(cmd, cwd=''):$/", "language": "Python", "kind": "function", "signature": "(cmd, cwd='')"}, {"_type": "tag", "name": "_upgrade_error", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _upgrade_error(e, rd, srctree, keep_failure=False, extramsg=None):$/", "language": "Python", "kind": "function", "signature": "(e, rd, srctree, keep_failure=False, extramsg=None)"}, {"_type": "tag", "name": "_write_append", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def _write_append(rc, srctree, same_dir, no_same_dir, rev, copied, workspace, d):$/", "language": "Python", "kind": "function", "signature": "(rc, srctree, same_dir, no_same_dir, rev, copied, workspace, d)"}, {"_type": "tag", "name": "check_upgrade_status", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def check_upgrade_status(args, config, basepath, workspace):$/", "language": "Python", "kind": "function", "signature": "(args, config, basepath, workspace)"}, {"_type": "tag", "name": "devtool_path", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^devtool_path = os.path.dirname(os.path.realpath(__file__)) + '\\/..\\/..\\/..\\/meta\\/lib'$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "getconfig", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^    def getconfig(name):$/", "file": true, "language": "Python", "kind": "function", "signature": "(name)", "scope": "_check_git_config", "scopeKind": "function"}, {"_type": "tag", "name": "latest_version", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def latest_version(args, config, basepath, workspace):$/", "language": "Python", "kind": "function", "signature": "(args, config, basepath, workspace)"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^logger = logging.getLogger('devtool')$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "register_commands", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def register_commands(subparsers, context):$/", "language": "Python", "kind": "function", "signature": "(subparsers, context)"}, {"_type": "tag", "name": "upgrade", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/scripts/lib/devtool/upgrade.py", "pattern": "/^def upgrade(args, config, basepath, workspace):$/", "language": "Python", "kind": "function", "signature": "(args, config, basepath, workspace)"}], "hash": "7867d029fc7d6a86a3beadd4363cf6ab", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/scripts/lib/devtool/upgrade.py", "fields": [{"name": "devtool_path = os.path.dirname(os.path.realpath(__file__)) + '\\/..\\/..\\/..\\/meta\\/lib'", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger('devtool')", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"14626": ""}]}