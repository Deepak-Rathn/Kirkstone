{"is_source_file": true, "format": "Python", "description": "This file contains a set of automated test cases for the Weston component using the oeqa testing framework. It primarily tests whether Weston is running properly, initializes Weston with a new Wayland compositor, and gathers system info related to Weston and Wayland. The class WestonTest includes methods for process management, starting Weston, and verifying its operation.", "external_files": ["oeqa/runtime/case", "oeqa/core/decorator/depends", "oeqa/core/decorator/data", "oeqa/runtime/decorator/package"], "external_methods": ["self.tc.target.run", "self.target.run", "self.assertEqual", "self.assertTrue"], "published": ["WestonTest"], "classes": [{"name": "WestonTest", "description": "Test class for verifying Weston and Wayland functionalities within the oeqa testing framework."}], "methods": [{"name": "tearDownClass(cls)", "description": "Class method to perform cleanup after all tests are executed, specifically removing Weston log files.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "test_weston_running(self)", "description": "Test to verify that Weston desktop shell is currently running.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "get_processes_of(self, target, error_msg)", "description": "Helper to retrieve process IDs of a given target process.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "get_weston_command(self, cmd)", "description": "Constructs the command to launch Weston with specific environment variables.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "run_weston_init(self)", "description": "Starts Weston, either via systemd or directly using openvt, depending on the init manager.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "get_new_wayland_processes(self, existing_wl_processes)", "description": "Polls and detects new Weston Wayland processes after startup attempts.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "test_wayland_info(self)", "description": "Verifies that wayland-info can be run and returns system info about Wayland.", "scope": "WestonTest", "scopeKind": "class"}, {"name": "test_weston_can_initialize_new_wayland_compositor(self)", "description": "Test that initializes Weston with a new Wayland compositor and verifies process creation.", "scope": "WestonTest", "scopeKind": "class"}], "calls": ["self.target.run", "self.tc.target.run", "self.assertEqual", "self.assertTrue"], "search-terms": ["Weston", "Wayland", "oeqa", "runtime", "weston-desktop-shell", "systemd", "weston-ptest"], "state": 2, "file_id": 1976, "knowledge_revision": 15118, "git_revision": "", "ctags": [{"_type": "tag", "name": "WestonTest", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^class WestonTest(OERuntimeTestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "get_new_wayland_processes", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def get_new_wayland_processes(self, existing_wl_processes):$/", "language": "Python", "kind": "member", "signature": "(self, existing_wl_processes)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "get_processes_of", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def get_processes_of(self, target, error_msg):$/", "language": "Python", "kind": "member", "signature": "(self, target, error_msg)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "get_weston_command", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def get_weston_command(self, cmd):$/", "language": "Python", "kind": "member", "signature": "(self, cmd)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "run_weston_init", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def run_weston_init(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "tearDownClass", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def tearDownClass(cls):$/", "language": "Python", "kind": "member", "signature": "(cls)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_wayland_info", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def test_wayland_info(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_weston_can_initialize_new_wayland_compositor", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def test_weston_can_initialize_new_wayland_compositor(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_weston_running", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    def test_weston_running(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "WestonTest", "scopeKind": "class"}, {"_type": "tag", "name": "weston_log_file", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "pattern": "/^    weston_log_file = '\\/tmp\\/weston-2.log'$/", "language": "Python", "kind": "variable", "scope": "WestonTest", "scopeKind": "class"}], "hash": "0fa8babf3733332e5b30a721117e8fa7", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/meta/lib/oeqa/runtime/cases/weston.py", "fields": [{"name": "weston_log_file = '\\/tmp\\/weston-2.log'", "scope": "WestonTest", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"15118": ""}]}