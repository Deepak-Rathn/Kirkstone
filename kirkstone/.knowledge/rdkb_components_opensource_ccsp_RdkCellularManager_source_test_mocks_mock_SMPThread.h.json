{"is_source_file": true, "format": "C++ header file", "description": "This file defines a mock interface for SMPThread functionalities used in unit testing, including mock methods for threading, cellular management, and network operations.", "external_files": ["<gtest/gtest.h>", "<gmock/gmock.h>", "<pthread.h>", "cellularmgr_utils.h", "cellularmgr_cellular_apis.h", "cellular_hal.h", "cellularmgr_rbus_events.h"], "external_methods": ["MOCK_METHOD4(pthread_create, int(pthread_t*, const pthread_attr_t*, void* (*)(void*), void*))", "MOCK_METHOD2(CellularMgrUpdateLinkStatus, int(char *, char *))", "MOCK_METHOD1(CellularMgr_Util_SendIPToWanMgr, int(CellularIPStruct*))", "MOCK_METHOD2(CellularMgrUpdatePhyStatus, int(char *, CellularDeviceOpenStatus_t))", "MOCK_METHOD1(cellular_hal_open_device, int(CellularDeviceContextCBStruct *))", "MOCK_METHOD2(CellularMgr_RBUS_Events_PublishInterfaceStatus, int(CellularInterfaceStatus_t, CellularInterfaceStatus_t))", "MOCK_METHOD2(CellularMgr_RBUS_Events_PublishPhyConnectionStatus, int(unsigned char, unsigned char))", "MOCK_METHOD2(CellularMgr_RBUS_Events_PublishLinkAvailableStatus, int(unsigned char, unsigned char))", "MOCK_METHOD0(cellular_hal_IsModemDevicePresent, unsigned int(void))", "MOCK_METHOD1(cellular_hal_select_device_slot, int(cellular_device_slot_status_api_callback))", "MOCK_METHOD1(CellularMgr_GetActiveCardStatus, int(CELLULAR_INTERFACE_SIM_STATUS *))", "MOCK_METHOD1(cellular_hal_monitor_device_registration, int(cellular_device_registration_status_callback))", "MOCK_METHOD2(cellular_hal_profile_create, int(CellularProfileStruct *, cellular_device_profile_status_api_callback))", "MOCK_METHOD3(cellular_hal_start_network, int(CellularNetworkIPType_t, CellularProfileStruct *, CellularNetworkCBStruct *))", "MOCK_METHOD1(cellular_hal_stop_network, int(CellularNetworkIPType_t))"], "published": ["SMPThreadInterface", "SMPThreadMock"], "classes": [{"name": "SMPThreadInterface", "description": "An abstract interface class defining the virtual methods for threading and cellular management operations, used for mocking in unit tests."}, {"name": "SMPThreadMock", "description": "A mock implementation of SMPThreadInterface using Google Mock, providing mock methods for unit testing of cellular management operations."}], "methods": [{"name": "pthread_create", "description": "Mock method for creating a POSIX thread."}, {"name": "CellularMgrUpdateLinkStatus", "description": "Mock method to update link status."}, {"name": "CellularMgr_Util_SendIPToWanMgr", "description": "Mock method to send IP to WAN manager."}, {"name": "CellularMgrUpdatePhyStatus", "description": "Mock method to update physical status."}, {"name": "cellular_hal_open_device", "description": "Mock method to open cellular device."}, {"name": "CellularMgr_RBUS_Events_PublishInterfaceStatus", "description": "Mock method to publish interface status event."}, {"name": "CellularMgr_RBUS_Events_PublishPhyConnectionStatus", "description": "Mock method to publish physical connection status event."}, {"name": "CellularMgr_RBUS_Events_PublishLinkAvailableStatus", "description": "Mock method to publish link availability status event."}, {"name": "cellular_hal_IsModemDevicePresent", "description": "Mock method to check if a modem device is present."}, {"name": "cellular_hal_select_device_slot", "description": "Mock method to select a device slot."}, {"name": "CellularMgr_GetActiveCardStatus", "description": "Mock method to get active card status."}, {"name": "cellular_hal_monitor_device_registration", "description": "Mock method to monitor device registration."}, {"name": "cellular_hal_profile_create", "description": "Mock method to create cellular profile."}, {"name": "cellular_hal_start_network", "description": "Mock method to start network."}, {"name": "cellular_hal_stop_network", "description": "Mock method to stop network."}, {"name": "~SMPThreadInterface()", "scope": "SMPThreadInterface", "scopeKind": "class", "description": "unavailable"}, {"name": "~SMPThreadMock()", "scope": "SMPThreadMock", "scopeKind": "class", "description": "unavailable"}], "calls": ["pthread_create", "CellularMgrUpdateLinkStatus", "CellularMgr_Util_SendIPToWanMgr", "CellularMgrUpdatePhyStatus", "cellular_hal_open_device", "CellularMgr_RBUS_Events_PublishInterfaceStatus", "CellularMgr_RBUS_Events_PublishPhyConnectionStatus", "CellularMgr_RBUS_Events_PublishLinkAvailableStatus", "cellular_hal_IsModemDevicePresent", "cellular_hal_select_device_slot", "CellularMgr_GetActiveCardStatus", "cellular_hal_monitor_device_registration", "cellular_hal_profile_create", "cellular_hal_start_network", "cellular_hal_stop_network"], "search-terms": ["MockSMPThread", "SMPThreadInterface", "unit test mocks", "cellular management mocks", "gmock", "pthread"], "state": 2, "file_id": 6954, "knowledge_revision": 20037, "git_revision": "", "ctags": [{"_type": "tag", "name": "MOCK_PTHREAD_H", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "pattern": "/^#define MOCK_PTHREAD_H$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "SMPThreadInterface", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "pattern": "/^class SMPThreadInterface {$/", "language": "C++", "kind": "class"}, {"_type": "tag", "name": "SMPThreadMock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "pattern": "/^class SMPThreadMock: public SMPThreadInterface {$/", "language": "C++", "kind": "class"}, {"_type": "tag", "name": "~SMPThreadInterface", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "pattern": "/^        virtual ~SMPThreadInterface() {}$/", "language": "C++", "kind": "function", "signature": "()", "scope": "SMPThreadInterface", "scopeKind": "class"}, {"_type": "tag", "name": "~SMPThreadMock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "pattern": "/^        virtual ~SMPThreadMock() {}$/", "language": "C++", "kind": "function", "signature": "()", "scope": "SMPThreadMock", "scopeKind": "class"}], "hash": "548ff36af2b415b5ced923f8f49ef29d", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/RdkCellularManager/source/test/mocks/mock_SMPThread.h", "revision_history": [{"20037": ""}]}