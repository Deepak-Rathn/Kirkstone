{"is_source_file": true, "format": "C", "description": "This is a C source file implementing and testing a singly linked list data structure with various operations such as creation, insertion (append/prepend), search, deletion, iteration, cloning, and cleanup. It includes unit tests to verify list functionalities like adding, removing, searching, cloning, and iterating over list elements.", "external_files": ["icTypes/icLinkedList.h", "icLog/logging.h", "linkedTest.h"], "external_methods": ["linkedListCreate", "linkedListDestroy", "linkedListAppend", "linkedListPrepend", "linkedListCount", "linkedListFind", "linkedListDelete", "linkedListIteratorCreate", "linkedListIteratorHasNext", "linkedListIteratorGetNext", "linkedListIteratorDestroy", "linkedListDeepClone", "linkedListClone", "linkedListIsClone", "linkedListGetElementAt", "linkedListRemove", "linkedListClear", "linkedListIteratorCreate", "linkedListIteratorDestroy", "linkedListIteratorHasNext", "linkedListIteratorGetNext", "linkedListIteratorDelete"], "published": ["runLinkedTests", "canCreate", "canAppend", "canPrepend", "canFind", "canNotFind", "canDelete", "canIterateAlternative", "canDeleteFromIterator", "canDeepClone", "canShallowCloneList", "canGetElementAt", "canRemovElementAt", "canIterateList", "canClearList"], "classes": [], "methods": [{"name": "sample * createSample()", "description": "Allocates and initializes a new 'sample' structure with zeros, preparing it for use.", "scope": "", "scopeKind": ""}, {"name": "void printSample(sample * curr)", "description": "Logs the 'num' and 'label' fields of a 'sample' structure for debugging purposes.", "scope": "", "scopeKind": ""}, {"name": "bool printIterator(void * item,void * arg)", "description": "Iterates over list items, printing each 'sample' element, used as a callback during list traversal.", "scope": "", "scopeKind": ""}, {"name": "void printList(icLinkedList * list)", "description": "Traverses the entire linked list, calling 'printSample' on each element to display its contents.", "scope": "", "scopeKind": ""}, {"name": "icLinkedList * makePopulatedList(int entryCount)", "description": "Creates a linked list and populates it with 'entryCount' number of 'sample' items, setting 'num' and 'label'.", "scope": "", "scopeKind": ""}, {"name": "bool canCreate()", "description": "Tests creation and destruction of an empty linked list, verifying proper initialization and cleanup.", "scope": "", "scopeKind": ""}, {"name": "bool canAppend()", "description": "Tests appending multiple items to the list, verifying list size updates correctly and integrity of stored data.", "scope": "", "scopeKind": ""}, {"name": "bool canPrepend()", "description": "Tests prepending items to the list, ensuring items are added at the front and list size updates accordingly.", "scope": "", "scopeKind": ""}, {"name": "bool sampleSearch(void * searchVal,void * item)", "description": "Predicate used to find a 'sample' in the list matching a specific 'num' value.", "scope": "", "scopeKind": ""}, {"name": "bool canFind()", "description": "Tests searching for specific 'sample' items within the list based on 'num' field.", "scope": "", "scopeKind": ""}, {"name": "bool canNotFind()", "description": "Ensures that searching for a non-existent 'sample' returns NULL, confirming search correctness.", "scope": "", "scopeKind": ""}, {"name": "bool canDelete()", "description": "Tests deletion of list elements at specific positions, verifying list integrity after each removal.", "scope": "", "scopeKind": ""}, {"name": "bool canIterateAlternative()", "description": "Verifies iteration over list elements using a custom iterator, confirming all elements are traversed.", "scope": "", "scopeKind": ""}, {"name": "bool canDeleteFromIterator()", "description": "Checks deleting elements during iteration, ensuring safe removal of elements while traversing.", "scope": "", "scopeKind": ""}, {"name": "void * cloneItem(void * item,void * context)", "description": "Helper function to deep clone a 'sample' item, used during deep copy of lists.", "scope": "", "scopeKind": ""}, {"name": "bool canDeepClone()", "description": "Verifies deep cloning of a list, ensuring copied list has independent copies of items.", "scope": "", "scopeKind": ""}, {"name": "bool canShallowCloneList()", "description": "Tests shallow cloning of list, ensuring structure is duplicated but items are shared.", "scope": "", "scopeKind": ""}, {"name": "bool canGetElementAt()", "description": "Checks retrieving an element at a specific index, including out-of-bounds handling.", "scope": "", "scopeKind": ""}, {"name": "bool canRemovElementAt()", "description": "Tests removing an element at a specific index, checking list size and correctness.", "scope": "", "scopeKind": ""}, {"name": "bool addSevenToAll(void * item,void * arg)", "description": "Applies an operation to add 7 to each 'sample' element's 'num' field during iteration.", "scope": "", "scopeKind": ""}, {"name": "bool canIterateList()", "description": "Validates standard list iteration and applying a callback to modify all elements.", "scope": "", "scopeKind": ""}, {"name": "bool scopeBoundIteratorIsNotLeaky()", "description": "Runs multiple traversals of the list to ensure no resource leaks occur, ensuring proper cleanup.", "scope": "", "scopeKind": ""}, {"name": "bool canClearList()", "description": "Tests clearing the list entirely, including cloning, and verifies correct update to list state and clone status.", "scope": "", "scopeKind": ""}, {"name": "bool runLinkedTests()", "description": "Main function executing all individual linked list tests, reports success or failure.", "scope": "", "scopeKind": ""}], "calls": ["linkedListCreate", "linkedListDestroy", "linkedListAppend", "linkedListCount", "linkedListPrepend", "linkedListFind", "linkedListDelete", "linkedListIteratorCreate", "linkedListIteratorHasNext", "linkedListIteratorGetNext", "linkedListIteratorDestroy", "linkedListDeepClone", "linkedListClone", "linkedListIsClone", "linkedListGetElementAt", "linkedListRemove", "linkedListClear"], "search-terms": ["linked list", "unit tests", "deep clone", "shallow clone", "iterator", "list operations", "list creation", "list deletion", "list search", "list insertion", "list removal", "list cloning"], "state": 2, "file_id": 637, "knowledge_revision": 13812, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOG_CAT", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^#define LOG_CAT /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "_sample", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^typedef struct _sample$/", "file": true, "language": "C", "kind": "struct"}, {"_type": "tag", "name": "addSevenToAll", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool addSevenToAll(void *item, void *arg)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(void * item,void * arg)"}, {"_type": "tag", "name": "canAppend", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canAppend()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canClearList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canClearList()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canCreate", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canCreate()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canDeepClone", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canDeepClone()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canDelete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canDelete()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canDeleteFromIterator", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canDeleteFromIterator()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canFind", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canFind()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canGetElementAt", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canGetElementAt()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canIterateAlternative", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canIterateAlternative()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canIterateList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canIterateList()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canNotFind", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canNotFind()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canPrepend", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canPrepend()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canRemovElementAt", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canRemovElementAt()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "canShallowCloneList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool canShallowCloneList()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "cloneItem", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static void *cloneItem(void *item, void *context)$/", "file": true, "language": "C", "typeref": "typename:void *", "kind": "function", "signature": "(void * item,void * context)"}, {"_type": "tag", "name": "createSample", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static sample *createSample()$/", "file": true, "language": "C", "typeref": "typename:sample *", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "label", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^    char    label[50];$/", "file": true, "language": "C", "typeref": "typename:char[50]", "kind": "member", "scope": "_sample", "scopeKind": "struct"}, {"_type": "tag", "name": "makePopulatedList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static icLinkedList *makePopulatedList(int entryCount)$/", "file": true, "language": "C", "typeref": "typename:icLinkedList *", "kind": "function", "signature": "(int entryCount)"}, {"_type": "tag", "name": "num", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^    int     num;$/", "file": true, "language": "C", "typeref": "typename:int", "kind": "member", "scope": "_sample", "scopeKind": "struct"}, {"_type": "tag", "name": "printIterator", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static bool printIterator(void *item, void *arg)$/", "file": true, "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(void * item,void * arg)"}, {"_type": "tag", "name": "printList", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static void printList(icLinkedList *list)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(icLinkedList * list)"}, {"_type": "tag", "name": "printSample", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^static void printSample(sample *curr)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(sample * curr)"}, {"_type": "tag", "name": "runLinkedTests", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool runLinkedTests()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "sample", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^} sample;$/", "file": true, "language": "C", "typeref": "struct:_sample", "kind": "typedef"}, {"_type": "tag", "name": "sampleSearch", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool sampleSearch(void *searchVal, void *item)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(void * searchVal,void * item)"}, {"_type": "tag", "name": "scopeBoundIteratorIsNotLeaky", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "pattern": "/^bool scopeBoundIteratorIsNotLeaky()$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}], "hash": "54eefa42eab00019ab9a2309b5f68756", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/types/c/test/src/linkedTest.c", "fields": [{"name": "char[50] label", "scope": "_sample", "scopeKind": "struct", "description": "unavailable"}, {"name": "int num", "scope": "_sample", "scopeKind": "struct", "description": "unavailable"}], "revision_history": [{"13812": ""}]}