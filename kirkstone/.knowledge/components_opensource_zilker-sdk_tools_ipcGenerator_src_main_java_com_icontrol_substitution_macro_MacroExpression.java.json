{"is_source_file": true, "format": "Java", "description": "This file defines the MacroExpression class and its nested classes, implementing an expression language with evaluation capabilities for macros within a substitution framework. It provides mechanisms to evaluate macro expressions, including conditional logic and variable resolution.", "external_files": ["org.slf4j.LoggerFactory", "com.icontrol.substitution.Substitution", "com.icontrol.util.StringUtils"], "external_methods": ["org.slf4j.LoggerFactory.getLogger", "com.icontrol.substitution.Substitution.translate", "com.icontrol.util.StringUtils.trimQuotes", "com.icontrol.util.StringUtils.compare"], "published": ["com.icontrol.substitution.macro.MacroExpression", "com.icontrol.substitution.macro.Expression", "com.icontrol.substitution.macro.MacroType", "com.icontrol.substitution.macro.Token", "com.icontrol.substitution.macro.TokenComparison"], "classes": [{"name": "MacroExpression", "description": "Represents a macro expression that can be evaluated, with support for different macro types like if, elseif, else, and end, along with attachments and nested expressions."}, {"name": "MacroExpression.VariableExpression", "description": "An inner class representing a variable expression with optional negation, used to evaluate variables within macro expressions."}, {"name": "MacroExpression.TokenExpression", "description": "An inner class that compares two tokens with a comparison operator, evaluating the condition."}, {"name": "MacroExpression.ComplexExpression", "description": "Abstract base class for expressions composed of other expressions, such as AND and OR combinations."}, {"name": "MacroExpression.AndExpression", "description": "Represents a logical 'AND' of two expressions, both must evaluate to true."}, {"name": "MacroExpression.OrExpression", "description": "Represents a logical 'OR' of two expressions, at least one must evaluate to true."}, {"name": "MacroExpression.NegateExpression", "description": "Represents the negation of another expression, reversing its evaluation result."}], "methods": [{"name": "getType", "description": "Returns the type of macro command (e.g., if, elseif, else, end)."}, {"name": "setType", "description": "Sets the macro command type."}, {"name": "getAttachment", "description": "Retrieves the attached content block for this macro, used if the macro passes."}, {"name": "setAttachment", "description": "Sets the content block attached to this macro."}, {"name": "appendAttachment", "description": "Appends additional content to the current attachment."}, {"name": "getExpression", "description": "Returns the underlying expression associated with this macro."}, {"name": "setExpression", "description": "Sets the underlying expression for this macro."}, {"name": "evaluate", "description": "Evaluates the macro expression against a Substitution context, returning true if the macro passes."}, {"name": "toString", "description": "Provides a string representation for debugging."}, {"name": "resolve", "description": "Resolves a Token to its string value, using substitution if needed."}, {"name": "getDouble", "description": "Converts a string to a double value, with error handling."}], "calls": ["org.slf4j.LoggerFactory.getLogger", "com.icontrol.substitution.Substitution.translate", "com.icontrol.util.StringUtils.trimQuotes", "com.icontrol.util.StringUtils.compare"], "search-terms": ["MacroExpression", "Expression evaluation", "macro types", "conditional macro", "variable resolution", "logical expressions", "nested macro expression"], "state": 2, "file_id": 523, "knowledge_revision": 13690, "git_revision": "", "hash": "ba15d8d78bf1f605ae6695837b36f336", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/tools/ipcGenerator/src/main/java/com/icontrol/substitution/macro/MacroExpression.java", "revision_history": [{"13690": ""}]}