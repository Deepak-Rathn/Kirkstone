{"is_source_file": true, "format": "C header file", "description": "This header file declares functions and macros for thread utilities using pthreads, including thread creation, management, and mutex handling.", "external_files": ["<stdbool.h>", "<pthread.h>", "<icTypes/sbrm.h>"], "external_methods": ["pthread_create", "pthread_mutex_init", "pthread_mutex_lock", "pthread_mutex_unlock", "pthread_getname_np", "getThreadName", "createDetachedThread", "createThread", "mutexInitWithType", "_mutexLock", "_mutexUnlock", "LOCK_SCOPE", "pthread_mutex_unlock__auto"], "published": ["createDetachedThread", "createThread", "getThreadName", "mutexInitWithType", "mutexLock", "mutexUnlock"], "classes": [], "methods": [{"name": "createDetachedThread", "description": "Creates a detached thread executing the specified task function with an optional name."}, {"name": "createThread", "description": "Creates a joinable thread executing the specified task function with an optional name."}, {"name": "getThreadName", "description": "Retrieves the thread name by thread ID; only supports the caller thread on Android."}, {"name": "mutexInitWithType", "description": "Initializes a mutex with a specified lock type such as recursive or error-checking."}, {"name": "_mutexLock", "description": "Locks a mutex, aborting on error if error checking is enabled."}, {"name": "mutexLock", "description": "Macro that calls _mutexLock with automatic file and line info for error tracking."}, {"name": "_mutexUnlock", "description": "Unlocks a mutex, with error checking."}, {"name": "mutexUnlock", "description": "Macro that calls _mutexUnlock with automatic context info."}, {"name": "LOCK_SCOPE", "description": "Defines a scope guard macro that locks a mutex upon entry and unlocks when the scope exits."}, {"name": "void pthread_mutex_unlock__auto(pthread_mutex_t ** mutex)", "description": "Function used by the LOCK_SCOPE macro to automatically unlock the mutex upon scope exit.", "scope": "", "scopeKind": ""}], "calls": ["pthread_create", "pthread_mutex_init", "pthread_mutex_lock", "pthread_mutex_unlock", "getThreadName"], "search-terms": ["thread creation", "mutex initialization", "mutex lock macros", "pthread utils", "thread name retrieval"], "state": 2, "file_id": 894, "knowledge_revision": 14049, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOCK_SCOPE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^#define LOCK_SCOPE(/", "language": "C++", "kind": "macro", "signature": "(m)"}, {"_type": "tag", "name": "ZILKER_THREADUTILS_H", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^#define ZILKER_THREADUTILS_H$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "mutexLock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^#define mutexLock(/", "language": "C++", "kind": "macro", "signature": "(mtx)"}, {"_type": "tag", "name": "mutexUnlock", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^#define mutexUnlock(/", "language": "C++", "kind": "macro", "signature": "(mtx)"}, {"_type": "tag", "name": "pthread_mutex_unlock__auto", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^inline void pthread_mutex_unlock__auto(pthread_mutex_t **mutex)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(pthread_mutex_t ** mutex)"}, {"_type": "tag", "name": "taskFunc", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "pattern": "/^typedef void * (*taskFunc)(void *);$/", "language": "C++", "typeref": "typename:void * (*)(void *)", "kind": "typedef"}], "hash": "c8cb47035c79f38b1ed621bbea3622b7", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/concurrent/c/public/icConcurrent/threadUtils.h", "revision_history": [{"14049": ""}]}