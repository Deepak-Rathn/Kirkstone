{"is_source_file": true, "format": "C", "description": "This file contains internal implementation functions and macros for IPC (Inter-Process Communication). It includes socket readiness checks, with functions to test if a socket can be read from or written to, and to handle service-specific socket events. It also has utility functions for extracting and inserting a service ID from JSON objects, indicating it's a source file for the IPC library implementation.", "external_files": ["<stdint.h>", "<stdlib.h>", "<string.h>", "<inttypes.h>", "<errno.h>", "<fcntl.h>", "<sys/types.h>", "<sys/socket.h>", "<netinet/in.h>", "<sys/select.h>", "<sys/un.h>", "<icLog/logging.h>", "\"ipcCommon.h\"", "cJSON"], "external_methods": ["icLogError"], "published": ["canReadFromSocket", "canReadFromServiceSocket", "canWriteToSocket", "extractServiceIdFromRawEvent", "insertServiceIdToRawEvent"], "classes": [], "methods": [{"name": "bool canReadFromSocket(int32_t sockFD,time_t timeoutSecs)", "description": "Checks if the socket is ready for reading within the specified timeout.", "scope": "", "scopeKind": ""}, {"name": "int canReadFromServiceSocket(int32_t serviceSock,int32_t shutdownSock,time_t timeoutSecs)", "description": "Checks if either the service socket or shutdown socket is ready for reading, with specific return codes for different conditions.", "scope": "", "scopeKind": ""}, {"name": "bool canWriteToSocket(int32_t sockFD,time_t timeoutSecs)", "description": "Checks if the socket is ready for writing within the specified timeout.", "scope": "", "scopeKind": ""}, {"name": "uint32_t extractServiceIdFromRawEvent(cJSON * buffer)", "description": "Extracts the service ID number from a JSON buffer.", "scope": "", "scopeKind": ""}, {"name": "void insertServiceIdToRawEvent(cJSON * buffer,uint32_t serviceIdNum)", "description": "Embeds a service ID number into a JSON buffer.", "scope": "", "scopeKind": ""}], "calls": ["select", "FD_ZERO", "FD_SET", "FD_ISSET", "strerror", "cJSON_GetObjectItem", "cJSON_CreateNumber", "cJSON_AddItemToObjectCS", "icLogError"], "search-terms": ["ipcCommon.c", "socket readiness", "serviceId", "select API", "socket polling", "IPC library implementation"], "state": 2, "file_id": 727, "knowledge_revision": 13885, "git_revision": "", "ctags": [{"_type": "tag", "name": "SERVICE_ID_JSON_KEY", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^#define SERVICE_ID_JSON_KEY /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "canReadFromServiceSocket", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^int canReadFromServiceSocket(int32_t serviceSock, int32_t shutdownSock, time_t timeoutSecs)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(int32_t serviceSock,int32_t shutdownSock,time_t timeoutSecs)"}, {"_type": "tag", "name": "canReadFromSocket", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^bool canReadFromSocket(int32_t sockFD, time_t timeoutSecs)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(int32_t sockFD,time_t timeoutSecs)"}, {"_type": "tag", "name": "canWriteToSocket", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^bool canWriteToSocket(int32_t sockFD, time_t timeoutSecs)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(int32_t sockFD,time_t timeoutSecs)"}, {"_type": "tag", "name": "extractServiceIdFromRawEvent", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^uint32_t extractServiceIdFromRawEvent(cJSON *buffer)$/", "language": "C", "typeref": "typename:uint32_t", "kind": "function", "signature": "(cJSON * buffer)"}, {"_type": "tag", "name": "insertServiceIdToRawEvent", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "pattern": "/^void insertServiceIdToRawEvent(cJSON *buffer, uint32_t serviceIdNum)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(cJSON * buffer,uint32_t serviceIdNum)"}], "hash": "1c6ae7da7e5e0e1eff2bf6ce4ffad5f1", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/ipc/c/src/ipcCommon.c", "revision_history": [{"13885": ""}]}