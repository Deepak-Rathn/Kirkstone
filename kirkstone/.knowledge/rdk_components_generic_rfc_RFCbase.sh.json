{"is_source_file": true, "format": "shell script (bash/sh)", "description": "This script appears to be part of a firmware or device configuration management system, performing Remote Feature Control (RFC) tasks such as fetching and applying configuration via HTTP requests, handling feature enablement, and managing device provisioning and reporting. It includes functions for communication with servers, processing JSON responses, and updating device parameters, indicating it's a key component in device management or provisioning workflows.", "external_files": ["/etc/include.properties", "/etc/device.properties", "/lib/rdk/t2Shared_api.sh", "/etc/waninfo.sh", "/lib/rdk/getpartnerid.sh", "/lib/rdk/getaccountid.sh", "$RDK_PATH/getPartnerId.sh", "/etc/log_timestamp.sh", "/lib/rdk/getpartnerid.sh", "/lib/rdk/getaccountid.sh", "$RDK_PATH/getPartnerId.sh", "/etc/rfc.properties", "/lib/rdk/utils.sh", "/usr/sbin/deviceinfo.sh", "/version.txt", "/etc/ssl/certs/refplat-xconf-cpe-clnt.xcal.tv.cert.pem", "/lib/rdk/t2Shared_api.sh", "/lib/rdk/exec_curl_mtls.sh", "/lib/rdk/mtlsUtils.sh", "/usr/bin/rdkssacli", "/tmp/.paramRFC", "/tmp/.RFC_", "/tmp/curl_header", "/tmp/estb_ipv4", "/tmp/estb_ipv6", "/tmp/.signedRequest"], "external_methods": ["getWanInterfaceName", "getErouterMac", "getIPAddress", "getMacAddress", "getFWVersion", "deviceinfo.sh -sn", "getEstbMacAddress", "getModel", "getAccountHash", "getAccountId", "checkCameraProvisionStatus", "getPartnerId", "tr181", "exec_curl_mtls", "t2ValNotify", "rfcGet", "rfcSet", "preProcessFile", "getFeatures", "featureReport", "getXconfSelect", "getValidAccountId", "processJsonResponseB", "processJsonResponseV", "rfcVideoGetAccountId", "rfcVideoCheckAccoutId", "rfcGetHashAndTime", "rfcSetHTValue", "rfcSetHashAndTime", "rfcClearHashAndTime", "rfcStashStoreParams", "rfcStashRetrieveParams", "sendHttpRequest", "sendHttpCBRequest", "sendHttpDirectRequest", "checkCodebigAccess", "eventSender", "waitForIpAcquisition"], "published": ["rfcGet", "rfcSet", "preProcessFile", "getFeatures", "featureReport", "getXconfSelect", "getValidAccountId", "processJsonResponseV", "rfcGetHashAndTime", "rfcSetHTValue", "rfcSetHashAndTime", "rfcClearHashAndTime", "rfcStashStoreParams", "rfcStashRetrieveParams", "sendHttpRequest", "sendHttpCBRequest", "sendHttpDirectRequest", "checkCodebigAccess", "eventSender", "waitForIpAcquisition"], "classes": [], "methods": [{"name": "rfcLogging", "description": "Logs messages related to RFC process, targeting different log files based on device type."}, {"name": "tlsLog", "description": "Logs TLS related errors with timestamp."}, {"name": "IsDirectBlocked", "description": "Checks if direct connection attempts are blocked based on block file timestamps."}, {"name": "IsCodeBigBlocked", "description": "Checks if Codebig connection attempts are blocked based on block file timestamps."}, {"name": "getECMMacAddress", "description": "Retrieves and formats the ECM MAC address."}, {"name": "getFWVersion", "description": "Gets firmware version from version.txt, with special handling for broadband devices."}, {"name": "getSerialNum", "description": "Retrieves device serial number."}, {"name": "getBuildType", "description": "Returns the build type string."}, {"name": "getControllerId", "description": "Returns a static controller ID."}, {"name": "getChannelMapId", "description": "Returns a static channel map ID."}, {"name": "getVODId", "description": "Returns a static VOD ID."}, {"name": "rfcGet", "description": "Fetches RFC parameter value via external command based on device type."}, {"name": "rfcSet", "description": "Sets RFC parameter value via external command based on device type."}, {"name": "preProcessFile", "description": "Prepares the configuration file for parsing by cleaning and formatting JSON data."}, {"name": "getFeatures", "description": "Parses the preprocessed JSON file to extract feature enablement states."}, {"name": "featureReport", "description": "Runs pre-processing and feature extraction steps."}, {"name": "getXconfSelect", "description": "Reads configuration data to possibly redirect Xconf to a new server URL."}, {"name": "getValidAccountId", "description": "Parses JSON response to extract and validate account ID and partner ID."}, {"name": "preProcessJsonResponse", "description": "Processes JSON response to decide whether to contact a new Xconf server or validate data."}, {"name": "processJsonResponseV", "description": "Processes the JSON response from the server, updating configuration variables, and handling reboots if needed."}, {"name": "rfcGetHashAndTime", "description": "Retrieves stored hash and timestamp values for configuration consistency checks."}, {"name": "rfcSetHTValue", "description": "Stores hash and timestamp values, logs changes, and updates internal files."}, {"name": "rfcSetHashAndTime", "description": "Extracts hash and timestamp from server headers and stores them."}, {"name": "rfcClearHashAndTime", "description": "Clears stored hash and timestamp."}, {"name": "rfcStashStoreParams", "description": "Saves current accountId and partnerId for later use."}, {"name": "rfcStashRetrieveParams", "description": "Restores stored accountId and partnerId, applies them, and logs."}, {"name": "sendHttpRequestToServer", "description": "Constructs and executes an HTTP request with curl, handles TLS, and processes response codes for configuration update."}, {"name": "sendHttpCBRequest", "description": "Attempts sending HTTP request via Codebig, with retries and fallback."}, {"name": "sendHttpDirectRequest", "description": "Attempts to send HTTP request directly, with retries and block checks."}, {"name": "checkCodebigAccess", "description": "Checks whether Codebig access is available."}, {"name": "CallXconf", "description": "Main function to initiate configuration fetch from Xconf servers, considering codebig, direct, and fallback options."}, {"name": "waitForIpAcquisition", "description": "Waits until public IP address is acquired, with timeout and logging."}], "search-terms": ["RFCbase.sh", "Remote Feature Control", "device.properties", "configsethash", "Xconf", "feature enable", "JSON response", "configuration update", "firmware", "device provisioning", "curl", "HTTP requests", "TLS", "Codebig", "protocol", "getPartnerId", "getAccountId", "XconfUrl", "XconfSelector", "rfc", "device management", "firmware upgrade"], "state": 2, "file_id": 13053, "knowledge_revision": 25966, "git_revision": "", "hash": "4a9b81c24cd3c9aa0a82f228c3f03d6f", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/rfc/RFCbase.sh", "revision_history": [{"25966": ""}]}