{"is_source_file": true, "format": "C++", "description": "This file contains implementation of an AVL Tree node template class, including methods for node creation, deletion, rotation, insertion, deletion, and search, along with various utility functions for managing AVL Tree nodes.", "external_files": ["avlNode.h", "backtrace.h", "cmastats.h", "cmaNode.h", "zmalloc.h", "<stdio.h>", "<stdlib.h>"], "external_methods": ["zmalloc", "zfree"], "published": ["AVLNode<T1, T2>"], "classes": [{"name": "AVLNode", "description": "Template class representing a node in an AVL tree with key of type T1 and data of type T2. Provides methods for memory management, tree balancing (rotations, rebalance), insertion, deletion, search, and cloning."}], "methods": [{"name": "void * operator new(size_t size)", "description": "Overloaded new operator for custom memory allocation using zmalloc.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "void operator delete(void * p)", "description": "Overloaded delete operator for custom deallocation using zfree.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "AVLNode(AVLNode<T1,T2> * left,AVLNode<T1,T2> * right,T1 k,T2 & v,AVLNode<T1,T2> * parent,int b,int c)", "description": "Constructors for creating AVLNode instances with various initializations.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "AVLNode<T1,T2> * Clone(AVLNode<T1,T2> * node)", "description": "Creates a deep copy of the node and its subtrees.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "void SetParent(AVLNode<T1,T2> * node,AVLNode<T1,T2> * parent)", "description": "Recursively sets the parent pointer for a subtree.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "~AVLNode(void)", "description": "Destructor that deletes child nodes.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "int RotateOnce(AVLNode<T1,T2> * & root,dir_t dir)", "description": "Performs a single rotation (left or right) to rebalance the tree.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "int RotateTwice(AVLNode<T1,T2> * & root,dir_t dir)", "description": "Performs a double rotation (left-right or right-left) for rebalancing.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "int ReBalance(AVLNode<T1,T2> * & root)", "description": "Rebalances a node if it is imbalanced after insertion or deletion.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "bool Insert(T1 key,AVLNode<T1,T2> * & root,int & heightChange,AVLNode<T1,T2> * & node)", "description": "Inserts a new node into the AVL tree, rebalancing as needed.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "bool Found(T1 key,avl_find_mode_t mode) const", "description": "Checks if a key is found in the node based on search mode.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "bool Delete(T1 key,AVLNode<T1,T2> * & root,int & heightChange,T1 & removedNode,avl_find_mode_t mode)", "description": "Removes a node with a specified key from the AVL tree, rebalancing afterwards.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "AVLNode<T1,T2> * Find(dir_t dir)", "description": "Searches for a key in the subtree, returning the node if found.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "bool Sort(bool asc,T1 * sortedArray,int & index) const", "description": "Performs an in-order traversal to sort and store keys into an array.", "scope": "AVLNode", "scopeKind": "class"}, {"name": "AVLNode(T1 k)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLNode(T1 k,T2 & v)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLNode(int k)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "AVLNode<T1,T2> * Find(dir_t dir,AVLNode<T1,T2> * root)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "bool Find(T1 key,AVLNode<T1,T2> * & root)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "bool Find(T1 key,const AVLNode<T1,T2> * & root) const", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "bool Find(dir_t dir,const AVLNode<T1,T2> * & root) const", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "bool Insert(T1 key,T2 & data,AVLNode<T1,T2> * & root,int & heightChange,AVLNode<T1,T2> * & node)", "scope": "AVLNode", "scopeKind": "class", "description": "unavailable"}, {"name": "int max(int a,int b)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "int min(int a,int b)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["AVLNode<T1, T2>::ReBalance", "AVLNode<T1, T2>::RotateOnce", "AVLNode<T1, T2>::RotateTwice", "AVLNode<T1, T2>::Clone"], "search-terms": ["AVLNode", "AVL Tree", "node cloning", "rotation", "balancing", "insertion", "deletion", "C++ template", "avicNode<T1,T2>", "zmalloc"], "state": 2, "file_id": 12548, "knowledge_revision": 25446, "git_revision": "", "ctags": [{"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>::AVLNode(AVLNode<T1, T2>* left, AVLNode<T1, T2>* right, T1 k, T2& v, AVLNode<T1,/", "language": "C++", "kind": "function", "signature": "(AVLNode<T1,T2> * left,AVLNode<T1,T2> * right,T1 k,T2 & v,AVLNode<T1,T2> * parent,int b,int c)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>::AVLNode(T1 k) : key(k), parent(0), balance(0), count(1)$/", "language": "C++", "kind": "function", "signature": "(T1 k)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>::AVLNode(T1 k, T2& v) : key(k), data(v), parent(0), balance(0), count(1)$/", "language": "C++", "kind": "function", "signature": "(T1 k,T2 & v)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<int, int>::AVLNode(int k) : key(k), data(0), parent(0), balance(0), count(1)$/", "language": "C++", "kind": "function", "signature": "(int k)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^template class AVLNode<int, Backtrace>;$/", "language": "C++", "typeref": "meta:class", "kind": "variable"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^template class AVLNode<int, CmaNode>;$/", "language": "C++", "typeref": "meta:class", "kind": "variable"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^template class AVLNode<int, CmaStats>;$/", "language": "C++", "typeref": "meta:class", "kind": "variable"}, {"_type": "tag", "name": "AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^template class AVLNode<int, int>;$/", "language": "C++", "typeref": "meta:class", "kind": "variable"}, {"_type": "tag", "name": "Clone", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>* AVLNode<T1, T2>::Clone(AVLNode<T1, T2>* node)$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "function", "signature": "(AVLNode<T1,T2> * node)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "DBG_AVLN", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^#define\tDBG_AVLN(/", "file": true, "language": "C++", "kind": "macro", "signature": "(x)"}, {"_type": "tag", "name": "DEBUG_AVLN_ENABLE", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^#define DEBUG_AVLN_ENABLE\t/", "file": true, "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "Delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Delete(T1 key, AVLNode<T1, T2> *&root, int &heightChange, T1& removedNode,/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,AVLNode<T1,T2> * & root,int & heightChange,T1 & removedNode,avl_find_mode_t mode)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>* AVLNode<T1, T2>::Find(dir_t dir)$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "function", "signature": "(dir_t dir)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>* AVLNode<T1, T2>::Find(dir_t dir, AVLNode<T1, T2>* root)$/", "language": "C++", "typeref": "typename:AVLNode<T1,T2> *", "kind": "function", "signature": "(dir_t dir,AVLNode<T1,T2> * root)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Find(T1 key, AVLNode<T1, T2> *&root)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,AVLNode<T1,T2> * & root)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Find(T1 key, const AVLNode<T1, T2> *&root) const$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,const AVLNode<T1,T2> * & root) const", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Find(dir_t dir, const AVLNode<T1, T2> *&root) const$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(dir_t dir,const AVLNode<T1,T2> * & root) const", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Found", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Found(T1 key, avl_find_mode_t mode) const$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,avl_find_mode_t mode) const", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Insert", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Insert(T1 key, AVLNode<T1, T2> *&root, int &heightChange, AVLNode<T1, T2> /", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,AVLNode<T1,T2> * & root,int & heightChange,AVLNode<T1,T2> * & node)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Insert", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Insert(T1 key, T2& data, AVLNode<T1, T2> *&root, int &heightChange, AVLNod/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(T1 key,T2 & data,AVLNode<T1,T2> * & root,int & heightChange,AVLNode<T1,T2> * & node)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "ReBalance", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^int AVLNode<T1, T2>::ReBalance(AVLNode<T1, T2> *&root) $/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(AVLNode<T1,T2> * & root)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "RotateOnce", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^int AVLNode<T1, T2>::RotateOnce(AVLNode<T1, T2> *&root, dir_t dir)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(AVLNode<T1,T2> * & root,dir_t dir)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "RotateTwice", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^int AVLNode<T1, T2>::RotateTwice(AVLNode<T1, T2> *&root, dir_t dir)$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(AVLNode<T1,T2> * & root,dir_t dir)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "SetParent", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^void AVLNode<T1, T2>::SetParent(AVLNode<T1, T2>* node, AVLNode<T1, T2>* parent)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(AVLNode<T1,T2> * node,AVLNode<T1,T2> * parent)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "Sort", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^bool AVLNode<T1, T2>::Sort(bool asc, T1 *sortedArray, int &index) const$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(bool asc,T1 * sortedArray,int & index) const", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "max", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^static inline int max(int a, int b) { return  (a > b) ? a : b; }$/", "file": true, "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(int a,int b)"}, {"_type": "tag", "name": "min", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^static inline int min(int a, int b) { return  (a < b) ? a : b; }$/", "file": true, "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(int a,int b)"}, {"_type": "tag", "name": "operator delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^void AVLNode<T1, T2>::operator delete (void *p)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(void * p)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "operator new", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^void* AVLNode<T1, T2>::operator new (size_t size)$/", "language": "C++", "typeref": "typename:void *", "kind": "function", "signature": "(size_t size)", "scope": "AVLNode", "scopeKind": "class"}, {"_type": "tag", "name": "~AVLNode", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "pattern": "/^AVLNode<T1, T2>::~AVLNode(void)$/", "language": "C++", "kind": "function", "signature": "(void)", "scope": "AVLNode", "scopeKind": "class"}], "hash": "c6d230a101719834abdfa389f0cf72c4", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/sys_mon_tools/sys_resource/src/avlNode.cpp", "fields": [{"name": "meta:class AVLNode", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"25446": ""}]}