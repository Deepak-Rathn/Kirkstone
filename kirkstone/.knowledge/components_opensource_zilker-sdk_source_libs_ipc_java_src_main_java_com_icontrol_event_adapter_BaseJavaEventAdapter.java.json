{"is_source_file": true, "format": "Java", "description": "This Java source file defines an abstract class `BaseJavaEventAdapter` that listens for UDP broadcasted events on a specific port. It manages listener registration, processes incoming JSON-encoded event messages, and supports direct invocation within the same process as well as external multicast listeners. The class includes inner classes for managing service adapters and a thread for receiving UDP packets.", "external_files": ["java.io.IOException", "java.net.DatagramPacket", "java.net.InetAddress", "java.net.InetSocketAddress", "java.net.MulticastSocket", "java.net.NetworkInterface", "org.json.JSONException", "org.json.JSONObject", "org.json.JSONTokener", "org.slf4j.Logger", "org.slf4j.LoggerFactory", "com.icontrol.event.BaseEvent", "com.icontrol.event.BaseEventListener", "com.icontrol.event.JavaEvent", "com.icontrol.event.producer.JavaEventProducer", "com.icontrol.ipc.IPCSender", "com.icontrol.registry.ServiceHandle", "com.icontrol.registry.ServiceRegistry", "com.icontrol.registry.scope.SameProcessServiceHandle"], "external_methods": ["ServiceRegistry.getServiceForEventPort", "ServiceHandle.isSameProcess", "SameProcessServiceHandle.getEventProducer", "BaseEvent.extractServiceIdFromRawEvent"], "published": ["BaseJavaEventAdapter", "MAX_PACKET_SIZE", "processIncomingEvent", "addBaseEventListener", "removeEventListener", "listenerCount", "notifyAllListeners"], "classes": [{"name": "ServiceAdapterSet", "description": "A thread-safe list of `BaseJavaEventAdapter` instances for a single service, enabling event processing delegation to multiple adapters."}, {"name": "EventReaderThread", "description": "A dedicated thread that listens for multicast UDP packets on a specified port, parses received JSON messages, identifies the associated service, and forwards events to registered adapters."}], "methods": [{"name": "<constructor>", "description": "Initializes the `BaseJavaEventAdapter`, sets up static environment, and registers with service registry and event producer if available."}, {"name": "addBaseEventListener", "description": "Adds a listener to the internal list of event listeners."}, {"name": "removeEventListener", "description": "Removes a listener from the internal list of event listeners."}, {"name": "listenerCount", "description": "Returns the number of registered listeners."}, {"name": "processIncomingEvent", "description": "Handles incoming JSON event payloads, decodes them if supported, and dispatches to listeners."}, {"name": "getLog", "description": "Abstract method to provide the logger instance used for logging."}, {"name": "supportsEvent", "description": "Abstract method to indicate whether a specific event code and value are supported."}, {"name": "decodeEvent", "description": "Abstract method to decode JSON payloads into specific `JavaEvent` instances."}, {"name": "notifyListener", "description": "Abstract method to notify a specific listener with a `JavaEvent`."}, {"name": "finishCanceling", "description": "Hook for subclasses to perform cleanup during shutdown."}, {"name": "notifyAllListeners", "description": "Schedules notification of all registered listeners with the given event."}, {"name": "addAddapterToMap", "description": "Registers an adapter for a specific service ID within the static mapping."}, {"name": "cancel", "description": "Shuts down the UDP listener thread and cleans up resources."}, {"name": "run", "description": "Main loop of the listener thread that receives packets, parses JSON, and dispatches events."}], "calls": ["ServiceRegistry.getServiceForEventPort", "ServiceHandle.isSameProcess", "SameProcessServiceHandle.getEventProducer", "BaseEvent.extractServiceIdFromRawEvent", "EventDeliveryPool.getSharedInstance", "EventDeliveryPool.scheduleNotification"], "search-terms": ["udp broadcast listener", "JavaEventAdapter", "multicast socket", "JSON event processing", "service ID mapping", "Listener registration", "internal thread", "event decoding", "multicast UDP socket"], "state": 2, "file_id": 781, "knowledge_revision": 13946, "git_revision": "", "hash": "5c518a333fd72daf94473678a621a674", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/ipc/java/src/main/java/com/icontrol/event/adapter/BaseJavaEventAdapter.java", "revision_history": [{"13946": ""}]}