{"is_source_file": true, "format": "C++", "description": "This file implements the OmiProxy class, which manages communication with an OMI (Open Management Infrastructure) service via D-Bus. It includes methods for mounting and unmounting encrypted bundles, registering and unregistering event listeners, signal monitoring, and handling specific signals such as 'VerityFailed'. The code interacts with system libraries like GLib, GObject, and GDBus, and manages threading and synchronization for signal handling.", "external_files": ["omi_proxy.hpp", "omi_dbus_api.h"], "external_methods": ["g_main_loop_is_running", "g_main_loop_quit", "g_object_unref", "omi1_call_mount_sync", "omi1_call_umount_sync", "omi1_proxy_new_for_bus_sync", "g_signal_connect", "g_idle_add", "g_main_loop_new", "g_main_loop_run", "g_signal_handler_disconnect", "g_main_loop_unref", "g_variant_get"], "published": ["mountCryptedBundle", "umountCryptedBundle", "registerListener", "unregisterListener"], "classes": [{"name": "OmiProxy", "description": "A class that encapsulates interaction with OMI over D-Bus, including signal handling, mounting, unmounting, and managing event listeners."}], "methods": [{"name": "bool mountCryptedBundle(const std::string & id,const std::string & rootfs_file_path,const std::string & config_json_path,std::string & bundlePath)", "description": "Mounts an encrypted bundle given its ID, root filesystem path, and config JSON, outputting the bundle path.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "bool umountCryptedBundle(const std::string & id)", "description": "Unmounts a crypted bundle based on its ID.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "long unsigned registerListener(const OmiErrorListener & listener,const void * cbParams)", "description": "Registers an error listener callback and returns a unique tag for the listener.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "void unregisterListener(long unsigned tag)", "description": "Unregisters a previously registered error listener using its tag.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "bool init()", "description": "Initializes the proxy object, creating the D-Bus proxy and starting the signal monitor thread.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "bool startSignalMonitorThread()", "description": "Starts a thread to monitor OMI signals.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "void signalMonitorThread()", "description": "Thread function that creates a main loop, connects signal handlers, and runs the loop.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "void signalHandler(GDBusProxy * proxy,gchar * sender_name,gchar * signal_name_c_str,GVariant * parameters,gpointer user_data)", "description": "Static callback invoked upon receiving a D-Bus signal; dispatches specific signal handling.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "void handleVerityFailed(GVariant * parameters)", "description": "Handles 'VerityFailed' signals by invoking registered callbacks.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "gboolean notifyThreadStarted(gpointer user_data)", "description": "Notifies that the signal monitor thread has started.", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"name": "~OmiProxy()", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}], "calls": ["g_main_loop_is_running", "g_main_loop_quit", "g_object_unref", "omi1_call_mount_sync", "omi1_call_umount_sync", "omi1_proxy_new_for_bus_sync", "g_signal_connect", "g_idle_add", "g_main_loop_new", "g_main_loop_run", "g_signal_handler_disconnect", "g_main_loop_unref", "g_variant_get"], "search-terms": ["OmiProxy", "mountCryptedBundle", "umountCryptedBundle", "VerityFailed", "signalMonitorThread", "omi1_proxy", "dbus"], "state": 2, "file_id": 314, "knowledge_revision": 13487, "git_revision": "", "ctags": [{"_type": "tag", "name": "handleVerityFailed", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^void OmiProxy::handleVerityFailed(GVariant *parameters)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(GVariant * parameters)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "init", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^bool OmiProxy::init()$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "()", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "mountCryptedBundle", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^bool OmiProxy::mountCryptedBundle(const std::string& id,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & id,const std::string & rootfs_file_path,const std::string & config_json_path,std::string & bundlePath)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "notifyThreadStarted", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^gboolean OmiProxy::notifyThreadStarted(gpointer user_data)$/", "language": "C++", "typeref": "typename:gboolean", "kind": "function", "signature": "(gpointer user_data)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "omi", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^namespace omi$/", "file": true, "language": "C++", "kind": "namespace"}, {"_type": "tag", "name": "registerListener", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^long unsigned OmiProxy::registerListener(const OmiErrorListener &listener, const void* cbParams)$/", "language": "C++", "typeref": "typename:long unsigned", "kind": "function", "signature": "(const OmiErrorListener & listener,const void * cbParams)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "signalHandler", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^void OmiProxy::signalHandler(GDBusProxy *proxy, gchar *sender_name, gchar *signal_name_c_str,$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(GDBusProxy * proxy,gchar * sender_name,gchar * signal_name_c_str,GVariant * parameters,gpointer user_data)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "signalMonitorThread", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^void OmiProxy::signalMonitorThread()$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "startSignalMonitorThread", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^bool OmiProxy::startSignalMonitorThread()$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "()", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "umountCryptedBundle", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^bool OmiProxy::umountCryptedBundle(const std::string& id)$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & id)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "unregisterListener", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^void OmiProxy::unregisterListener(long unsigned tag)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(long unsigned tag)", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "~OmiProxy", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.cpp", "pattern": "/^OmiProxy::~OmiProxy()$/", "language": "C++", "kind": "function", "signature": "()", "scope": "omi::OmiProxy", "scopeKind": "class"}], "hash": "cb9571f478d3c53f54e3184b9a612db3", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/OMI/client/omi_proxy.cpp", "revision_history": [{"13487": ""}]}