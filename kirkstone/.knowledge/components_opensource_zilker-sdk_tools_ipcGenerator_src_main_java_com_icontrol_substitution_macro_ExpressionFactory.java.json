{"is_source_file": true, "format": "Java", "description": "This file defines a singleton class 'ExpressionFactory' in Java that provides functions for parsing macro expressions, particularly '#if', '#elseif', '#else', and '#end' directives. It includes methods for tokenizing expressions, parsing macro lines, creating expression objects, and handling subgroups within macro expressions. The class facilitates the parsing and validation of macro expressions used in conditional compilation or macro evaluation scenarios.", "external_files": ["java.io.BufferedReader", "java.io.IOException", "java.io.StreamTokenizer", "java.io.StringReader", "java.util.ArrayList", "java.util.List"], "external_methods": ["String.indexOf", "String.substring", "Macro.setSpanStart", "Macro.setSpanEnd", "Macro.addExpression", "Macro.validateMacro", "Token.Type.command", "Token.Type.value", "Token.Type.group_start", "Token.Type.group_end", "Token.kind", "Token.getValue", "Token.getKind", "Token.isNegateComparison", "Token.isComparison", "TokenOperator.Operator.forDesc", "TokenComparison.Comparison.forDesc", "StreamTokenizer.nextToken", "StreamTokenizer.sval", "StreamTokenizer.ttype", "StreamTokenizer.TT_WORD", "StreamTokenizer.TT_NUMBER", "StreamTokenizer.TT_EOL"], "published": ["ExpressionFactory.parseMacro", "ExpressionFactory.parseMacroLine", "ExpressionFactory.createExpression", "ExpressionFactory.getSubgroup", "ExpressionFactory.parseTokens", "ExpressionFactory.createToken"], "classes": [{"name": "ExpressionFactory", "description": "A singleton class that provides static methods to parse macro expressions, create expression objects, and handle macro tokens and subgroups."}], "methods": [{"name": "parseMacro", "description": "Parses a buffer string containing macro directives ('#if' and '#end') and produces a Macro object representing the macro structure with expressions and boundaries."}, {"name": "parseMacroLine", "description": "Parses a single macro line (such as '#if', '#elseif', '#else', '#end') into a MacroExpression object."}, {"name": "createExpression", "description": "Constructs an expression tree from a list of tokens representing a macro expression, handling operators, variables, values, and nested groups."}, {"name": "getSubgroup", "description": "Extracts a subgroup of tokens enclosed within parentheses from a list of tokens starting at a given index."}, {"name": "parseTokens", "description": "Tokenizes a line string into a list of tokens for further processing."}, {"name": "createToken", "description": "Creates a Token object based on a specified token type and string value, recognizing special comparison and operator tokens."}], "calls": ["String.indexOf", "String.substring", "Macro.setSpanStart", "Macro.setSpanEnd", "Macro.addExpression", "Macro.validateMacro", "TokenType.getForCommand", "Token.isNegateComparison", "Token.isComparison", "TokenOperator.Operator.forDesc", "TokenComparison.Comparison.forDesc", "StreamTokenizer.nextToken", "StreamTokenizer.sval", "StreamTokenizer.ttype"], "search-terms": ["macro expression parser", "conditional macro parsing", "#if macro handling", "macro tokenization", "expression tree creation", "macro subgroup parsing", "Java macro parsing"], "state": 2, "file_id": 520, "knowledge_revision": 13691, "git_revision": "", "hash": "e6db8aec991936890aa6dffe7cd542c6", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/tools/ipcGenerator/src/main/java/com/icontrol/substitution/macro/ExpressionFactory.java", "revision_history": [{"13691": ""}]}