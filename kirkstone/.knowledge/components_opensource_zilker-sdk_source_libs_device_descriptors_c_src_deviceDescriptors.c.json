{"is_source_file": true, "format": "C", "description": "This file is a C source file implementing the device descriptor management logic, including initialization, cleanup, retrieval, and file parsing functions. It handles device descriptors, whitelist/blacklist paths, and matching logic based on device versions.", "external_files": ["stddef.h", "stdio.h", "stdbool.h", "string.h", "pthread.h", "limits.h", "sys/stat.h", "stdlib.h", "libxml/tree.h", "icLog/logging.h", "icTypes/icLinkedList.h", "xmlHelper/xmlHelper.h", "deviceDescriptors.h", "deviceDescriptor.h", "icUtil/stringUtils.h", "parser.h"], "external_methods": ["linkedListDestroy", "linkedListIteratorCreate", "linkedListIteratorHasNext", "linkedListIteratorGetNext", "linkedListIteratorDestroy", "deviceDescriptorClone", "stringCompare", "getBlacklistedUuids", "stringHashMapDestroy", "parseDeviceDescriptors"], "published": ["deviceDescriptorsInit", "deviceDescriptorsCleanup", "deviceDescriptorsGet", "getWhiteListPath", "getBlackListPath", "checkWhiteListValid", "checkBlackListValid"], "classes": [], "methods": [{"name": "void deviceDescriptorsInit(const char * wlPath,const char * blPath)", "description": "Initializes whitelist and blacklist file paths for device descriptor processing.", "scope": "", "scopeKind": ""}, {"name": "void deviceDescriptorsCleanup()", "description": "Cleans up and releases resources associated with the device descriptors list.", "scope": "", "scopeKind": ""}, {"name": "DeviceDescriptor * deviceDescriptorsGet(const char * manufacturer,const char * model,const char * hardwareVersion,const char * firmwareVersion)", "description": "Retrieves a device descriptor matching the provided device information, or NULL if none matches.", "scope": "", "scopeKind": ""}, {"name": "bool parseFiles()", "description": "Parses the device descriptor files based on stored whitelist and blacklist paths.", "scope": "", "scopeKind": ""}, {"name": "bool versionInRange(const char * versionInput,DeviceVersionList * allowedVersions)", "description": "Checks whether a given version string falls within an allowed version list or range.", "scope": "", "scopeKind": ""}, {"name": "char * getWhiteListPath()", "description": "Returns a copy of the current whitelist file path.", "scope": "", "scopeKind": ""}, {"name": "char * getBlackListPath()", "description": "Returns a copy of the current blacklist file path.", "scope": "", "scopeKind": ""}, {"name": "bool checkWhiteListValid(const char * wlPath)", "description": "Checks if the specified whitelist file is valid and parsable.", "scope": "", "scopeKind": ""}, {"name": "bool checkBlackListValid(const char * blPath)", "description": "Checks if the specified blacklist file is valid and parsable.", "scope": "", "scopeKind": ""}], "calls": ["linkedListDestroy", "linkedListIteratorCreate", "linkedListIteratorHasNext", "linkedListIteratorGetNext", "linkedListIteratorDestroy", "deviceDescriptorClone", "stringCompare", "parseDeviceDescriptors", "getBlacklistedUuids"], "search-terms": ["device descriptors", "white list", "black list", "deviceDescriptors.c", "deviceDescriptor", "parseDeviceDescriptors", "deviceDescriptorsGet", "versionInRange", "manufacturer", "model", "hardwareVersion", "firmwareVersion"], "state": 2, "file_id": 590, "knowledge_revision": 13756, "git_revision": "", "ctags": [{"_type": "tag", "name": "LOG_TAG", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^#define LOG_TAG /", "file": true, "language": "C", "kind": "macro"}, {"_type": "tag", "name": "blackListPath", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static char blackListPath[PATH_MAX] = {'\\\\0'};$/", "file": true, "language": "C", "typeref": "typename:char[]", "kind": "variable"}, {"_type": "tag", "name": "checkBlackListValid", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^bool checkBlackListValid(const char *blPath)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(const char * blPath)"}, {"_type": "tag", "name": "checkWhiteListValid", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^bool checkWhiteListValid(const char *wlPath)$/", "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(const char * wlPath)"}, {"_type": "tag", "name": "dataMutex", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static pthread_mutex_t dataMutex = PTHREAD_MUTEX_INITIALIZER;$/", "file": true, "language": "C", "typeref": "typename:pthread_mutex_t", "kind": "variable"}, {"_type": "tag", "name": "deviceDescriptors", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static icLinkedList *deviceDescriptors = NULL;$/", "file": true, "language": "C", "typeref": "typename:icLinkedList *", "kind": "variable"}, {"_type": "tag", "name": "deviceDescriptorsCleanup", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^void deviceDescriptorsCleanup()$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "deviceDescriptorsGet", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^DeviceDescriptor *deviceDescriptorsGet(const char *manufacturer,$/", "language": "C", "typeref": "typename:DeviceDescriptor *", "kind": "function", "signature": "(const char * manufacturer,const char * model,const char * hardwareVersion,const char * firmwareVersion)"}, {"_type": "tag", "name": "deviceDescriptorsInit", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^void deviceDescriptorsInit(const char *wlPath, const char *blPath)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(const char * wlPath,const char * blPath)"}, {"_type": "tag", "name": "getBlackListPath", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^char *getBlackListPath()$/", "language": "C", "typeref": "typename:char *", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "getWhiteListPath", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^char *getWhiteListPath()$/", "language": "C", "typeref": "typename:char *", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "parseFiles", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static bool parseFiles()$/", "file": true, "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "versionInRange", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static bool versionInRange(const char *versionInput, DeviceVersionList *allowedVersions)$/", "file": true, "language": "C", "typeref": "typename:bool", "kind": "function", "signature": "(const char * versionInput,DeviceVersionList * allowedVersions)"}, {"_type": "tag", "name": "whiteListPath", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "pattern": "/^static char whiteListPath[PATH_MAX] = {'\\\\0'};$/", "file": true, "language": "C", "typeref": "typename:char[]", "kind": "variable"}], "hash": "72cb6abb96fadcea9efa849fd0d2d0e2", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/source/libs/device/descriptors/c/src/deviceDescriptors.c", "fields": [{"name": "char[] blackListPath", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "pthread_mutex_t dataMutex", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "icLinkedList * deviceDescriptors", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "char[] whiteListPath", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"13756": ""}]}