{"is_source_file": true, "format": "C", "description": "Source code for network interface management, including functions for file I/O, VLAN, bridge, interface configuration, routing, policy rules, tunnel creation, neighbor table management, and statistics collection.", "external_files": ["<unistd.h>", "<sys/ioctl.h>", "<net/if_arp.h>", "<arpa/inet.h>", "<errno.h>", "<netlink/route/neighbour.h>", "<netlink/route/addr.h>", "<netlink/route/rule.h>", "<netlink/route/link/vlan.h>", "<netlink/route/link/ip6tnl.h>", "safec_lib_common.h", "libnet_util.h", "libnet.h"], "external_methods": ["fopen", "fwrite", "fclose", "fread", "memset_s", "sprintf_s", "access", "nl_socket_alloc", "libnet_alloc_socket", "libnet_connect", "nl_cache_free", "nl_socket_free", "rtnl_link_alloc_cache", "rtnl_link_name2i", "rtnl_link_vlan_alloc", "rtnl_link_set_link", "rtnl_link_set_name", "rtnl_link_vlan_set_id", "rtnl_link_add", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_link_alloc", "rtnl_link_set_type", "rtnl_link_set_name", "rtnl_link_delete", "rtnl_link_get_by_name", "rtnl_link_enslave", "rtnl_link_release", "rtnl_link_unset_flags", "rtnl_link_get_flags", "rtnl_link_change", "rtnl_link_alloc", "rtnl_link_set_flags", "rtnl_link_get_by_name", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_link_ip6_tnl_alloc", "rtnl_link_ip6_tnl_set_link", "rtnl_link_ip6_tnl_set_local", "rtnl_link_ip6_tnl_set_remote", "rtnl_link_add", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_neigh_put", "rtnl_neigh_alloc", "libnet_neigh_alloc", "libnet_neigh_parse_dev", "libnet_neigh_parse_dst", "rtnl_neigh_delete", "nl_cache_put", "nl_socket_free", "rtnl_link_get_ifindex", "rtnl_link_i2name", "rtnl_link_get_ifindex", "rtnl_link_alloc", "rtnl_link_set_name", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_ip6_tnl_alloc", "rtnl_link_ip6_tnl_set_link", "rtnl_link_ip6_tnl_set_local", "rtnl_link_ip6_tnl_set_remote", "rtnl_link_add", "rtnl_link_put", "rtnl_link_delete", "rtnl_link_set_type", "rtnl_link_set_name", "rtnl_link_set_master", "rtnl_link_set_flags", "rtnl_link_unset_flags", "rtnl_link_get_by_name", "rtnl_link_get_by_name", "rtnl_link_get_by_name", "rtnl_link_get_ifindex", "rtnl_link_alloc", "rtnl_link_set_name", "rtnl_link_set_link", "rtnl_link_set_family", "rtnl_link_set_type", "rtnl_link_add", "rtnl_link_put", "rtnl_rule_alloc", "rtnl_rule_set_src", "rtnl_rule_set_action", "rtnl_rule_set_dst", "rtnl_rule_set_iif", "rtnl_rule_set_oif", "rtnl_rule_set_table", "rtnl_rule_set_prio", "rtnl_rule_set_family", "rtnl_rule_add", "rtnl_rule_put", "nl_cache_foreach_filter", "rtnl_rule_delete", "rtnl_route_alloc", "rtnl_route_parse_dst", "rtnl_route_parse_table", "rtnl_route_parse_nexthop", "rtnl_route_add", "rtnl_route_put", "rtnl_route_delete", "rtnl_addr_alloc", "rtnl_addr_parse_dev", "rtnl_addr_parse_valid", "rtnl_addr_parse_preferred", "rtnl_addr_parse_broadcast", "rtnl_addr_set_family", "rtnl_addr_add", "rtnl_addr_put", "rtnl_addr_delete", "rtnl_neigh_put", "libnet_link_alloc_cache", "libnet_addr_alloc", "libnet_addr_parse", "libnet_addr_parse_dev", "libnet_addr_parse_valid", "libnet_addr_parse_preferred", "libnet_addr_parse_broadcast", "libnet_addr_parse_local", "rtnl_link_name2i", "rtnl_link_get_ifindex", "rtnl_link_i2name", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_ip6_tnl_alloc", "rtnl_link_ip6_tnl_set_link", "rtnl_link_ip6_tnl_set_local", "rtnl_link_ip6_tnl_set_remote", "rtnl_link_add", "rtnl_link_put", "rtnl_link_delete", "rtnl_link_set_type", "rtnl_link_set_name", "rtnl_link_set_master", "rtnl_link_set_flags", "rtnl_link_unset_flags", "rtnl_link_get_by_name", "rtnl_link_get_by_name", "rtnl_link_get_by_name", "rtnl_link_get_ifindex", "rtnl_link_alloc", "rtnl_link_set_name", "rtnl_link_set_link", "rtnl_link_set_family", "rtnl_link_set_type", "rtnl_link_add", "rtnl_link_put", "rtnl_rule_alloc", "rtnl_rule_set_src", "rtnl_rule_set_action", "rtnl_rule_set_dst", "rtnl_rule_set_iif", "rtnl_rule_set_oif", "rtnl_rule_set_table", "rtnl_rule_set_prio", "rtnl_rule_set_family", "rtnl_rule_add", "rtnl_rule_put", "nl_cache_foreach_filter", "rtnl_rule_delete", "rtnl_route_alloc", "rtnl_route_parse_dst", "rtnl_route_parse_table", "rtnl_route_parse_nexthop", "rtnl_route_add", "rtnl_route_put", "rtnl_route_delete", "rtnl_addr_alloc", "rtnl_addr_parse_dev", "rtnl_addr_parse_valid", "rtnl_addr_parse_preferred", "rtnl_addr_parse_broadcast", "rtnl_addr_set_family", "rtnl_addr_add", "rtnl_addr_put", "rtnl_addr_delete", "rtnl_neigh_put", "libnet_link_alloc_cache", "libnet_addr_alloc", "libnet_addr_parse", "libnet_addr_parse_dev", "libnet_addr_parse_valid", "libnet_addr_parse_preferred", "libnet_addr_parse_broadcast", "libnet_addr_parse_local", "rtnl_link_get_stat"], "published": ["file_write", "file_read", "vlan_create", "vlan_delete", "bridge_create", "bridge_delete", "interface_add_to_bridge", "interface_remove_from_bridge", "bridge_set_stp", "interface_up", "interface_down", "interface_exist", "interface_set_mtu", "interface_get_mac", "interface_set_mac", "interface_get_ip", "interface_set_netmask", "addr_derive_broadcast", "addr_add", "addr_delete", "route_add", "route_delete", "rule_add", "rule_delete", "tunnel_add_ip4ip6", "interface_delete", "interface_set_flags", "interface_rename", "neighbour_delete", "neighbour_get_list", "neighbour_free_neigh", "interface_get_stats"], "classes": [], "methods": [{"name": "libnet_status file_write(const char * file_name,const char * buf,size_t count)", "description": "Writes data to a file specified by filename.", "scope": "", "scopeKind": ""}, {"name": "libnet_status file_read(const char * file_name,char * buf,size_t count)", "description": "Reads data from a file into a buffer.", "scope": "", "scopeKind": ""}, {"name": "libnet_status vlan_create(const char * if_name,int vid)", "description": "Creates a VLAN interface on specified parent interface with given VLAN ID.", "scope": "", "scopeKind": ""}, {"name": "libnet_status vlan_delete(const char * vlan_name)", "description": "Deletes a VLAN interface by name.", "scope": "", "scopeKind": ""}, {"name": "libnet_status bridge_create(const char * bridge_name)", "description": "Creates a bridge interface with specified name.", "scope": "", "scopeKind": ""}, {"name": "libnet_status bridge_delete(const char * bridge_name)", "description": "Deletes a bridge interface by name.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_add_to_bridge(const char * bridge_name,const char * if_name)", "description": "Adds an interface to a bridge.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_remove_from_bridge(const char * if_name)", "description": "Removes an interface from a bridge.", "scope": "", "scopeKind": ""}, {"name": "libnet_status bridge_set_stp(const char * bridge_name,char * val)", "description": "Enables or disables spanning tree protocol on a bridge.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_up(char * if_name)", "description": "Sets network interface state to UP.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_down(char * if_name)", "description": "Sets network interface state to DOWN.", "scope": "", "scopeKind": ""}, {"name": "int interface_exist(const char * if_name)", "description": "Checks if an interface exists.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_set_mtu(const char * if_name,char * val)", "description": "Sets the MTU of a network interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_get_mac(const char * if_name,char * mac,size_t size)", "description": "Retrieves the MAC address of an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_set_mac(const char * if_name,char * mac)", "description": "Sets the MAC address of an interface.", "scope": "", "scopeKind": ""}, {"name": "char * interface_get_ip(const char * if_name)", "description": "Gets the IPv4 address of an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_set_netmask(const char * if_name,const char * netmask)", "description": "Sets the network mask for an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status addr_derive_broadcast(char * ip,unsigned int prefix_len,char * bcast,int size)", "description": "Calculates broadcast address from IP and prefix length.", "scope": "", "scopeKind": ""}, {"name": "libnet_status addr_add(char * args)", "description": "Adds an IP address to an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status addr_delete(char * args)", "description": "Removes an IP address from an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status route_add(char * args)", "description": "Adds a route to the routing table.", "scope": "", "scopeKind": ""}, {"name": "libnet_status route_delete(char * args)", "description": "Deletes a route from the routing table.", "scope": "", "scopeKind": ""}, {"name": "libnet_status rule_add(char * args)", "description": "Adds a policy routing rule.", "scope": "", "scopeKind": ""}, {"name": "libnet_status rule_delete(char * args)", "description": "Removes a policy routing rule.", "scope": "", "scopeKind": ""}, {"name": "libnet_status tunnel_add_ip4ip6(const char * tunnel_name,const char * dev_name,const char * local_ip6,const char * remote_ip6,const char * encaplimit)", "description": "Creates an IPv6 tunnel interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_delete(char * name)", "description": "Deletes a network interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_set_flags(char * if_name,unsigned int flags)", "description": "Sets flags on an interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_rename(char * if_name,char * new_name)", "description": "Renames a network interface.", "scope": "", "scopeKind": ""}, {"name": "libnet_status neighbour_delete(char * dev,char * ip)", "description": "Deletes an entry in the neighbor table.", "scope": "", "scopeKind": ""}, {"name": "libnet_status neighbour_get_list(struct neighbour_info * arr)", "description": "Retrieves list of neighbor entries.", "scope": "", "scopeKind": ""}, {"name": "void neighbour_free_neigh(struct neighbour_info * neigh_info)", "description": "Frees neighbor table members.", "scope": "", "scopeKind": ""}, {"name": "libnet_status interface_get_stats(cnl_ifstats_mask ifstats_mask,const char * if_name,cnl_iface_stats * stats)", "description": "Gets network interface statistics.", "scope": "", "scopeKind": ""}, {"name": "get_interface_stats", "description": "Retrieves various statistics (packets, bytes, errors, dropped) for a specified network interface, based on the provided mask, using netlink sockets and rtnl link structures."}, {"name": "void addr_delete_cb(struct nl_object * obj,void * arg)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void bridge_free_info(struct bridge_info * bridge)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "libnet_status bridge_get_info(char * bridge_name,struct bridge_info * bridge)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void bridge_get_slave_name_cb(struct nl_object * match,void * arg)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void neighbour_get_cb(struct nl_object * match,void * arg)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void route_delete_cb(struct nl_object * obj,void * arg)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "void rule_delete_cb(struct nl_object * obj,void * arg)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["fopen", "fwrite", "fclose", "fread", "memset_s", "sprintf_s", "access", "nl_socket_alloc", "libnet_alloc_socket", "libnet_connect", "nl_cache_free", "nl_socket_free", "rtnl_link_alloc_cache", "rtnl_link_name2i", "rtnl_link_vlan_alloc", "rtnl_link_set_link", "rtnl_link_set_name", "rtnl_link_vlan_set_id", "rtnl_link_add", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_link_alloc", "rtnl_link_set_type", "rtnl_link_set_name", "rtnl_link_delete", "rtnl_link_get_by_name", "rtnl_link_enslave", "rtnl_link_release", "rtnl_link_unset_flags", "rtnl_link_get_flags", "rtnl_link_change", "rtnl_link_alloc", "rtnl_link_set_flags", "rtnl_link_get_by_name", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_link_ip6_tnl_alloc", "rtnl_link_ip6_tnl_set_link", "rtnl_link_ip6_tnl_set_local", "rtnl_link_ip6_tnl_set_remote", "rtnl_link_add", "rtnl_link_put", "nl_cache_free", "nl_socket_free", "rtnl_neigh_put", "rtnl_neigh_alloc", "libnet_neigh_alloc", "libnet_neigh_parse_dev", "libnet_neigh_parse_dst", "rtnl_neigh_delete", "nl_cache_put", "nl_socket_free", "rtnl_link_get_ifindex", "rtnl_link_i2name", "rtnl_link_get_ifindex", "rtnl_link_alloc", "rtnl_link_set_name", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_get_ifindex", "rtnl_link_ip6_tnl_alloc", "rtnl_link_ip6_tnl_set_link", "rtnl_link_ip6_tnl_set_local", "rtnl_link_ip6_tnl_set_remote", "rtnl_link_add", "rtnl_link_put", "rtnl_link_delete", "rtnl_link_set_type", "rtnl_link_set_name", "rtnl_link_set_master", "rtnl_link_set_flags", "rtnl_link_unset_flags", "rtnl_link_get_by_name", "rtnl_link_get_ifindex", "rtnl_link_alloc", "rtnl_link_set_name", "rtnl_link_set_link", "rtnl_link_set_family", "rtnl_link_set_type", "rtnl_link_add", "rtnl_link_put", "rtnl_rule_alloc", "rtnl_rule_set_src", "rtnl_rule_set_action", "rtnl_rule_set_dst", "rtnl_rule_set_iif", "rtnl_rule_set_oif", "rtnl_rule_set_table", "rtnl_rule_set_prio", "rtnl_rule_set_family", "rtnl_rule_add", "rtnl_rule_put", "nl_cache_foreach_filter", "rtnl_rule_delete", "rtnl_route_alloc", "rtnl_route_parse_dst", "rtnl_route_parse_table", "rtnl_route_parse_nexthop", "rtnl_route_add", "rtnl_route_put", "rtnl_route_delete", "rtnl_addr_alloc", "rtnl_addr_parse_dev", "rtnl_addr_parse_valid", "rtnl_addr_parse_preferred", "rtnl_addr_parse_broadcast", "rtnl_addr_set_family", "rtnl_addr_add", "rtnl_addr_put", "rtnl_addr_delete", "rtnl_neigh_put", "libnet_link_alloc_cache", "libnet_addr_alloc", "libnet_addr_parse", "libnet_addr_parse_dev", "libnet_addr_parse_valid", "libnet_addr_parse_preferred", "libnet_addr_parse_broadcast", "libnet_addr_parse_local", "nl_connect", "rtnl_link_get_stat"], "search-terms": ["libnet", "interface_stats", "rtnl_link_get_stat", "netlink socket", "interface metrics", "network interface statistics", "ifstats_mask"], "state": 2, "file_id": 5834, "knowledge_revision": 26115, "git_revision": "", "ctags": [{"_type": "tag", "name": "addr_add", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status addr_add(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "addr_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status addr_delete(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "addr_delete_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^static void addr_delete_cb(struct nl_object *obj, void *arg)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct nl_object * obj,void * arg)"}, {"_type": "tag", "name": "addr_derive_broadcast", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status addr_derive_broadcast(char *ip, unsigned int prefix_len, char *bcast, int size)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * ip,unsigned int prefix_len,char * bcast,int size)"}, {"_type": "tag", "name": "bridge_create", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status bridge_create(const char* bridge_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * bridge_name)"}, {"_type": "tag", "name": "bridge_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status bridge_delete(const char* bridge_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * bridge_name)"}, {"_type": "tag", "name": "bridge_free_info", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^void bridge_free_info(struct bridge_info *bridge)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct bridge_info * bridge)"}, {"_type": "tag", "name": "bridge_get_info", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status bridge_get_info(char *bridge_name, struct bridge_info *bridge)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * bridge_name,struct bridge_info * bridge)"}, {"_type": "tag", "name": "bridge_get_slave_name_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^static void bridge_get_slave_name_cb(struct nl_object *match, void *arg)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct nl_object * match,void * arg)"}, {"_type": "tag", "name": "bridge_set_stp", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status bridge_set_stp(const char *bridge_name, char *val)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * bridge_name,char * val)"}, {"_type": "tag", "name": "file_read", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status file_read(const char *file_name, char *buf, size_t count)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * file_name,char * buf,size_t count)"}, {"_type": "tag", "name": "file_write", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status file_write(const char *file_name ,const char *buf, size_t count)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * file_name,const char * buf,size_t count)"}, {"_type": "tag", "name": "interface_add_to_bridge", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_add_to_bridge(const char* bridge_name, const char* if_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * bridge_name,const char * if_name)"}, {"_type": "tag", "name": "interface_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_delete(char *name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * name)"}, {"_type": "tag", "name": "interface_down", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_down(char *if_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * if_name)"}, {"_type": "tag", "name": "interface_exist", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^int interface_exist(const char *if_name)$/", "language": "C", "typeref": "typename:int", "kind": "function", "signature": "(const char * if_name)"}, {"_type": "tag", "name": "interface_get_ip", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^char* interface_get_ip(const char* if_name)$/", "language": "C", "typeref": "typename:char *", "kind": "function", "signature": "(const char * if_name)"}, {"_type": "tag", "name": "interface_get_mac", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_get_mac(const char *if_name, char *mac, size_t size)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name,char * mac,size_t size)"}, {"_type": "tag", "name": "interface_get_stats", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_get_stats(cnl_ifstats_mask ifstats_mask, const char* if_name, cnl_iface_/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(cnl_ifstats_mask ifstats_mask,const char * if_name,cnl_iface_stats * stats)"}, {"_type": "tag", "name": "interface_remove_from_bridge", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_remove_from_bridge (const char *if_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name)"}, {"_type": "tag", "name": "interface_rename", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_rename(char *if_name, char *new_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * if_name,char * new_name)"}, {"_type": "tag", "name": "interface_set_flags", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_set_flags(char *if_name, unsigned int flags)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * if_name,unsigned int flags)"}, {"_type": "tag", "name": "interface_set_mac", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_set_mac(const char *if_name, char *mac)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name,char * mac)"}, {"_type": "tag", "name": "interface_set_mtu", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_set_mtu(const char *if_name, char *val)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name,char * val)"}, {"_type": "tag", "name": "interface_set_netmask", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_set_netmask(const char* if_name, const char *netmask)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name,const char * netmask)"}, {"_type": "tag", "name": "interface_up", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status interface_up(char *if_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * if_name)"}, {"_type": "tag", "name": "neighbour_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status neighbour_delete(char *dev, char *ip)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * dev,char * ip)"}, {"_type": "tag", "name": "neighbour_free_neigh", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^void neighbour_free_neigh(struct neighbour_info *neigh_info)$/", "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct neighbour_info * neigh_info)"}, {"_type": "tag", "name": "neighbour_get_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^static void neighbour_get_cb(struct nl_object *match, void *arg)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct nl_object * match,void * arg)"}, {"_type": "tag", "name": "neighbour_get_list", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status neighbour_get_list(struct neighbour_info *arr)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(struct neighbour_info * arr)"}, {"_type": "tag", "name": "route_add", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status route_add(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "route_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status route_delete(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "route_delete_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^static void route_delete_cb(struct nl_object *obj, void *arg)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct nl_object * obj,void * arg)"}, {"_type": "tag", "name": "rule_add", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status rule_add(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "rule_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status rule_delete(char *args)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(char * args)"}, {"_type": "tag", "name": "rule_delete_cb", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^static void rule_delete_cb(struct nl_object *obj, void *arg)$/", "file": true, "language": "C", "typeref": "typename:void", "kind": "function", "signature": "(struct nl_object * obj,void * arg)"}, {"_type": "tag", "name": "tunnel_add_ip4ip6", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status tunnel_add_ip4ip6(const char *tunnel_name, const char *dev_name,$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * tunnel_name,const char * dev_name,const char * local_ip6,const char * remote_ip6,const char * encaplimit)"}, {"_type": "tag", "name": "vlan_create", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status vlan_create(const char *if_name, int vid)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * if_name,int vid)"}, {"_type": "tag", "name": "vlan_delete", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "pattern": "/^libnet_status vlan_delete(const char *vlan_name)$/", "language": "C", "typeref": "typename:libnet_status", "kind": "function", "signature": "(const char * vlan_name)"}], "hash": "f70628cef62cdd4fedb0b123e8baad02", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/CoreNetLib/source/libnet.c", "revision_history": [{"26115": ""}]}