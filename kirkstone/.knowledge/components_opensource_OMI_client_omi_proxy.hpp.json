{"is_source_file": true, "format": "C++ header file", "description": "This file declares the omi::OmiProxy class, which implements the IOmiProxy interface for managing crypted bundles and handling OMI-related signal monitoring in a C++ project. It includes method declarations for mounting/unmounting bundles, registering/unregistering listeners, and internal thread handling.", "external_files": ["<gio/gio.h>", "<i_omi_proxy.hpp>"], "external_methods": ["GDBusProxy (from g_object_new)", "notifyThreadStarted (static gboolean method)"], "published": ["omi::OmiProxy", "omi::IOmiProxy"], "classes": [{"name": "OmiProxy", "description": "A class implementing the IOmiProxy interface to manage crypted bundles and signal monitoring in an OMI environment."}], "methods": [{"name": "mountCryptedBundle", "description": "Mounts a crypted bundle given its ID, root filesystem path, and configuration JSON path; outputs the bundle path."}, {"name": "umountCryptedBundle", "description": "Unmounts a crypted bundle identified by its ID."}, {"name": "registerListener", "description": "Registers a listener for OMI error events, returning a tag."}, {"name": "unregisterListener", "description": "Unregisters a previously registered listener by its tag."}, {"name": "startSignalMonitorThread", "description": "Starts the thread responsible for monitoring signals."}, {"name": "signalMonitorThread", "description": "Function executed by the signal monitoring thread."}, {"name": "signalHandler", "description": "Static callback invoked when a specific GDBus signal is received."}, {"name": "handleVerityFailed", "description": "Handles a 'verity failed' signal with parameters."}, {"name": "notifyThreadStarted", "description": "Static callback indicating thread startup."}, {"name": "init", "description": "Initialization routine for setting up OMI proxy."}], "calls": ["g_object_new(G_GTYPE_PROXY, ...)", "GMainLoop *g_main_loop_new", "notifyThreadStarted"], "search-terms": ["OmiProxy", "mountCryptedBundle", "unmountCryptedBundle", "signalHandler", "registerListener", "unregisterListener", "GMainLoop", "GDBusProxy"], "state": 2, "file_id": 313, "knowledge_revision": 13483, "git_revision": "", "ctags": [{"_type": "tag", "name": "OMI_PROXY_HPP_", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^#define OMI_PROXY_HPP_$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "Omi1", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^typedef struct _Omi1 Omi1;$/", "language": "C++", "typeref": "struct:_Omi1", "kind": "typedef"}, {"_type": "tag", "name": "OmiProxy", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^class OmiProxy : public IOmiProxy$/", "language": "C++", "kind": "class", "scope": "omi", "scopeKind": "namespace"}, {"_type": "tag", "name": "listenerCounter", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    long unsigned listenerCounter{1};$/", "language": "C++", "typeref": "typename:long unsigned", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_listeners", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    std::unordered_map<long unsigned, std::pair<OmiErrorListener, const void*>> m_listeners;$/", "language": "C++", "typeref": "typename:std::unordered_map<long unsigned,std::pair<OmiErrorListener,const void * >>", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_listeners_mtx", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    std::mutex m_listeners_mtx;$/", "language": "C++", "typeref": "typename:std::mutex", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_main_loop", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    GMainLoop* m_main_loop{nullptr};$/", "language": "C++", "typeref": "typename:GMainLoop *", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_monitor_thread_started", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    bool m_monitor_thread_started{false};$/", "language": "C++", "typeref": "typename:bool", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_omi", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    Omi1 *m_omi{nullptr};$/", "language": "C++", "typeref": "typename:Omi1 *", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_signal_monitor_cv", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    std::condition_variable m_signal_monitor_cv;$/", "language": "C++", "typeref": "typename:std::condition_variable", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_signal_monitor_mtx", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    std::mutex m_signal_monitor_mtx;$/", "language": "C++", "typeref": "typename:std::mutex", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "m_signal_monitor_thread", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^    std::thread m_signal_monitor_thread;$/", "language": "C++", "typeref": "typename:std::thread", "kind": "member", "scope": "omi::OmiProxy", "scopeKind": "class"}, {"_type": "tag", "name": "omi", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/client/omi_proxy.hpp", "pattern": "/^namespace omi$/", "language": "C++", "kind": "namespace"}], "hash": "0ed558afafbda70c1760e8b7abbf2747", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/OMI/client/omi_proxy.hpp", "fields": [{"name": "long unsigned listenerCounter", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "std::unordered_map<long unsigned,std::pair<OmiErrorListener,const void * >> m_listeners", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "std::mutex m_listeners_mtx", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "GMainLoop * m_main_loop", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "bool m_monitor_thread_started", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "Omi1 * m_omi", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "std::condition_variable m_signal_monitor_cv", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "std::mutex m_signal_monitor_mtx", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}, {"name": "std::thread m_signal_monitor_thread", "scope": "omi::OmiProxy", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"13483": ""}]}