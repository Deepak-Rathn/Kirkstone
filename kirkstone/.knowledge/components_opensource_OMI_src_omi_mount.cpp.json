{"is_source_file": true, "format": "C++", "description": "This file 'omi_mount.cpp' contains functions related to mounting encrypted container images, extracting payloads from JWT/JWS tokens, and handling JSON configurations for mounting procedures in a Linux environment.", "external_files": ["<cassert>", "<cerrno>", "<cstdio>", "<cstring>", "<string>", "<string.h>", "<sys/stat.h>", "<unistd.h>", "<cjose/base64.h>", "<cjose/util.h>", "libkwk.h", "mntfsimg.hpp", "omi_log.hpp", "omi_mount.hpp", "omi_parser.hpp", "omi_utils.hpp", "dac_jwt_jwe.hpp", "dac_jwt_jwk.hpp", "dac_jwt_jws.hpp"], "external_methods": ["Log::error", "kwk_get_cb_table", "ParseConfigJson", "MapMountError", "cjose_base64url_decode", "cjose_get_dealloc"], "published": ["GetJwsPayload", "DoMount"], "classes": [], "methods": [{"name": "int GetJwsPayload(const char * plaintext,const int plaintext_len,char ** payload)", "description": "Extracts and verifies the payload from a JWS compact serialization string, retrieving the associated JWS key ID and verifying the signature.", "scope": "omi", "scopeKind": "namespace"}, {"name": "int DoMount(mntfsimg::ImageMounter & mounter,const std::string & id,const std::string & rootfs_path,const std::string & config_json_path,std::string & container_path,std::string & errmsg)", "description": "Performs the process of mounting an encrypted container image, decrypting configuration, and setting up the mount point and associated configuration files.", "scope": "omi", "scopeKind": "namespace"}], "calls": ["strndup", "asprintf", "Log::error", "stat", "fopen", "malloc", "fgets", "free", "dac_jwt::GetJwsKeyId", "dac_jwt::GetJwsJwk", "dac_jwt::VerifyJws", "ParseConfigJson", "cjose_base64url_decode", "mkdir", "chmod", "stat", "chown", "fwrite", "symlink", "cjose_get_dealloc", "remove"], "search-terms": ["omi_mount.cpp", "mount encrypted container", "JWT JWS verification", "config decryption", "mount procedure", "encrypted rootfs", "JWE/JWS", "mount error handling"], "state": 2, "file_id": 307, "knowledge_revision": 13477, "git_revision": "", "ctags": [{"_type": "tag", "name": "DoMount", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/src/omi_mount.cpp", "pattern": "/^int DoMount(mntfsimg::ImageMounter& mounter,$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(mntfsimg::ImageMounter & mounter,const std::string & id,const std::string & rootfs_path,const std::string & config_json_path,std::string & container_path,std::string & errmsg)", "scope": "omi", "scopeKind": "namespace"}, {"_type": "tag", "name": "GetJwsPayload", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/src/omi_mount.cpp", "pattern": "/^int GetJwsPayload(const char* plaintext,$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(const char * plaintext,const int plaintext_len,char ** payload)", "scope": "omi", "scopeKind": "namespace"}, {"_type": "tag", "name": "omi", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/components/opensource/OMI/src/omi_mount.cpp", "pattern": "/^namespace omi$/", "file": true, "language": "C++", "kind": "namespace"}], "hash": "4112bce5298aace8df54c3216741eca2", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/OMI/src/omi_mount.cpp", "revision_history": [{"13477": ""}]}