{"is_source_file": true, "format": "Python", "description": "This file provides utility functions and classes for managing Git repositories, including initializing repositories, committing data, creating tags, pushing updates, and handling test revisions. It is used for automating version control and release workflows within a larger build or CI system.", "external_files": ["oeqa.utils.git"], "external_methods": ["GitRepo.init", "GitRepo", "GitError"], "published": ["gitarchive", "get_test_runs", "get_test_revs", "rev_find"], "classes": [{"name": "ArchiveError", "description": "Custom exception class for internal error handling within this script"}, {"name": "TestedRev", "description": "Named tuple to represent tested revisions including commit, commit number, and tags"}], "methods": [{"name": "format_str(string, fields)", "description": "Formats a string using provided fields and raises an ArchiveError if a key is missing", "scope": "", "scopeKind": ""}, {"name": "init_git_repo(path, no_create, bare, log)", "description": "Initializes a local Git repository at a specified path, creating it if necessary and allowed", "scope": "", "scopeKind": ""}, {"name": "git_commit_data(repo, data_dir, branch, message, exclude, notes, log)", "description": "Commits data into a Git repository, creating trees and commits, and optionally adding notes", "scope": "", "scopeKind": ""}, {"name": "expand_tag_strings(repo, name_pattern, msg_subj_pattern, msg_body_pattern, keywords)", "description": "Generates tag name and message strings, with support for sequential numbering", "scope": "", "scopeKind": ""}, {"name": "gitarchive(data_dir, git_dir, no_create, bare, commit_msg_subject, commit_msg_body, branch_name, no_tag, tagname, tag_msg_subject, tag_msg_body, exclude, notes, push, keywords, log)", "description": "Main function to archive data, create tags, and push to remote repositories", "scope": "", "scopeKind": ""}, {"name": "get_test_runs(log, repo, tag_name, **kwargs)", "description": "Retrieves and sorts test runs matching specific tag name patterns", "scope": "", "scopeKind": ""}, {"name": "get_test_revs(log, repo, tag_name, **kwargs)", "description": "Returns a list of all tested revisions with associated tags, parsing test run data", "scope": "", "scopeKind": ""}, {"name": "rev_find(revs, attr, val)", "description": "Finds a specific revision in a list of TestedRev objects based on attribute value", "scope": "", "scopeKind": ""}], "calls": ["repo.run_cmd", "repo.rev_parse", "repo.get_current_branch", "os.path.abspath", "os.path.isdir", "os.listdir", "os.mkdir", "os.unlink", "re.match", "re.finditer", "re.compile"], "search-terms": ["git archive utility", "Git repository management", "test revision collection", "tag pattern expansion", "automated git commit and push"], "state": 2, "file_id": 1877, "knowledge_revision": 15020, "git_revision": "", "ctags": [{"_type": "tag", "name": "ArchiveError", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^class ArchiveError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestedRev", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^TestedRev = namedtuple('TestedRev', 'commit commit_number tags')$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "expand_tag_strings", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def expand_tag_strings(repo, name_pattern, msg_subj_pattern, msg_body_pattern,$/", "language": "Python", "kind": "function", "signature": "(repo, name_pattern, msg_subj_pattern, msg_body_pattern, keywords)"}, {"_type": "tag", "name": "format_str", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def format_str(string, fields):$/", "language": "Python", "kind": "function", "signature": "(string, fields)"}, {"_type": "tag", "name": "get_test_revs", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def get_test_revs(log, repo, tag_name, **kwargs):$/", "language": "Python", "kind": "function", "signature": "(log, repo, tag_name, **kwargs)"}, {"_type": "tag", "name": "get_test_runs", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def get_test_runs(log, repo, tag_name, **kwargs):$/", "language": "Python", "kind": "function", "signature": "(log, repo, tag_name, **kwargs)"}, {"_type": "tag", "name": "git_commit_data", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def git_commit_data(repo, data_dir, branch, message, exclude, notes, log):$/", "language": "Python", "kind": "function", "signature": "(repo, data_dir, branch, message, exclude, notes, log)"}, {"_type": "tag", "name": "gitarchive", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def gitarchive(data_dir, git_dir, no_create, bare, commit_msg_subject, commit_msg_body, branch_n/", "language": "Python", "kind": "function", "signature": "(data_dir, git_dir, no_create, bare, commit_msg_subject, commit_msg_body, branch_name, no_tag, tagname, tag_msg_subject, tag_msg_body, exclude, notes, push, keywords, log)"}, {"_type": "tag", "name": "init_git_repo", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def init_git_repo(path, no_create, bare, log):$/", "language": "Python", "kind": "function", "signature": "(path, no_create, bare, log)"}, {"_type": "tag", "name": "rev_find", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "pattern": "/^def rev_find(revs, attr, val):$/", "language": "Python", "kind": "function", "signature": "(revs, attr, val)"}], "hash": "55a3e7add00feb3d1d4cfe54a8b3870f", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "openembedded-core/meta/lib/oeqa/utils/gitarchive.py", "fields": [{"name": "TestedRev = namedtuple('TestedRev', 'commit commit_number tags')", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15020": ""}]}