{"is_source_file": true, "format": "C header file", "description": "This file defines utility functions, macros, and data structures for managing controller configurations, processing wireless radio and device information, and handling network parameters within the RdkEasyMeshController project. It includes function declarations for updating ALE source MAC, parsing frames, converting units, managing radio channels, and more.", "external_files": ["map_utils.h", "map_data_model.h", "map_config.h"], "external_methods": ["map_is_no_subband_channel_set"], "published": ["get_controller_cfg", "parse_update_client_capability", "map_update_ale_source_mac", "map_update_ale_receiving_iface", "map_recompute_radio_state_and_update_ale_state", "map_reset_agent_node_onboarding_status", "map_reset_all_agent_nodes_onboarding_status", "map_convert_mapunits_to_bytes", "map_scan_status_to_string", "map_scan_type_to_string", "map_find_radio_by_supported_channel", "map_get_freq_bands", "map_is_5g_low_high", "map_get_profile_from_bss", "map_radio_has_profile_with_bss_state", "map_get_wsc_attr", "map_is_channel_in_cap_op_class", "map_get_channel_pref", "map_update_radio_channels", "map_merge_pref_op_class_list", "map_optimize_pref_op_class_list", "map_is_no_subband_channel_set", "map_is_all_subband_channel_set", "map_sort_op_class_list", "map_is_cac_request_valid", "map_find_local_iface", "map_find_bhsta_iface_from_ale", "map_find_bhsta_iface_gbl", "map_free_ht_vht_he_wifi6_caps", "map_update_radio_caps"], "classes": [], "methods": [{"name": "map_update_ale_receiving_iface", "description": "Updates the receiving interface of the ALE node."}, {"name": "map_recompute_radio_state_and_update_ale_state", "description": "Calculates the onboard state of an ALE from radio state bits."}, {"name": "map_reset_agent_node_onboarding_status", "description": "Resets the onboarding status of a specific ALE node."}, {"name": "map_reset_all_agent_nodes_onboarding_status", "description": "Resets onboarding status for all ALE nodes."}, {"name": "map_convert_mapunits_to_bytes", "description": "Converts MAP units to byte resolution based on the unit parameter."}, {"name": "map_scan_status_to_string", "description": "Converts a scan status flag into a human-readable string."}, {"name": "map_scan_type_to_string", "description": "Converts a scan type flag into a human-readable string."}, {"name": "map_find_radio_by_supported_channel", "description": "Finds the first radio supporting a specified channel."}, {"name": "map_get_freq_bands", "description": "Retrieves the supported frequency bands of a radio."}, {"name": "map_is_5g_low_high", "description": "Checks if a radio is 5G supporting low and high bands."}, {"name": "map_get_profile_from_bss", "description": "Guesses the profile used to configure a BSS."}, {"name": "map_radio_has_profile_with_bss_state", "description": "Checks if a radio has a profile with a specific BSS state."}, {"name": "map_get_wsc_attr", "description": "Retrieves an attribute from a WSC message."}, {"name": "map_is_channel_in_cap_op_class", "description": "Checks if a channel is in a capability operational class."}, {"name": "map_get_channel_pref", "description": "Gets the preference of a channel in an operational class list."}, {"name": "map_update_radio_channels", "description": "Updates the supported channel set of a radio based on configuration and capabilities."}, {"name": "map_merge_pref_op_class_list", "description": "Merges two op_class lists, taking the lowest preference."}, {"name": "map_optimize_pref_op_class_list", "description": "Removes channel lists that contain all channels of an op_class for optimization."}, {"name": "map_is_no_subband_channel_set", "description": "Checks if no subband channels from a specified channel and op_class are present."}, {"name": "map_is_all_subband_channel_set", "description": "Checks if all subband channels from a specified channel and op_class are present."}, {"name": "map_sort_op_class_list", "description": "Sorts the op_class list and channels within."}, {"name": "map_is_cac_request_valid", "description": "Verifies if a CAC request for a radio, method, op_class, and channel is valid."}, {"name": "map_find_local_iface", "description": "Finds local interface of an ALE based on MAC address."}, {"name": "map_find_bhsta_iface_from_ale", "description": "Finds backhaul station interface from an ALE based on MAC."}, {"name": "map_find_bhsta_iface_gbl", "description": "Finds backhaul station interface globally based on MAC."}, {"name": "map_free_ht_vht_he_wifi6_caps", "description": "Deletes capability TLVs related to HT, VHT, HE, and Wi-Fi 6 from radio info."}, {"name": "map_update_radio_caps", "description": "Updates the global radio capabilities from capability TLVs."}, {"name": "void map_update_ale_source_mac(map_ale_info_t * ale,uint8_t * src_mac)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["map_is_no_subband_channel_set"], "search-terms": ["controller", "ALE", "map_ctrl_utils", "channel_set", "op_class", "radio", "bss", "RADIO_SUPPORT", "CAPI", "WSC", "capability", "subband"], "state": 2, "file_id": 8582, "knowledge_revision": 21616, "git_revision": "", "ctags": [{"_type": "tag", "name": "IS_ANY_SUBBAND_CHANNEL_SET", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/include/map_ctrl_utils.h", "pattern": "/^#define IS_ANY_SUBBAND_CHANNEL_SET(/", "language": "C++", "kind": "macro", "signature": "(channel_set,channel,opclass)"}, {"_type": "tag", "name": "MAP_CTRL_UTILS_H_", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/include/map_ctrl_utils.h", "pattern": "/^#define MAP_CTRL_UTILS_H_$/", "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "map_update_ale_source_mac", "path": "/home/kavia/workspace/code-generation/Kirkstone/kirkstone/rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/include/map_ctrl_utils.h", "pattern": "/^static inline void map_update_ale_source_mac(map_ale_info_t *ale, uint8_t* src_mac)$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(map_ale_info_t * ale,uint8_t * src_mac)"}], "hash": "c4817f6b6fdd2b4922f783dbb5bf4d44", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/RdkEasyMeshController/source/controller/include/map_ctrl_utils.h", "revision_history": [{"21616": ""}]}