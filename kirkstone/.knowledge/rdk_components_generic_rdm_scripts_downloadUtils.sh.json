{"is_source_file": true, "format": "shell script (sh)", "description": "This file is a shell script providing utilities for downloading and extracting application images, managing retries, handling various connection types (Codebig, direct), and retrieving configuration values for a device management system. It includes functions for URL handling, download status checks, and blocklist management based on previous failures.", "external_files": ["/etc/device.properties", "/etc/include.properties", "/etc/rdm/loggerUtils.sh", "/lib/rdk/t2Shared_api.sh", "$RDK_PATH/exec_curl_mtls.sh", "/usr/bin/jsonquery", "/version.txt", "/nvram/.rdm_ssr_location", "/tmp/.httpcode", "/tmp/.lastdirectfail", "/tmp/.lastcodebigfail", "/tmp/.forcedirectonce", "/etc/dropbear/elxrretyt.swr"], "external_methods": ["jsonquery", "exec_curl_mtls", "log_msg", "t2CountNotify", "t2ValNotify", "grep", "awk", "sed", "grep", "cat", "cut", "date", "sleep", "rm", "touch", "scp", "cp", "ls"], "published": ["downloadApp_getFWVersion", "downloadApp_getBuildType", "downloadApp_getVersionPrefix", "getDownloadUrl", "IsDirectBlocked", "IsCodeBigBlocked", "get_Codebigconfig", "getCodebigUrl", "generateDownloadUrl", "sendDownloadRequest", "sendAppDownloadRequest", "applicationDownload", "applicationExtraction", "is_file_exists"], "classes": [], "methods": [{"name": "downloadApp_getFWVersion", "description": "Extracts the firmware version string from /version.txt based on specified tags, used to determine build info."}, {"name": "downloadApp_getBuildType", "description": "Determines the build type (VBN, PROD, QA, DEV, etc.) from firmware version tags."}, {"name": "downloadApp_getVersionPrefix", "description": "Strips the build type suffix from the firmware version to produce a version prefix."}, {"name": "getDownloadUrl", "description": "Retrieves the download URL for the application image, either from an SSR file or default URL, and converts HTTP to HTTPS."}, {"name": "IsDirectBlocked", "description": "Checks if direct download is blocked based on the last failure timestamp stored in a file."}, {"name": "IsCodeBigBlocked", "description": "Checks if codebig download is blocked based on the last failure timestamp stored in a file."}, {"name": "get_Codebigconfig", "description": "Retrieves configuration for whether to use Codebig connection, based on device and feature availability."}, {"name": "getCodebigUrl", "description": "Generates a signed URL for Codebig downloads, involving a signing script and authorization headers."}, {"name": "generateDownloadUrl", "description": "Prepares the appropriate download URL and curl command parameters depending on the connection type (Codebig or direct)."}, {"name": "sendDownloadRequest", "description": "Executes a curl request with retries for downloading the application package, handling response codes."}, {"name": "sendAppDownloadRequest", "description": "Performs an application package download with error handling and logging."}, {"name": "applicationDownload", "description": "Coordinates the download process: setup, retries, use of Codebig or direct connection, and error handling."}, {"name": "applicationExtraction", "description": "Extracts the downloaded tar.gz file into target directory, with cleanup on failure."}, {"name": "is_file_exists", "description": "Checks existence of a file and outputs its basename if present."}], "calls": ["jsonquery", "exec_curl_mtls", "log_msg", "t2CountNotify", "t2ValNotify", "grep", "awk", "sed", "cat", "cut", "date", "sleep", "rm", "touch", "scp", "cp", "ls"], "search-terms": ["downloadUtils.sh", "applicationDownload", "Codebig", "direct download", "URL signing", "device.properties", "xconf server", "ssr", "retry logic", "firmware version"], "state": 2, "file_id": 12630, "knowledge_revision": 25535, "git_revision": "", "hash": "cc647966b2b3d357ae98fa8319025a4e", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdk/components/generic/rdm/scripts/downloadUtils.sh", "revision_history": [{"25535": ""}]}