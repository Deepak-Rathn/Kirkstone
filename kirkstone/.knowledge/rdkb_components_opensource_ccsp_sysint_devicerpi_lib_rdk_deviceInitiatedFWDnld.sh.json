{"is_source_file": true, "format": "bash script / shell script", "description": "This file is a shell script (`.sh`) that manages device-initiated firmware downloads and upgrades, including checking device type, preparing and sending HTTP requests to a cloud server, handling responses, updating download status logs, and triggering firmware flashing procedures. It includes functions for download via TFTP or HTTP, JSON response processing, and different upgrade scenarios based on trigger types.", "external_files": ["/etc/include.properties", "/etc/device.properties", "/etc/common.properties", "$RDK_PATH/utils.sh", "$RDK_PATH/commonUtils.sh", "$RDK_PATH/snmpUtils.sh", "/lib/rdk/imageFlasher.sh"], "external_methods": ["getModel", "Timestamp"], "published": [], "classes": [], "methods": [{"name": "updateFWDownloadStatus", "description": "Updates the firmware download status in a log file with various parameters including protocol, status, reboot flag, failure reason, version, filename, last run time, and update state."}, {"name": "getFWVersion", "description": "Retrieves the current firmware version from version.txt, matching specific tags."}, {"name": "getBuildType", "description": "Determines whether the build is VBN, PROD, QA, or DEV based on the version string."}, {"name": "sendTLSRequest", "description": "Sends an HTTPS request to the cloud URL and evaluates the HTTP response."}, {"name": "httpDownload", "description": "Handles HTTP download of the firmware image."}, {"name": "tftpDownload", "description": "Handles TFTP download of the firmware image."}, {"name": "invokeImageFlasher", "description": "Triggers the image flashing script with the specified parameters."}, {"name": "getServURL", "description": "Determines the server URL for firmware updates based on build type and configuration."}, {"name": "triggerPCIUpgrade", "description": "Initiates the PCI upgrade process, calling the image flasher."}, {"name": "checkForValidPCIUpgrade", "description": "Checks if the firmware version differs, indicating an upgrade is needed."}, {"name": "checkForUpgrades", "description": "Determines if upgrades are needed, mainly PCI upgrades, and triggers them."}, {"name": "processJsonResponse", "description": "Parses the cloud response JSON and extracts firmware info and upgrade parameters."}, {"name": "exitForXconf404response", "description": "Handles 404 responses from Xconf server, logging and exiting."}, {"name": "createJsonString", "description": "Constructs a JSON string with device info and capabilities for request."}, {"name": "sendXCONFTLSRequest", "description": "Attempts to send a TLS request to the Xconf server with retries."}, {"name": "sendXCONFRequest", "description": "Sends the Xconf request over TLS."}, {"name": "sendJsonRequestToCloud", "description": "Main function to send JSON request to cloud and process the response."}], "calls": ["getFWVersion", "getBuildType", "sendJsonRequestToCloud", "updateFWDownloadStatus", "triggerPCIUpgrade", "invokeImageFlasher", "processJsonResponse"], "search-terms": ["firmware download", "device type", "Xconf", "fw version", "upgrade status", "json parsing", "HTTP request", "TLS request", "image flashing", "shell script"], "state": 2, "file_id": 7138, "knowledge_revision": 20219, "git_revision": "", "hash": "4e6473bc19fb918c0c3af561c789f8e6", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/sysint/devicerpi/lib/rdk/deviceInitiatedFWDnld.sh", "revision_history": [{"20219": ""}]}