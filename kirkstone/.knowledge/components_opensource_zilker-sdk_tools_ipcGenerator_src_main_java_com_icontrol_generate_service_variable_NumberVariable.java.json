{"is_source_file": true, "format": "Java", "description": "This file defines the 'NumberVariable' class, which models primitive numerical variables (like int, float, double) for code generation and serialization purposes within the project. It includes methods for type identification, code generation for encoding/decoding JSON, and type conversion between Java and C.", "external_files": ["com.icontrol.generate.service.TemplateMappings", "com.icontrol.generate.service.context.ContextNative", "com.icontrol.util.StringUtils", "com.icontrol.xmlns.service.ICNumType", "com.icontrol.xmlns.service.ICNumVariable"], "external_methods": ["com.icontrol.generate.service.variable.BaseVariable#resolveReferences()", "com.icontrol.generate.service.variable.BaseVariable#isInt()", "com.icontrol.generate.service.variable.BaseVariable#isShort()", "com.icontrol.generate.service.variable.BaseVariable#isLong()", "com.icontrol.generate.service.variable.BaseVariable#isFloat()", "com.icontrol.generate.service.variable.BaseVariable#isDouble()", "com.icontrol.generate.service.variable.BaseVariable#getCtype()", "com.icontrol.generate.service.variable.BaseVariable#getJavaType()", "com.icontrol.generate.service.variable.BaseVariable#getJsonKey()", "com.icontrol.generate.service.variable.BaseVariable#getNativeEncodeLines()", "com.icontrol.generate.service.variable.BaseVariable#getNativeDecodeLines()", "com.icontrol.generate.service.variable.BaseVariable#getJavaEncodeLines()", "com.icontrol.generate.service.variable.BaseVariable#getJavaDecodeLines()", "com.icontrol.generate.service.variable.BaseVariable#getJavaIpcObjectType()"], "published": ["getXmlDefinedType()"], "classes": [{"name": "NumberVariable", "description": "Represents a numerical variable with specific type (int, float, double, etc.) including encoding/decoding and type inference methods."}], "methods": [{"name": "NumberVariable(ICNumVariable bean)", "description": "Constructor initializing from an ICNumVariable bean, setting type and signedness."}, {"name": "NumberVariable(String varName, ICNumType.Enum kind)", "description": "Constructor setting variable name and type, used when native implementation is not involved."}, {"name": "resolveReferences", "description": "No-op override, as references are assumed resolved."}, {"name": "isShort", "description": "Checks if the variable is of 'short' type."}, {"name": "isInt", "description": "Checks if the variable is of 'int' type."}, {"name": "isLong", "description": "Checks if the variable is of 'long' type."}, {"name": "isFloat", "description": "Checks if the variable is of 'float' type."}, {"name": "isDouble", "description": "Checks if the variable is of 'double' type."}, {"name": "getCtype", "description": "Returns the C language C type representation of the variable based on its type and signedness."}, {"name": "getJavaType", "description": "Returns the Java language type of the variable."}, {"name": "getJsonKey", "description": "Provides the JSON key mapping for this type."}, {"name": "getXmlDefinedType", "description": "Returns the XML enumeration defining the variable's numeric type."}, {"name": "getNativeEncodeLines", "description": "Generates C code lines to encode the variable into a JSON structure."}, {"name": "getNativeDecodeLines", "description": "Generates C code lines to decode the variable from a JSON structure."}, {"name": "getJavaEncodeLines", "description": "Generates Java code lines to encode the variable into a JSON structure."}, {"name": "getJavaDecodeLines", "description": "Generates Java code lines to decode the variable from a JSON structure."}, {"name": "getJavaIpcObjectType", "description": "Returns the Java IPC object type string based on the variable type."}], "calls": ["com.icontrol.generate.service.variable.BaseVariable#resolveReferences", "com.icontrol.generate.service.variable.BaseVariable#isInt", "com.icontrol.generate.service.variable.BaseVariable#isShort", "com.icontrol.generate.service.variable.BaseVariable#isLong", "com.icontrol.generate.service.variable.BaseVariable#isFloat", "com.icontrol.generate.service.variable.BaseVariable#isDouble", "com.icontrol.generate.service.variable.BaseVariable#getCtype", "com.icontrol.generate.service.variable.BaseVariable#getJavaType", "com.icontrol.generate.service.variable.BaseVariable#getJsonKey", "com.icontrol.generate.service.variable.BaseVariable#getNativeEncodeLines", "com.icontrol.generate.service.variable.BaseVariable#getNativeDecodeLines", "com.icontrol.generate.service.variable.BaseVariable#getJavaEncodeLines", "com.icontrol.generate.service.variable.BaseVariable#getJavaDecodeLines", "com.icontrol.generate.service.variable.BaseVariable#getJavaIpcObjectType"], "search-terms": ["NumberVariable", "primitive type", "ICNumType", "Code generation", "JSON encode/decode", "C type", "Java type"], "state": 2, "file_id": 487, "knowledge_revision": 13654, "git_revision": "", "hash": "dd59722556af02fbcffe1d25118f74ac", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "components/opensource/zilker-sdk/tools/ipcGenerator/src/main/java/com/icontrol/generate/service/variable/NumberVariable.java", "revision_history": [{"13654": ""}]}