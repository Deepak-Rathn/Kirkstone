{"is_source_file": true, "format": "Shell Script / Bash", "description": "This file is a shell script used for device-initiated firmware download and upgrade management on embedded devices. It contains functions for network requests, status updates, handling different upgrade triggers, parsing JSON responses for firmware info, and orchestrating the upgrade process during device reboot or command execution.", "external_files": ["/etc/include.properties", "/etc/device.properties", "/etc/common.properties", "/etc/utils.sh", "/etc/snmpUtils.sh", "/lib/rdk/imageFlasher.sh"], "external_methods": ["getFWVersion", "updateFWDownloadStatus", "getModel", "Timestamp"], "published": ["processJsonResponse", "sendJsonRequestToCloud", "updateFWDownloadStatus"], "classes": [], "methods": [{"name": "updateUpgradeFlag", "description": "Creates or removes a lock file indicating download in progress"}, {"name": "updateFWDownloadStatus", "description": "Updates the firmware download status in a log file with details"}, {"name": "getFWVersion", "description": "Retrieves current firmware version from version.txt based on predefined tags"}, {"name": "getBuildType", "description": "Determines if the build is VBN, PRODUCTION, QA, or DEVELOPMENT based on version info"}, {"name": "sendTLSRequest", "description": "Performs a curl request to the cloud URL, retrieves HTTP status code"}, {"name": "tftpDownload", "description": "Performs TFTP download of firmware image"}, {"name": "imageDownloadToLocalServer", "description": "Orchestrates triggering image download, updates status and calls TFTP"}, {"name": "invokeImageFlasher", "description": "Invokes external script to flash firmware image and optionally reboot"}, {"name": "getServURL", "description": "Determines server URL based on build type and config"}, {"name": "triggerPCIUpgrade", "description": "Coordinates PCI upgrade process by downloading and flashing image"}, {"name": "checkForValidPCIUpgrade", "description": "Verifies if a firmware upgrade is needed based on version mismatch"}, {"name": "checkForUpgrades", "description": "Handles the process of checking and initiating upgrades based on firmware info"}, {"name": "processJsonResponse", "description": "Parses JSON response from cloud to extract firmware info and update variables"}, {"name": "exitForXconf404response", "description": "Handles HTTP 404 responses from cloud, logs, and exits"}, {"name": "createJsonString", "description": "Creates JSON string with device info for cloud request"}, {"name": "sendXCONFTLSRequest", "description": "Attempts to communicate with XCONF server with retries"}, {"name": "sendXCONFRequest", "description": "Sends request to XCONF server and processes response"}, {"name": "sendJsonRequestToCloud", "description": "Main function to send JSON request for firmware info and handle response"}], "calls": ["getFWVersion", "updateFWDownloadStatus", "getBuildType", "sendXCONFRequest", "processJsonResponse", "exitForXconf404response", "createJsonString", "getServURL", "invokeImageFlasher", "updateUpgradeFlag", "checkForValidPCIUpgrade", "triggerPCIUpgrade"], "search-terms": ["deviceInitiatedFWDnld", "firmware download script", "XCONF", "Upgrade", "Firmware version", "device.properties", "logger", "curl", "TFTP download", "Firmware JSON response"], "state": 2, "file_id": 13133, "knowledge_revision": 26032, "git_revision": "", "hash": "e971d130daad0d73ce0a27aca08db322", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "meta-cmf-raspberrypi/meta-rdk-video/recipes-extended/sysint/sysint/deviceInitiatedFWDnld.sh", "revision_history": [{"26032": ""}]}