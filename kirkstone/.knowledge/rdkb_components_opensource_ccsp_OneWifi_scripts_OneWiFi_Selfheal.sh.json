{"is_source_file": true, "format": "Shell script", "description": "This file is a shell script used for self-healing and management of WiFi interfaces and hardware components on a network device. It includes functions for restarting WiFi services, checking for stuck conditions, resetting interface parameters, and rebooting the device if necessary. The script monitors multiple WiFi bands (2G, 5G, and 6G) and interfaces with system utilities and device-specific configurations to maintain network stability.", "external_files": ["/etc/log_timestamp.sh", "/lib/rdk/t2Shared_api.sh", "/usr/ccsp/tad/corrective_action.sh"], "external_methods": ["checkMaintenanceWindow", "echo_t"], "published": [], "classes": [], "methods": [{"name": "onewifi_restart_wifi", "description": "Restarts the WiFi service to recover from a detected fault."}, {"name": "vap_restart", "description": "Adjusts the maximum station limit for a given access point in response to a down event."}, {"name": "print_wifi_2g_txprobe_cnt", "description": "Logs the 2G WiFi probe request/response counts."}, {"name": "sync_all_wifi_2g_txprobe_cnt", "description": "Synchronizes the 2G WiFi probe counters."}, {"name": "check_wifi_2g_stuck_status", "description": "Checks whether the 2G WiFi radio is stuck and initiates reinitialization if necessary."}, {"name": "print_wifi_5g_txprobe_cnt", "description": "Logs the 5G WiFi probe request/response counts."}, {"name": "sync_all_wifi_5g_txprobe_cnt", "description": "Synchronizes the 5G WiFi probe counters."}, {"name": "check_wifi_5g_stuck_status", "description": "Checks whether the 5G WiFi radio is stuck and initiates reinitialization if necessary."}, {"name": "check_bss_queue_full", "description": "Detects if the BSS queue is full and sets a flag accordingly."}, {"name": "wave_driver_restart", "description": "Restarts the wave driver and WiFi services as part of self-healing."}, {"name": "check_bss_queue_one_min", "description": "Checks BSS queue status repeatedly over a minute for stability."}], "calls": ["systemctl restart onewifi.service", "dmcli eRT getv Device.WiFi.AccessPoint.*.X_CISCO_COM_BssMaxNumSta", "dmcli eRT setv Device.WiFi.AccessPoint.*.X_CISCO_COM_BssMaxNumSta", "wl -i wl0.1 counters", "wl -i wl1.1 counters", "wl -i wl0 reinit", "wl -i wl1 reinit", "dmcli eRT getv Device.WiFi.AccessPoint.*.Enable", "dmcli eRT getv Device.WiFi.SSID.1.Enable", "dmcli eRT getv Device.WiFi.AccessPoint.*.Enable", "dmcli eRT getv Device.WiFi.SSID.1.Enable", "dmcli eRT getv Device.DeviceInfo.X_RDKCENTRAL-COM_CMTS_MAC", "dmcli eRT getv Device.X_RDK_WebConfig.RfcEnable", "dmcli eRT setv Device.X_RDK_WebConfig.webcfgSubdocForceReset"], "search-terms": ["WiFi self-healing", "WiFi restart", "BSS queue full", "wave driver restart", "WiFi stuck detection", "interface reset", "CMTS detection", "device reboot"], "state": 2, "file_id": 6079, "knowledge_revision": 19196, "git_revision": "", "hash": "e8ea1475448d05ec24b32275c60e9bdd", "format-version": 4, "code-base-name": "meta-rdk-sampleapp", "filename": "rdkb/components/opensource/ccsp/OneWifi/scripts/OneWiFi_Selfheal.sh", "revision_history": [{"19196": ""}]}